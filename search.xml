<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安卓UniApp集成wangEditor富文本编辑器</title>
      <link href="/2025/04/13/%E6%8A%80%E6%9C%AF/UniApp/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFUniApp%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90wangEditor%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2025/04/13/%E6%8A%80%E6%9C%AF/UniApp/%E5%AE%89%E5%8D%93%E7%BB%88%E7%AB%AFUniApp%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90wangEditor%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="兼容多种渲染场景"><a href="#兼容多种渲染场景" class="headerlink" title="兼容多种渲染场景"></a>兼容多种渲染场景</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">// /pages/message/index.vue</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">scroll-y</span> <span class="attr">class</span>=<span class="string">&quot;scroll&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">&quot;editor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;editor&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;showWebview&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rich-text</span> <span class="attr">class</span>=<span class="string">&quot;editor&quot;</span> <span class="attr">:nodes</span>=<span class="string">&quot;selectInfo.details&quot;</span> <span class="attr">:preview</span>=<span class="string">&quot;true&quot;</span> <span class="attr">v-else</span>&gt;</span><span class="tag">&lt;/<span class="name">rich-text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">name</span>=<span class="string">&quot;notice&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted, onBeforeUnmount &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; createWebview, closeWebview, sendMessage &#125; <span class="keyword">from</span> <span class="string">&#x27;@/common/webview&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> showWebview = <span class="title function_">ref</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> selectInfo = <span class="title function_">ref</span>(&#123;&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">onNoticeInfo</span> = info =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  selectInfo.<span class="property">value</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, info);</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">sendMessage</span>(selectInfo.<span class="property">value</span>.<span class="property">details</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">getElementPosition</span> = cb =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> query = uni.<span class="title function_">createSelectorQuery</span>().<span class="title function_">in</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">  query</span></span><br><span class="line"><span class="language-javascript">    .<span class="title function_">select</span>(<span class="string">&#x27;#editor&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    .<span class="title function_">boundingClientRect</span>(<span class="function"><span class="params">rect</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (rect) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;元素四方位&#x27;</span>, rect);</span></span><br><span class="line"><span class="language-javascript">        cb &amp;&amp; <span class="title function_">cb</span>(rect);</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        cb &amp;&amp; <span class="title function_">cb</span>(<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    .<span class="title function_">exec</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">getElementPosition</span>(<span class="function"><span class="params">rect</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">createWebview</span>(rect, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (res) &#123;</span></span><br><span class="line"><span class="language-javascript">        showWebview.<span class="property">value</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">sendMessage</span>(selectInfo.<span class="property">value</span>.<span class="property">details</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        showWebview.<span class="property">value</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">closeWebview</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onBeforeUnmount</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">closeWebview</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.scroll</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">540</span>upx;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.editor</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="built_in">var</span>(--list-primary-text);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="封装webview加载组件"><a href="#封装webview加载组件" class="headerlink" title="封装webview加载组件"></a>封装webview加载组件</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /common/webview/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> webviewObj = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> currentWebview = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> webviewUrl = <span class="string">&#x27;/static/html/index.html&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createWebview</span> = (<span class="params">rect, cb</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// #ifdef APP-PLUS</span></span><br><span class="line">  <span class="title function_">closeWebview</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; width, height, left, top &#125; = rect;</span><br><span class="line">    <span class="keyword">let</span> style = &#123; width, height, left, top &#125;;</span><br><span class="line">    webviewObj = plus.<span class="property">webview</span>.<span class="title function_">create</span>(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;webview&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">plusrequire</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">      ...style,</span><br><span class="line">    &#125;);</span><br><span class="line">    webviewObj.<span class="title function_">loadURL</span>(webviewUrl);</span><br><span class="line">    webviewObj.<span class="title function_">addEventListener</span>(</span><br><span class="line">      <span class="string">&#x27;loading&#x27;</span>,</span><br><span class="line">      <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;webview loading&#x27;</span>, res);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="literal">false</span></span><br><span class="line">    );</span><br><span class="line">    webviewObj.<span class="title function_">addEventListener</span>(</span><br><span class="line">      <span class="string">&#x27;loaded&#x27;</span>,</span><br><span class="line">      <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        webviewObj.<span class="title function_">show</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;webview loaded&#x27;</span>, res);</span><br><span class="line">        cb &amp;&amp; <span class="title function_">cb</span>(<span class="literal">true</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="literal">false</span></span><br><span class="line">    );</span><br><span class="line">    webviewObj.<span class="title function_">addEventListener</span>(</span><br><span class="line">      <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">      <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;webview error&#x27;</span>, err);</span><br><span class="line">        cb &amp;&amp; <span class="title function_">cb</span>(<span class="literal">false</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="literal">false</span></span><br><span class="line">    );</span><br><span class="line">    webviewObj.<span class="title function_">addEventListener</span>(</span><br><span class="line">      <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">      <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;接收Web端消息&#x27;</span>, res);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="literal">false</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">const</span> pages = <span class="title function_">getCurrentPages</span>();</span><br><span class="line">    <span class="keyword">const</span> currentPage = pages[pages.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">    currentWebview = currentPage.$getAppWebview();</span><br><span class="line">    currentWebview.<span class="title function_">append</span>(webviewObj);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      webviewObj.<span class="title function_">setStyle</span>(style);</span><br><span class="line">      webviewObj.<span class="title function_">checkRenderedContent</span>(</span><br><span class="line">        &#123;&#125;,</span><br><span class="line">        <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;checkRenderedContent success&#x27;</span>, res);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;checkRenderedContent error&#x27;</span>, err);</span><br><span class="line">          cb &amp;&amp; <span class="title function_">cb</span>(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// #endif</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">sendMessage</span> = details =&gt; &#123;</span><br><span class="line">  <span class="comment">// #ifdef APP-PLUS</span></span><br><span class="line">  <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">  timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> jsCode = <span class="string">`setContent(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(details)&#125;</span>)`</span>;</span><br><span class="line">    <span class="keyword">let</span> webview = plus.<span class="property">webview</span>.<span class="title function_">getWebviewById</span>(<span class="string">&#x27;webview&#x27;</span>);</span><br><span class="line">    webview.<span class="title function_">evalJS</span>(jsCode);</span><br><span class="line">  &#125;, <span class="number">200</span>);</span><br><span class="line">  <span class="comment">// #endif</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">toggleWebview</span> = (<span class="params">status = <span class="string">&#x27;hide&#x27;</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (status == <span class="string">&#x27;show&#x27;</span>) &#123;</span><br><span class="line">    webviewObj &amp;&amp; webviewObj?.<span class="title function_">show</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    webviewObj &amp;&amp; webviewObj?.<span class="title function_">hide</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">closeWebview</span> = cb =&gt; &#123;</span><br><span class="line">  <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">  webviewObj &amp;&amp; webviewObj?.<span class="title function_">close</span>();</span><br><span class="line">  currentWebview = <span class="literal">null</span>;</span><br><span class="line">  cb &amp;&amp; <span class="title function_">cb</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="引入Web端HTML页面"><a href="#引入Web端HTML页面" class="headerlink" title="引入Web端HTML页面"></a>引入Web端HTML页面</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">// /static/html/index.html</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Editor View<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./dist/style.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dist/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.editor</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;editor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;editor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> editor = wangEditor.<span class="title function_">createEditor</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">selector</span>: <span class="string">&#x27;#editor&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">config</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">placeholder</span>: <span class="string">&#x27;数据加载中...&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">readOnly</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">autoFocus</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">mode</span>: <span class="string">&#x27;default&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">setContent</span>(<span class="params">html</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;接收APP端数据&#x27;</span>, html);</span></span><br><span class="line"><span class="language-javascript">        editor.<span class="title function_">setHtml</span>(html);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 前端 </tag>
            
            <tag> uniapp </tag>
            
            <tag> 富文本 </tag>
            
            <tag> wangEditor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文字上的中国-谚语</title>
      <link href="/2025/03/23/%E6%96%87%E5%AD%A6/%E6%96%87%E5%AD%97%E4%B8%8A%E7%9A%84%E4%B8%AD%E5%9B%BD/%E6%96%87%E5%AD%97%E4%B8%8A%E7%9A%84%E4%B8%AD%E5%9B%BD-%E8%B0%9A%E8%AF%AD/"/>
      <url>/2025/03/23/%E6%96%87%E5%AD%A6/%E6%96%87%E5%AD%97%E4%B8%8A%E7%9A%84%E4%B8%AD%E5%9B%BD/%E6%96%87%E5%AD%97%E4%B8%8A%E7%9A%84%E4%B8%AD%E5%9B%BD-%E8%B0%9A%E8%AF%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="芝草无根，醴泉无源"><a href="#芝草无根，醴泉无源" class="headerlink" title="芝草无根，醴泉无源"></a>芝草无根，醴泉无源</h1><p>来源：《酉阳杂居·续集四》<br>人物：李德裕、张九龄<br>典故：三国虞翻-“芝草无根，醴泉无源”</p><h1 id="种瓜得瓜，种豆得豆"><a href="#种瓜得瓜，种豆得豆" class="headerlink" title="种瓜得瓜，种豆得豆"></a>种瓜得瓜，种豆得豆</h1><p>来源：本是一句佛家讲因果报应的用语<br>延伸：善有善报，恶有恶报</p><h1 id="张公吃酒李公醉"><a href="#张公吃酒李公醉" class="headerlink" title="张公吃酒李公醉"></a>张公吃酒李公醉</h1><p>来源：唐周武则天，张公在喝酒，而没有喝酒的李公却醉了。常用来形容一方从中得到了利益，而另一方却空担了虚名。<br>延伸：武则天纳宠，人称面首</p><h1 id="宰相肚里能撑船"><a href="#宰相肚里能撑船" class="headerlink" title="宰相肚里能撑船"></a>宰相肚里能撑船</h1><p>来源：出自王安石之口<br>宰相：秦汉时期成为相国或丞相；隋唐时期以三省长官（中书省、门下省、尚书省）行宰相之职；宋元时以平章事为宰相；明永乐以后以内阁大学士为事实上的宰相；清代则以军机大臣行使宰相的职责。</p><h1 id="斩草留根，逢春再发"><a href="#斩草留根，逢春再发" class="headerlink" title="斩草留根，逢春再发"></a>斩草留根，逢春再发</h1><p>来源：《东周列国志》、《郑伯克段于鄢》</p><h1 id="知人知面不知心，画虎画皮难画骨"><a href="#知人知面不知心，画虎画皮难画骨" class="headerlink" title="知人知面不知心，画虎画皮难画骨"></a>知人知面不知心，画虎画皮难画骨</h1><p>来源：冯梦龙-《警世通言》之“庄周试妻”</p>]]></content>
      
      
      <categories>
          
          <category> 文学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3学习笔记</title>
      <link href="/2025/03/10/%E6%8A%80%E6%9C%AF/Vue/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/03/10/%E6%8A%80%E6%9C%AF/Vue/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="全局API"><a href="#全局API" class="headerlink" title="全局API"></a>全局API</h1><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><p>等待下一次<code>DOM</code>更新刷新的工具方法。</p><p>在<code>Vue</code>中更改响应式状态时，最终的<code>DOM</code>更新并不是同步生效，而是由<code>Vue</code>将它们缓存在一个队列中，直到下一个<code>tick</code>才一起执行。这样是为了确保每个组件无论发生多少状态改变，都仅执行一次更新。</p><p><code>nextTick()</code>可以在状态改变后立即使用，以等待<code>DOM</code>更新完成。</p><h2 id="app-provide"><a href="#app-provide" class="headerlink" title="app.provide"></a>app.provide</h2><p>提供一个值，可以在应用中的所有后代组件中注入使用。</p><p>第一个参数应当是注入的<code>key</code>，第二个参数则是提供的值。返回应用实例本身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; provide &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="title function_">provide</span>(<span class="string">&#x27;message&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="title function_">inject</span>(<span class="string">&#x27;message&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="app-config-errorHandler"><a href="#app-config-errorHandler" class="headerlink" title="app.config.errorHandler"></a>app.config.errorHandler</h2><p>用于为应用内抛出的未捕获错误指定一个全局处理函数。</p><h2 id="访问Props"><a href="#访问Props" class="headerlink" title="访问Props"></a>访问Props</h2><p><code>setup</code>函数的第一个参数是组件的<code>props</code>。和标准的组件一致，一个<code>setup</code>函数的<code>props</code>是响应式的，并且会在传入新的<code>props</code>时同步更新。</p><p>如果解构了<code>props</code>对象，解构出的变量将会丢失响应性。因此我们推荐通过<code>props.xxx</code>的形式来使用其中的<code>props</code>。</p><p>如果确实需要解构<code>props</code>对象，或需要将某个<code>props</code>传到一个外部函数中并保持响应性，那么你可以使用<code>toRefs()</code>和<code>toRef()</code>这两个工具函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; toRef, toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">defindeProps</span>(&#123;&#125;);</span><br><span class="line"><span class="keyword">const</span> &#123; title &#125; = <span class="title function_">toRefs</span>(props);</span><br><span class="line"><span class="keyword">const</span> title = <span class="title function_">toRef</span>(props, <span class="string">&#x27;title&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="组合式API"><a href="#组合式API" class="headerlink" title="组合式API"></a>组合式API</h1><h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><p>传入<code>setup</code>函数的第二个参数是一个<code>setup</code>上下文。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, context</span>) &#123;</span><br><span class="line">    <span class="comment">// 透传 Attributes (非响应式的对象，等价于 $attrs)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">attrs</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插槽（非响应式的对象，等价于 $slot）</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">slots</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发事件（函数，等价于 $emit）</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">emit</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴露公共属性（函数）</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">expose</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>该上下文对象是非响应式的，可以安全地解构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, &#123; attrs, slots, emit, expose &#125;</span>) &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>attrs</code>和<code>slots</code>都是有状态的对象，它们总是会随着组件自身的更新而更新。这意味着应当避免解构它们，并始终通过<code>attrs.x</code>或<code>slots.x</code>的形式使用其中的属性。此外还需注意，和<code>props</code>不同，<code>attrs</code>和<code>slots</code>的属性都不是响应式的。如果想要基于<code>attrs</code>或<code>slots</code>的改变来执行副作用，那么你应该在<code>onBeforeUpdate</code>生命周期狗子中编写相关逻辑。</p><h2 id="expose"><a href="#expose" class="headerlink" title="expose"></a>expose</h2><p><code>expose</code>函数用于显示地限制该组件暴露出的属性，当父组件通过模板引用访问该组件的实例时，将仅能访问<code>expose函数暴露出的内容</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, &#123; expose &#125;</span>) &#123;</span><br><span class="line">    <span class="comment">// 让组件实例处于“关闭状态”</span></span><br><span class="line">    <span class="comment">// 即不向父组件暴露任何东西</span></span><br><span class="line">    <span class="title function_">expose</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> publicCount = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> privateCount = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 有选择地暴露局部状态</span></span><br><span class="line">    <span class="title function_">expose</span>(&#123; <span class="attr">count</span>: publicCount &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="h"><a href="#h" class="headerlink" title="h"></a>h</h2><p><code>setup</code>也可以返回一个渲染函数，此时在渲染函数中可以直接使用在同一作用域下声明的响应式状态：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, count.<span class="property">value</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>返回一个渲染函数将会阻止我们返回其他东西。对于组件内部来说，这样没问题，但如果我们想通过模板引用将这个组件的方法暴露给父组件，那就有问题了。</p><p>可以通过调用<code>expose()</code>解决这个问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, &#123; expose &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; ++count.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">expose</span>(&#123; increment &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, count.<span class="property">value</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此时父组件可以通过模板引用来访问这个<code>increment</code>方法。</p><h1 id="响应式API：核心"><a href="#响应式API：核心" class="headerlink" title="响应式API：核心"></a>响应式API：核心</h1><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>接受一个内部值，返回一个响应式的、可更改的<code>ref</code>对象，此对象只有一个指向其内部值的属性<code>.value</code>。</p><p>如果将一个对象赋值给<code>ref</code>，那么这个对象将通过<code>reactive()</code>转为具有深层次响应式的对象。这也意味着如果对象中包含了嵌套的<code>ref</code>，它们将被深层地解包。</p><p>如果要避免这种深层次的转换，请使用<code>shallowRef()</code>来替代。</p><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><p>接受一个<code>getter</code>函数，返回一个只读的响应式<code>ref</code>对象。该<code>ref</code>通过<code>.value</code>暴露<code>getter</code>函数的返回值。它可以接受一个带有<code>get</code>和<code>set</code>函数的对象来创建一个可写的<code>ref</code>对象。</p><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><p>返回一个对象的响应式代理。</p><p>响应式转换是“深层”的：它会影响到所有嵌套的属性。一个响应式对象也将深层地解包任何<code>ref</code>属性，同时保持响应性。</p><p>值得注意的是，当访问到某个响应式数组或<code>Map</code>这样的原生集合类型中的<code>ref</code>元素时，不会执行<code>ref</code>的解包。</p><p>若要避免深层响应式转换，只想保留对这个对象顶层次访问的响应性，请使用<code>shallowReactive()</code>来替代。</p><p>返回的对象以及其中嵌套的对象都会通过<code>ES Proxy</code>包裹，因此不等于源对象，建议只使用响应式代理，避免使用原始对象。</p><p>注意当访问到某个响应式数组或<code>Map</code>这样的原生集合类型中的<code>ref</code>元素时，不会执行<code>ref</code>的解包：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> books = <span class="title function_">reactive</span>([<span class="title function_">ref</span>(<span class="string">&#x27;Vue 3 Guide&#x27;</span>)]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(books[<span class="number">0</span>].<span class="property">value</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = <span class="title function_">reactive</span>(<span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;count&#x27;</span>, <span class="title function_">ref</span>(<span class="number">0</span>)]]));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&#x27;count&#x27;</span>).<span class="property">value</span>);</span><br></pre></td></tr></table></figure><p>将一个<code>ref</code>赋值给一个<code>reactive</code>属性时，该<code>ref</code>会被自动解包。</p><h2 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h2><p>接受一个对象（响应式或普通对象）或是一个<code>ref</code>，返回一个原值的只读代理。</p><p>只读代理师深层的：对任何嵌套属性的访问都将是只读的。它的<code>ref</code>解包行为与<code>reactive</code>相同，但解包得到的值是只读的。</p><p>要避免深层级的转换行为，请使用<code>shallowReadonly()</code>来替代。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, readonly,<span class="title function_">watchEffect</span>() &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> original = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> copy = <span class="title function_">readonly</span>(original);</span><br><span class="line"></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 用来做响应式追踪</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(copy.<span class="property">count</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更改源属性会触发其依赖的侦听器</span></span><br><span class="line">original.<span class="property">count</span>++</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更改该只读副本将会失败，并会得到一个警告</span></span><br><span class="line">copy.<span class="property">count</span>++ <span class="comment">// warning!</span></span><br></pre></td></tr></table></figure><h2 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h2><p>立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行。</p><p>第一个参数就是要运行的副作用函数。这个副作用函数的参数也是一个函数，用来注册清理毁掉。清理回调会在该副作用下一次执行前被调用，可以用来清理无效的副作用。</p><p>第二个参数是一个可选的选项，可以用来调整副作用的刷新时机或调试副作用的依赖。</p><p>默认情况下，侦听器将在组件渲染之前执行。设置<code>flush: &#39;post&#39;</code>将会使侦听器延迟到组件渲染之后再执行。在某些特殊情况下（例如要使缓存失效），可能有必要在响应式依赖发生改变时立即触发侦听器。这可以通过设置<code>flush: &#39;sync&#39;</code>来实现。然而，该设置应谨慎使用，因为如果有多个属性同时更新，这将导致一些性能和数据一致性的问题。</p><p>返回值是一个用来停止该副作用的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>)); <span class="comment">// 输出0</span></span><br><span class="line">count.<span class="property">value</span>++; <span class="comment">// 输出1</span></span><br></pre></td></tr></table></figure><p><strong>停止侦听器：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stop = <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line"><span class="comment">// 当不再需要此侦听器时</span></span><br><span class="line"><span class="title function_">stop</span>();</span><br></pre></td></tr></table></figure><p><strong>暂停&#x2F;恢复侦听器：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; stop, pause, resume &#125; = <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暂停侦听器</span></span><br><span class="line"><span class="title function_">pause</span>();</span><br><span class="line"><span class="comment">// 恢复</span></span><br><span class="line"><span class="title function_">resume</span>();</span><br><span class="line"><span class="comment">// 停止</span></span><br><span class="line"><span class="title function_">stop</span>();</span><br></pre></td></tr></table></figure><p>副作用清理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watchEffect</span>(<span class="keyword">async</span> onCleanUp =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; response, cancel &#125; = <span class="title function_">duAsyncWork</span>(newId);</span><br><span class="line">  <span class="comment">// 如果id变化，则调用cancel</span></span><br><span class="line">  <span class="comment">// 如果之前的请求未完成，则取消该请求</span></span><br><span class="line">  <span class="title function_">onWatcherCleanup</span>(cancel);</span><br><span class="line">  data.<span class="property">value</span> = <span class="keyword">await</span> response;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p>侦听一个或多个响应式数据源，并在数据源变化时调用所给的回调函数。</p><p><code>watch</code>默认是懒侦听的，即仅在侦听源发生变化时才执行回调函数。</p><p>第一个参数是侦听器的源。这个来源可以是一下几种：</p><ul><li>一个函数，返回一个值</li><li>一个<code>ref</code></li><li>一个响应式对象</li><li>有以上类型的值组成的数组</li></ul><p>第二个参数是在发生变化时要调用的回调函数。这个回调函数接受三个参数：新值、旧值，以及一个用于注册副作用清理的回调函数。该回调函数会在副作用下一次重新执行前调用，可以用来清楚无效的副作用，例如等待中的异步请求。</p><p>当侦听多个来源时，回调函数接受两个数组，分别对应来源数组中的新值和旧值。</p><p>第三个可选的参数是一个对象，支持以下这些选项：</p><ul><li><code>immediate</code>：在侦听器创建时立即触发回调。第一次调用时旧值是<code>undefined</code>。</li><li><code>deep</code>：如果源时对象，强制深度遍历，以便在深层级变更时触发回调。在<code>3.5+</code>中，此参数还可以是指示最大遍历深度的数字。</li><li><code>flush</code>：调整回调函数的刷新时机。</li><li><code>onTrack/onTrigger</code>：调试侦听器的依赖。</li><li><code>once</code>：<code>3.4+</code>回调函数只会运行一次。侦听器将在回调函数首次运行后自动停止。</li></ul><p>与<code>watchEffect()</code>相比，<code>watch</code>使我们可以：</p><ul><li>懒执行副作用；</li><li>更加明确是应该由哪个状态触发侦听器重新执行；</li><li>可以访问所侦听状态的前一个值和当前值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 侦听一个getter函数</span></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> state.<span class="property">count</span>,</span><br><span class="line">  <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 侦听一个ref</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> count,</span><br><span class="line">  <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>当侦听多个来源时，回调函数接受两个数组，分别对应来源数组中的新值和旧值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="title function_">ref</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> bar = <span class="title function_">ref</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"><span class="title function_">watch</span>([foo, bar], <span class="function">(<span class="params">[fooNewVal, barNewVal], [fooOldVal, barOldVal]</span>) =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><p>当使用<code>getter</code>函数作为源时，回调只在此函数的返回值变化时才会触发。如果你想让回调在深层级变更时也能触发，你需要使用<code>&#123; deep: true &#125;</code>强制侦听器进入深层级模式。在深层级模式时，如果回调函数由于深层级的变更而被触发，那么新值和旧值将是同一个对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> state,</span><br><span class="line">  <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;&#125;,</span><br><span class="line">  &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>当直接侦听一个响应式对象时，侦听器会自动启用深层模式。</p><p><code>watch()</code>和<code>watchEffect()</code>享有相同的刷新时机和调试选项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(source, callback, &#123;</span><br><span class="line">  <span class="attr">flush</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="title function_">onTrack</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">debugger</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">onTrigger</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">debugger</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>停止侦听器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; stop, pause, resume &#125; = <span class="title function_">watch</span>(source, callback);</span><br><span class="line"><span class="comment">// 暂停侦听器</span></span><br><span class="line"><span class="title function_">pause</span>();</span><br><span class="line"><span class="comment">// 稍后恢复</span></span><br><span class="line"><span class="title function_">resume</span>();</span><br><span class="line"><span class="comment">// 停止</span></span><br><span class="line"><span class="title function_">stop</span>();</span><br></pre></td></tr></table></figure><p>副作用清理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(id, <span class="title function_">async</span> (newId, oldId, onCleanup) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; response, cancel &#125; = <span class="title function_">doAsyncWork</span>(newId);</span><br><span class="line">  <span class="comment">// 当id变化时，cancel将被调用</span></span><br><span class="line">  <span class="comment">// 取消之前的未完成的请求</span></span><br><span class="line">  <span class="title function_">onCleanup</span>(cancel);</span><br><span class="line">  data.<span class="property">value</span> = <span class="keyword">await</span> response;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.5+中副作用清理</span></span><br><span class="line"><span class="title function_">watch</span>(id, <span class="keyword">async</span> newId =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; response, cancel &#125; = <span class="title function_">doAsyncWork</span>(newId);</span><br><span class="line">  <span class="title function_">onWatcherCleanup</span>(cancel);</span><br><span class="line">  data.<span class="property">value</span> = <span class="keyword">await</span> response;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="onWatcherCleanup-3-5"><a href="#onWatcherCleanup-3-5" class="headerlink" title="onWatcherCleanup() 3.5+"></a>onWatcherCleanup() <sup><code>3.5+</code></sup></h2><p>注册一个清理函数，在当前侦听器即将重新运行时执行。只能在<code>watchEffect</code>作用函数或<code>watch</code>回调函数的同步执行期间调用（即不能在异步函数的<code>await</code>语句之后调用）。</p><h1 id="响应式API：工具"><a href="#响应式API：工具" class="headerlink" title="响应式API：工具"></a>响应式API：工具</h1><h2 id="isRef"><a href="#isRef" class="headerlink" title="isRef()"></a>isRef()</h2><p>检查某个值是否为<code>ref</code>。</p><p>返回值是一个类型板顶，这意味着<code>isRef</code>可以被用作类型守卫。</p><h2 id="toRef"><a href="#toRef" class="headerlink" title="toRef()"></a>toRef()</h2><p>可以将值、<code>refs</code>或<code>getters</code>规范化为<code>refs</code>(3.3+)。</p><p>也可以基于响应式对象上的一个属性，创建一个对应的<code>ref</code>。这样创建的<code>ref</code>与其源属性保持同步：改变源属性的值将更新<code>ref</code>的值，反之亦然。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">bar</span>: <span class="number">2</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向ref，会与源属性同步</span></span><br><span class="line"><span class="keyword">const</span> fooRef = <span class="title function_">toRef</span>(state, <span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="comment">// 更改ref会更新源属性</span></span><br><span class="line">fooRef.<span class="property">value</span>++;</span><br><span class="line"><span class="comment">// 更改源属性也会更新该ref</span></span><br><span class="line">state.<span class="property">foo</span>++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请注意，这不同于</span></span><br><span class="line"><span class="keyword">const</span> fooRef = <span class="title function_">ref</span>(state.<span class="property">foo</span>);</span><br><span class="line"><span class="comment">// 这个ref不会和 state.foo保持同步，因为这个ref()接收到的是一个纯数值</span></span><br></pre></td></tr></table></figure><p><code>toRef()</code>这个函数在你想要把一个<code>props</code>的<code>ref</code>传递给一个组合式函数时会很有用。</p><p>当<code>toRef</code>与组件<code>props</code>结合使用时，关于禁止对<code>props</code>做出更改的限制依然有效。尝试将新的值传递给<code>ref</code>等效于尝试直接更改<code>props</code>，这是不允许的。在这种场景下，你可以考虑使用带有<code>get</code>和<code>set</code>的<code>computed</code>替代。</p><p>当使用对象属性签名时，即使源属性当前不存在，<code>toRef()</code>也会返回一个可用的<code>ref</code>。这让它在处理可选<code>props</code>的时候格外实用，相比之下<code>toRefs()</code>就不会为可选<code>props</code>创建对应的<code>refs</code>。</p><h2 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs()"></a>toRefs()</h2><p>将一个响应式对象转换为一个普通对象，这个普通对象的每个属性都是指向源对象相应属性的<code>ref</code>。每个独立的<code>ref</code>都是使用<code>toRef()</code>创建的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">bar</span>: <span class="number">2</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stateAsRefs = <span class="title function_">toRefs</span>(state);</span><br><span class="line"><span class="comment">/* stateAsRefs 的类型：&#123;</span></span><br><span class="line"><span class="comment">  foo: Ref&lt;number&gt;,</span></span><br><span class="line"><span class="comment">  bar: Ref&lt;number&gt;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line">state.<span class="property">foo</span>++;</span><br><span class="line">stateAsRefs.<span class="property">foo</span>.<span class="property">value</span>++;</span><br></pre></td></tr></table></figure><p>当从组合式函数中返回响应式对象时，<code>toRefs</code>相当有用。使用它，消费者组件可以解构&#x2F;展开返回的对象而不会失去响应性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">useFeatureX</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">bar</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 基于状态的操作逻辑</span></span><br><span class="line">  <span class="comment">// 在返回时都转为ref</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">toRefs</span>(state);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以解构而不会失去响应性</span></span><br><span class="line"><span class="keyword">const</span> &#123; foo, bar &#125; = <span class="title function_">useFeatureX</span>();</span><br></pre></td></tr></table></figure><p><code>toRefs</code>在调用时只会为源对象上可以枚举的属性创建<code>ref</code>。如果要为可能还不存在的属性创建<code>ref</code>，请改用<code>toRef</code>。</p><h2 id="isProxy"><a href="#isProxy" class="headerlink" title="isProxy()"></a>isProxy()</h2><p>检查一个对象是否是由<code>reactive()</code>、<code>readonly()</code>、<code>shallowReactive()</code>或<code>shallowReadonly()</code>创建的代理。</p><h2 id="isReactive"><a href="#isReactive" class="headerlink" title="isReactive()"></a>isReactive()</h2><p>检查一个对象是否是由<code>reactive()</code>或<code>shallowReactive()</code>创建的代理。</p><h2 id="isReadonly"><a href="#isReadonly" class="headerlink" title="isReadonly()"></a>isReadonly()</h2><p>检查传入的值是否为只读对象。只读对象的属性可以更改，但它们不能通过传入的对象直接赋值。</p><p>通过<code>readonly()</code>和<code>shallowReadonly()</code>创建的代理都是只读的，类似于没有<code>set</code>函数的<code>computed()</code>的<code>ref</code>。</p><h1 id="响应式API：进阶"><a href="#响应式API：进阶" class="headerlink" title="响应式API：进阶"></a>响应式API：进阶</h1><h2 id="shallowRef"><a href="#shallowRef" class="headerlink" title="shallowRef()"></a>shallowRef()</h2><p><code>ref（）</code>的浅层作用形式。</p><p>和<code>ref()</code>不同，浅层<code>ref</code>的内部值将会原样存储和暴露，并且不会被深层递归地转为响应式。只有对<code>.value</code>的访问是响应式的。</p><p><code>shallowRef()</code>常常用于对大型数据结构的性能优化或是与外部的状态管理系统集成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="title function_">shallowRef</span>(&#123; <span class="attr">count</span>: <span class="number">1</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不会触发更改</span></span><br><span class="line">state.<span class="property">value</span>.<span class="property">count</span> = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 会触发更改</span></span><br><span class="line">state.<span class="property">value</span> = &#123; <span class="attr">count</span>: <span class="number">2</span> &#125;;</span><br></pre></td></tr></table></figure><h2 id="customRef"><a href="#customRef" class="headerlink" title="customRef()"></a>customRef()</h2><p>创建一个自定义的<code>ref</code>，显式声明对其依赖追踪和更新触发的控制方式。</p><p><code>customRef()</code>预期接收一个工厂函数作为参数，这个工厂函数接受<code>track</code>和<code>trigger</code>两个函数作为参数，并返回一个带有<code>get</code>和<code>set</code>方法的对象。</p><p>一般来说，<code>track()</code>应该在<code>get()</code>方法中调用，而<code>trigger()</code>应该在<code>set()</code>中调用。然而事实上，你对何时调用、是否应该调用它们有完全的控制权。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; customRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">useDebouncedRef</span> = (<span class="params">value, delay = <span class="number">200</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">customRef</span>(<span class="function">(<span class="params">track, trigger</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">track</span>();</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          value = newValue;</span><br><span class="line">          <span class="title function_">trigger</span>();</span><br><span class="line">        &#125;, delay);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在组件中使用</span></span><br><span class="line"><span class="keyword">import</span> &#123; useDebouncedRef &#125; <span class="keyword">from</span> <span class="string">&#x27;./deboucedRef&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> text = <span class="title function_">useDebouncedRef</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw()"></a>toRaw()</h2><p>根据一个<code>Vue</code>创建的代理返回其原始对象。</p><p><code>toRaw()</code>可以返回由<code>reactive()</code>、<code>readonly()</code>、<code>shallowReactive()</code>或者<code>shallowReadonly()</code>创建的代理对应的原始对象。</p><p>这是一个可以用于临时读取而不引起代理访问&#x2F;跟踪开销，或是写入而不触发更改的特殊方法。不建议保存对原始对象的持久引用，请谨慎使用。</p><h2 id="markRaw"><a href="#markRaw" class="headerlink" title="markRaw()"></a>markRaw()</h2><p>将一个对象标记为不可被转为代理。返回该对象本身。</p><h2 id="effectScope"><a href="#effectScope" class="headerlink" title="effectScope()"></a>effectScope()</h2><p>创建一个<code>effect</code>作用域，可以捕获其中所创建的响应式副作用（即计算属性和侦听器），这样捕获到的副作用可以一起清理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scope = <span class="title function_">effectScope</span>();</span><br><span class="line"></span><br><span class="line">scope.<span class="title function_">run</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> doudled = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> counter.<span class="property">value</span> * <span class="number">2</span>);</span><br><span class="line">  <span class="title function_">watch</span>(doudled, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(doudled.<span class="property">value</span>));</span><br><span class="line">  <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count:&#x27;</span>, doudled.<span class="property">value</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理掉当前作用域内的所有effect</span></span><br><span class="line">scope.<span class="title function_">stop</span>();</span><br></pre></td></tr></table></figure><h2 id="onScopeDispose"><a href="#onScopeDispose" class="headerlink" title="onScopeDispose()"></a>onScopeDispose()</h2><p>在当前活跃的<code>effect</code>作用域上注册一个处理回调函数。当相关的<code>effect</code>作用域停止时会调用这个回调函数。</p><p>这个方法可以作为可复用的组合式函数中<code>onUnmounted</code>的替代品，它并不与组件耦合，因为每一个<code>Vue</code>组件的<code>setup()</code>函数也是在一个<code>effect</code>作用域中调用的。</p><p>如果在没有活跃的<code>effect</code>作用域的情况下调用此函数，将会抛出警告。在<code>3.5+</code>版本中，可以通过将第二个参数设为<code>true</code>来消除此警告。</p><h1 id="组合式API：生命周期钩子"><a href="#组合式API：生命周期钩子" class="headerlink" title="组合式API：生命周期钩子"></a>组合式API：生命周期钩子</h1><p><strong>这些钩子在服务器端渲染期间不会被调用。</strong></p><h2 id="onMounted"><a href="#onMounted" class="headerlink" title="onMounted()"></a>onMounted()</h2><p>注册一个回调函数，在组件挂载完成后执行。</p><p>组件在以下情况下被视为已挂载：</p><ul><li>其所有同步子组件都已经被挂载（不包含异步组件或<code>&lt;Suspense&gt;</code>树内的组件）。</li><li>其自身的<code>DOM</code>树已经创建完成并完成插入了父容器中。注意仅当根容器在文档中时，才可以保证组件<code>DOM</code>树也在文档中。</li></ul><p>这个钩子通常用于执行需要访问组件所渲染的<code>DOM</code>树相关的副作用，或是在服务端渲染应用中用于确保<code>DOM</code>相关代码仅在客户端执行。</p><h2 id="onUpdated"><a href="#onUpdated" class="headerlink" title="onUpdated()"></a>onUpdated()</h2><p>注册一个回调函数，在组件因为响应式状态变更而更新其<code>DOM</code>树之后调用。</p><p>父组件的更新钩子将在其子组件的更新钩子之后调用。</p><p>这个钩子会在组件的任意<code>DOM</code>更新后被调用，这些更新可能是由不同的状态变更导致的，因为多个状态变更可以在同一个渲染周期中批量执行。如果你需要在某个特定的状态更改后访问更新后的<code>DOM</code>，请使用<code>nextTick</code>作为替代。</p><h2 id="onUnmounted"><a href="#onUnmounted" class="headerlink" title="onUnmounted()"></a>onUnmounted()</h2><p>注册一个回调函数，在组件实例被卸载之后调用。</p><p>一个组件在以下情况下被视为已卸载：</p><ul><li>其所有子组件都已经被卸载。</li><li>所哟相关的响应式作用（渲染作用以及<code>setup()</code>时创建的计算属性和侦听器）都已经停止。</li></ul><p>可以在这个钩子中手动清理一些副作用，例如计时器、<code>DOM</code>事件监听器或者与服务器的连接。</p><h2 id="onBeforeMount"><a href="#onBeforeMount" class="headerlink" title="onBeforeMount()"></a>onBeforeMount()</h2><p>注册一个钩子，在组件被挂载之前被调用。</p><p>当这个钩子被调用时，组件已经完成了其响应式状态的设置，但还没有创建<code>DOM</code>节点。它即将首次执行<code>DOM</code>渲染过程。</p><h2 id="onBeforeUpdate"><a href="#onBeforeUpdate" class="headerlink" title="onBeforeUpdate()"></a>onBeforeUpdate()</h2><p>注册一个钩子，在组件即将因为响应式状态变更而更新其<code>DOM</code>树之前调用。</p><p>这个钩子可以用来在<code>Vue</code>更新<code>DOM</code>之前访问<code>DOM</code>状态。在这个钩子中更改状态也是安全的。</p><h2 id="onBeforeUnmount"><a href="#onBeforeUnmount" class="headerlink" title="onBeforeUnmount()"></a>onBeforeUnmount()</h2><p>注册一个钩子，在组件实例被卸载之前调用。</p><p>当这个钩子被调用时，组件实例依然还保有全部的功能。</p><h2 id="onErrorCaptured"><a href="#onErrorCaptured" class="headerlink" title="onErrorCaptured()"></a>onErrorCaptured()</h2><p>注册一个钩子，在捕获了后代组件传递的错误时调用。</p><p>错误可以从以下几个来源中捕获：</p><ul><li>组件渲染</li><li>事件处理器</li><li>生命周期钩子</li><li><code>setup()</code>函数</li><li>侦听器</li><li>自定义指令钩子</li><li>过渡钩子</li></ul><p>这个钩子带有三个实参：错误对象、触发该错误的组件实例，以及一个说明错误来源类型的信息字符串。</p><p>你可以在<code>errorCaptured()</code>中更改组件状态来为用户显示一个错误状态。注意不要让错误状态再次渲染导致本次错误的内容，否则组件会陷入无线循环。</p><p>这个钩子可以通过返回<code>false</code>来阻止错误继续向上传递。</p><p><strong>错误传递规则</strong></p><ul><li>默认情况下，所有的错误都会被发送到应用级的<code>app.config.errorHandler</code>（前提是这个函数已经被定义），这些错误都能在一个同意的地方报告给分析服务。</li><li>如果组件的继承链或组件链上存在多个<code>errorCaptured</code>钩子，对于同一个错误，这些钩子会被按从底至上的顺序一一调用。这个过程被称为“向上传递”，类似于原生<code>DOM</code>事件的冒泡机制。</li><li>如果<code>errorCaptured</code>钩子本身抛出了一个错误，那么这个错误和原来捕获到的错误都将被发送到<code>app.config.errorHandler</code>。</li><li><code>errorCaptured</code>钩子可以通过返回<code>false</code>来阻止错误继续向上传递。即表示“这个错误已经被处理了，应当被忽略”，它将阻止其他的<code>errorCaptured</code>钩子或<code>app.config.errorHandler</code>因这个错误而被调用。</li></ul><h2 id="onActivated"><a href="#onActivated" class="headerlink" title="onActivated()"></a>onActivated()</h2><p>注册一个对调函数，若组件实例是<code>&lt;keepAlive&gt;</code>缓存树的一部分，当组件被插入到<code>DOM</code>中时调用。</p><h2 id="onDeactivated"><a href="#onDeactivated" class="headerlink" title="onDeactivated()"></a>onDeactivated()</h2><p>注册一个回调函数，若组件实例是<code>&lt;keepAlive&gt;</code>缓存树的一部分，当组件从<code>DOM</code>中被移除时调用。</p><h2 id="onSrverPrefetchSSR-only"><a href="#onSrverPrefetchSSR-only" class="headerlink" title="onSrverPrefetchSSR only"></a>onSrverPrefetch<sup><code>SSR only</code></sup></h2><p>注册一个异步函数，在组件实例在服务器上被渲染之前调用。</p><p>如果这个钩子返回了一个<code>Promise</code>，服务端渲染会在渲染该组件前等待该<code>Promise</code>完成。</p><p>这个钩子仅会在服务端渲染中执行，可以用于执行一些仅存在于服务端的数据抓取过程。</p><h1 id="组合式API：依赖注入"><a href="#组合式API：依赖注入" class="headerlink" title="组合式API：依赖注入"></a>组合式API：依赖注入</h1><h2 id="provide"><a href="#provide" class="headerlink" title="provide()"></a>provide()</h2><p>提供一个值，可以被后代组件注入。</p><p><code>provide()</code>接受两个参数：第一个参数是要注入的<code>key</code>，可以是一个字符串或者一个<code>symbol</code>，第二个参数是要注入的值。</p><p>当使用<code>Typescript</code>时，<code>key</code>可以是一个被类型断言为<code>InjectionKey</code>的<code>symbol</code>。<code>InjectionKey</code>是一个<code>Vue</code>提供的工具类型，继承自<code>Symbol</code>，可以用来同步<code>provide()</code>和<code>inject()</code>之间值的类型。</p><p>与注册生命周期钩子的<code>API</code>类型，<code>provide()</code>必须在组件的<code>setup()</code>阶段同步调用。</p><h2 id="inject"><a href="#inject" class="headerlink" title="inject()"></a>inject()</h2><p>注入一个由祖先组件或整个应用（通过<code>app.provide()</code>）提供的值。</p><p>第一个参数是注入的<code>Key</code>。<code>Vue</code>会遍历父组件链，通过匹配<code>Key</code>来确定所提供的值。如果父组件链上多个组件对同一个<code>Key</code>提供了值，那么离得更近的组件将会“覆盖”链上更远的组件所提供的值。如果没有能通过<code>Key</code>匹配的值，<code>inject()</code>将返回<code>undefined</code>，除非提供了一个默认值。</p><p>第二个参数也可以是一个工厂函数，用来返回某些创建起来比较复杂的值。在这种情况下，你必须将<code>true</code>作为第三个参数传入，表面这个函数将作为工厂函数使用，而非值本身。</p><p>与注册生命周期钩子的<code>API</code>类似，<code>inject()</code>必须在组件的<code>setup()</code>阶段同步调用。</p><p>当使用<code>TypeScript</code>时，<code>Key</code>可以是一个类型为<code>InjectionKey</code>的<code>Symbol</code>。<code>InjectionKey</code>是一个<code>Vue</code>提供的工具类型，继承自<code>Symbol</code>，可以用来同步<code>provide()</code>和<code>inject()</code>之间值的类型。</p><h1 id="组合式API：辅助"><a href="#组合式API：辅助" class="headerlink" title="组合式API：辅助"></a>组合式API：辅助</h1><h2 id="useAttrs"><a href="#useAttrs" class="headerlink" title="useAttrs()"></a>useAttrs()</h2><p>从<code>setup</code>上下文中返回<code>attrs</code>对象，其中包含当前组件的透传<code>attributes</code>。这是用于<code>&lt;script setup&gt;</code>中的，因为在<code>&lt;script setup&gt;</code>中无法获取<code>setup</code>上下文对象。</p><h2 id="useSlots"><a href="#useSlots" class="headerlink" title="useSlots()"></a>useSlots()</h2><p>从<code>setup</code>上下文中返回<code>slots</code>对象，其中包含父组件传递的插槽。这些插槽为可调用的函数，返回虚拟<code>DOM</code>节点。这是用于<code>&lt;script setup&gt;</code>中的，因为在<code>&lt;script setup&gt;</code>中无法获取<code>setup</code>上下文对象。</p><p>如果使用<code>TypeScript</code>，建议优先使用<code>defineSlots()</code>。</p><h2 id="useModel"><a href="#useModel" class="headerlink" title="useModel()"></a>useModel()</h2><p>这是驱动<code>defineModel()</code>的底层辅助函数。如果使用<code>&lt;script setup&gt;</code>，应当优先使用<code>defineModel()</code>。</p><p>仅在<code>3.4+</code>版本中可用。</p><p><code>useModel()</code>可以用于非单文件组件，例如在使用原始的<code>setup()</code>函数时，它预期的第一个参数是<code>props</code>对象，第二个参数是<code>model</code>名称。可选的第三个参数可以用于为生成的<code>model ref</code>声明自定义的<code>getter</code>和<code>setter</code>。请注意，与<code>defineModel()</code>不同，你需要自己声明<code>props</code>和<code>emits</code>。</p><h2 id="useTemplateRef-3-5"><a href="#useTemplateRef-3-5" class="headerlink" title="useTemplateRef()3.5+"></a>useTemplateRef()<sup><code>3.5+</code></sup></h2><p>返回一个浅层<code>ref</code>，其值将与模板中的具有匹配<code>ref attribute</code>的元素或组件同步。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, useTemplateRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inputRef = <span class="title function_">useTemplateRef</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  inputRef.<span class="property">value</span>.<span class="title function_">focus</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="useId"><a href="#useId" class="headerlink" title="useId()"></a>useId()</h2><p>用于为无障碍属性或表单元素生成每个应用内位移的<code>ID</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">:for</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:id</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; useId &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> id = <span class="title function_">useId</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>useId()</code>生成的每个<code>ID</code>在每个应用内都是唯一的。它可以用于为表单元素或无障碍属性生成<code>ID</code>。在同一个组件中多次调用会生成不同的<code>ID</code>；同一个组件的多个实例调用<code>useId()</code>也会生成不同的<code>ID</code>。</p><p><code>useId()</code>生成的<code>ID</code>在服务器端和客户端渲染之间时稳定的，因此可以安全地在<code>SSR</code>应用中使用，不会导致激活不匹配。</p><p>如果同一页面上有多个<code>Vue</code>应用实例，可以通过<code>app.config.idPrefix</code>为每个应用提供一个<code>ID</code>前缀，以避免<code>ID</code>冲突。</p><h1 id="状态选项"><a href="#状态选项" class="headerlink" title="状态选项"></a>状态选项</h1><h2 id="data"><a href="#data" class="headerlink" title="data"></a>data</h2><p>用于声明组件初始响应式状态的函数。</p><p>该函数应当返回一个普通<code>JavaScript</code>对象，<code>Vue</code>会将它转换为响应式对象。实例创建后，可以通过<code>this.$data</code>访问该响应式对象。组件实例也代理了该数据对象上所有的属性，因此<code>this.a</code>等价于<code>this.$data.a</code>。</p><p>所有会用到的顶层数据属性都应该提前在这个对象中声明。虽然理论上可以向<code>this.$data</code>添加新属性，但并不推荐这么做。如果一个属性的值在一开始还获取不到，应当先用<code>undefined</code>或是<code>null</code>值来占位，让<code>Vue</code>知道这个属性是存在的。</p><p>以<code>_</code>或<code>$</code>开头的属性将<strong>不会</strong>被组件实例代理，因为它们可能和<code>Vue</code>的内置属性、<code>API</code>方法冲突。你必须以<code>this.$data._property</code>的方式访问它们。</p><p><strong>不推荐</strong>返回一个可能改变自身状态的对象，如浏览器<code>API</code>原生对象或是带原型的类实例等。理想情况下，返回的对象应是一个纯粹代表组件的普通对象。</p><p>注意，如果你为<code>data</code>属性使用了一个箭头函数，则<code>this</code>将不会指向该组件实例，不过你仍然可以通过该函数的第一个参数来访问实例。</p><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>用于声明一个组件的<code>props</code>。</p><p>在<code>Vue</code>中，所有的组件<code>props</code>都需要被显式声明。组件<code>props</code>可以通过两种方式声明：</p><ul><li>使用字符串数组的简易形式。</li><li>使用对象的完整形式。该对象的每个属性键是对应<code>props</code>的名称，值则是该<code>props</code>应具有的类型的构造函数，或是更高级的选项。</li></ul><p>在基于对象的语法中，每个<code>props</code>可以进一步定义如下选项：</p><ul><li><code>type</code>：可以是下列原生构造函数之一：<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Array</code>、<code>Object</code>、<code>Date</code>、<code>Function</code>、<code>Symbol</code>、任何自定义构造函数，或由上述内容组成的数组。在开发模式中，<code>Vue</code>会检查一个<code>props</code>的值是否匹配其声明的类型，如果不匹配则会抛出警告。</li></ul><p>还要注意，一个<code>Boolean</code>类型的<code>props</code>会影响它在开发或生产模式下的值转换行为。</p><ul><li><code>default</code>：为该<code>props</code>指定一个当其没有被传入或值为<code>undefined</code>时的默认值。对象或数组的默认值必须从一个工厂函数返回。工厂函数也接收原始<code>props</code>对象作为参数。</li><li><code>required</code>：定义该<code>props</code>是否必须传入。在非生产环境中，如果<code>required</code>值为真值且<code>props</code>未被传入，一个控制台警告将会被抛出。</li><li><code>validator</code>：将<code>props</code>值作为唯一参数传入的自定义验证函数。在开发模式下，如果该函数返回一个假值（即验证失败），一个控制台警告将会被抛出。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">height</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">age</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">validator</span>: <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> value &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="computed-1"><a href="#computed-1" class="headerlink" title="computed"></a>computed</h2><p>用于声明要在组件实例上暴露的计算属性。</p><p>该选项接收一个对象，其中键是计算属性的名称，值是一个计算属性<code>getter</code>，或一个具有<code>get</code>和<code>set</code>方法的对象（用于声明可写的计算属性）。</p><p>所有的<code>getters</code>和<code>setters</code>会将它们的<code>this</code>上下文自动绑定为组件实例。</p><p>注意，如果你为一个计算属性使用了箭头函数，则<code>this</code>不会指向该组件实例，不过你仍然可以通过该函数的第一个参数来访问实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">computed</span>(<span class="function"><span class="params">vm</span> =&gt;</span> vm.<span class="property">a</span> * <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h2><p>用于声明要混入到组件实例中的方法。</p><p>声明的方法可以直接通过组件实例访问，或者在模板语法表达式中使用。所有的方法都会将它们的<code>this</code>上下文自动绑定为组件实例，即使在传递时也如此。</p><p>在声明方法时避免使用箭头函数，因为它们不能通过<code>this</code>访问组件实例。</p><h2 id="watch-1"><a href="#watch-1" class="headerlink" title="watch"></a>watch</h2><p>用于声明在数据更改时调用的侦听回调。</p><p><code>watch</code>选项期望接受一个对象，其中键是需要侦听的响应式组件实例属性（例如，通过<code>data</code>或<code>computed</code>声明的属性）——值是相应的回调函数。该回调函数接受被侦听源的新和旧值。</p><p>除了一个根级属性，键名也可以是一个简单的由点分隔的路径。注意，这种用法<strong>不支持</strong>复杂表达式——仅支持由点分隔的路径。如果你需要侦听复杂的数据源，可以使用命令式<code>$watch() API</code>。</p><p>值也可以是一个方法名称的字符串（通过<code>methods</code>声明），或包含额外选项的对象。当使用对象语法时，回调函数应被声明在<code>handler</code>中。额外的选项包含：</p><ul><li><code>immediate</code>：在侦听器创建时立即触发回调。第一次调用时，旧值将为<code>undefined</code>。</li><li><code>deep</code>：如果源时对象或数组，则强制深度遍历源，以便在深度变更时触发回调。</li><li><code>flush</code>：调整回调的刷新时机。</li><li><code>onTrack/onTrigger</code>：调试侦听器的依赖关系。</li></ul><p>声明侦听器回调时避免使用箭头函数，因为它们将无法通过<code>this</code>访问组件实例。</p><h2 id="emits"><a href="#emits" class="headerlink" title="emits"></a>emits</h2><p>用于声明由组件触发的自定义事件。</p><p>可以以两种形式声明触发的事件：</p><ul><li>使用字符串数组的简易形式。</li><li>使用对象的完整形式。该对象的每个属性键是事件的名称，值是<code>null</code>或一个验证函数。</li></ul><p>验证函数会接收到传递给组件的<code>$emit</code>调用的额外参数。</p><p>注意，<code>emits</code>选项会影响一个监听器被解析为组件事件监听器，还是原生<code>DOM</code>事件监听器。被声明为组件事件的监听器不会被透传到组件的根元素上，且将从组件的<code>$attrs</code>对象中移除。</p><h2 id="expose-1"><a href="#expose-1" class="headerlink" title="expose"></a>expose</h2><p>用于声明当组件实例被父组件通过模板引用访问时暴露的公共属性。</p><p>默认情况下，当通过<code>$parent</code>、<code>$root</code>或模板引用访问时，组件实例将向父组件暴露所有的实例属性。这可能不是我们希望看到的，因为组件很可能拥有一些应保持私有的内部状态或方法，以避免紧耦合。</p><p><code>expose</code>选项值应当是一个包含要暴露的属性名称字符串的数组。当使用<code>expose</code>时，只有显式列出的属性将在组件实例上暴露。</p><p><code>expose</code>仅影响用户定义的属性——它不会过滤掉内置的组件实例属性。</p><h1 id="渲染选项"><a href="#渲染选项" class="headerlink" title="渲染选项"></a>渲染选项</h1><h2 id="template"><a href="#template" class="headerlink" title="template"></a>template</h2><p>用于声明组件的字符串模板。</p><p>通过<code>template</code>选项提供的模板将会在运行时即时编译。这仅在使用了包含模板编译器的<code>Vue</code>构建版本的情况下支持。文件名中带有<code>runtime</code>的<code>Vue</code>构建版本<strong>未包含</strong>模板编译器，例如<code>vue.runtime.esm-bundler.js</code>。   </p><p>如果该字符以<code>#</code>开头，它将被用作<code>querySelector</code>的选择器，并使用所选中元素的<code>innerHTML</code>作为模板字符串。这让我们能够使用原生<code>&lt;template&gt;</code>元素来书写源模板。</p><p>如果<code>render</code>选项也同时存在于该组件中，<code>template</code>将被忽略。</p><p>如果应用的根组件不包含任何<code>template</code>或<code>render</code>选项，<code>Vue</code>将会尝试使用所挂载元素的<code>innerHTML</code>来作为模板。</p><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><p>用于编程式地创建组件虚拟<code>DOM</code>树的函数。</p><p><code>render</code>是字符串模板的一种替代，可以使你利用<code>JavaScript</code>的丰富表达力来完全编程式地声明组件最终的渲染输出。</p><p>预编译的模板，例如单文件组件中的模板，会在构建时被编译为<code>render</code>选项。如果一个组件中同时存在<code>render</code>和<code>template</code>，则<code>render</code>将具有更高的优先级。</p><h2 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions"></a>compilerOptions</h2><p>用于配置组件模板的运行时编译器选项。</p><p>这个配置选项仅在使用完整构建版本（即可以在浏览器中编译模板的<code>vue.js</code>文件）时才有效。它支持与应用级的<code>app.config.compilerOptions</code>想通的选项，并针对当前组件有更高的优先级。</p><h2 id="slots"><a href="#slots" class="headerlink" title="slots"></a>slots</h2><p>一个在渲染函数中以编程方式使用插槽时辅助类型推断的选项。</p><p>该选项的运行时值不会被使用。实际类型应通过<code>SlotsType</code>类型辅助工具进行类型转换来声明。</p><h1 id="其他杂项选项"><a href="#其他杂项选项" class="headerlink" title="其他杂项选项"></a>其他杂项选项</h1><h2 id="name"><a href="#name" class="headerlink" title="name"></a>name</h2><p>用于显式声明组件展示时的名称。</p><p>组件的名字有以下用途：</p><ul><li>在组件自己的模板中递归引用自己时</li><li>在<code>Vue</code>开发者工具中的组件树显示时</li><li>在组件抛出的警告追踪栈信息中显示时</li></ul><p>当你在使用单文件组件时，组件已经会根据其文件名推导出其名称。举例来说，一个名为<code>MyComponent.vue</code>的文件会推导出显示名称为<code>MyComponent</code>。</p><p>另一种场景是当一个组件通过<code>app.component</code>被全局注册时，这个全局<code>ID</code>就自动被设为了其名称。</p><p>使用<code>name</code>选项使你可以覆盖推导出的名称，或是在没有推导出名字时显式提供一个。（例如没有使用构建工具时，或是一个内联的非单文件组件）</p><p>有一种场景下<code>name</code>必须是已显式声明的：即<code>&lt;KeepAlive&gt;</code>通过其<code>include/exclude``prop</code>来匹配其需要缓存的组件时。</p><blockquote><p></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios知识点汇总</title>
      <link href="/2024/11/25/%E6%8A%80%E6%9C%AF/JavaScript/axios%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/"/>
      <url>/2024/11/25/%E6%8A%80%E6%9C%AF/JavaScript/axios%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p><code>Axios</code>是一个基于<code>Promise</code>网络请求库，作用于<code>node.js</code>和浏览器中。在服务端使用原生<code>node.js http</code>模块，在浏览器段使用<code>XMLHttpRequest</code>。</p></blockquote><ul><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>超时处理</li><li>查询参数序列化支持嵌套项处理</li><li>自动将请求体序列化为：<ul><li><code>JSON（application/json）</code></li><li><code>Multipart/FormData(multipart/form-data)</code></li><li><code>URL encoded form(application/x-www-form-urlencoded)</code></li></ul></li><li>将<code>HTMLForm</code>转换为<code>JSON</code>进行请求</li><li>自动转换<code>JSON</code>数据</li><li>获取浏览器和<code>node.js</code>的请求进度，并提供额外的信息（速度、剩余时间）</li><li>为<code>node.js</code>设置带宽限制</li><li>兼容符合规范的<code>FormData</code>和<code>Blob</code>（包括<code>node.js</code>）</li><li>客户端支持防御<code>XSRF</code></li></ul><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><ul><li><code>axios.request(config)</code></li><li><code>axiox.get(url[, config])</code></li><li><code>axiox.delete(url[, config])</code></li><li><code>axiox.head(url[, config])</code></li><li><code>axiox.options(url[, config])</code></li><li><code>axiox.post(url[, data[, config]])</code></li><li><code>axiox.put(url[, data[, config]])</code></li><li><code>axiox.patch(url[, data[, config]])</code></li><li><code>axiox.postForm(url[, data[, config]])</code></li><li><code>axiox.putForm(url[, data[, config]])</code></li><li><code>axiox.patchForm(url[, data[, config]])</code></li></ul><h1 id="请求配置"><a href="#请求配置" class="headerlink" title="请求配置"></a>请求配置</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    url<span class="punctuation">:</span> &#x27;/user&#x27;<span class="punctuation">,</span></span><br><span class="line">    method<span class="punctuation">:</span> &#x27;get&#x27;<span class="punctuation">,</span></span><br><span class="line">    baseURL<span class="punctuation">:</span> &#x27;https<span class="punctuation">:</span><span class="comment">//some-domain.com/api/&#x27;,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class="line">    <span class="comment">// 它只能用于 &#x27;PUT&#x27;, &#x27;POST&#x27; 和 &#x27;PATCH&#x27; 这几个请求方法</span></span><br><span class="line">    <span class="comment">// 数组中最后一个函数必须返回一个字符串， 一个Buffer实例，ArrayBuffer，FormData，或 Stream</span></span><br><span class="line">    <span class="comment">// 你可以修改请求头。</span></span><br><span class="line">    transformRequest<span class="punctuation">:</span> <span class="punctuation">[</span>function (data<span class="punctuation">,</span> headers) <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// 对发送的 data 进行任意转换处理</span></span><br><span class="line">        return data;</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class="line">    transformResponse<span class="punctuation">:</span> <span class="punctuation">[</span>function (data) <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// 对接收的 data 进行任意转换处理</span></span><br><span class="line">        return data;</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义请求头</span></span><br><span class="line">    headers<span class="punctuation">:</span> <span class="punctuation">&#123;</span> &#x27;X-Requested-With&#x27;<span class="punctuation">:</span> &#x27;XMLHttpRequest&#x27; <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// `params` 是与请求一起发送的 URL 参数</span></span><br><span class="line">    <span class="comment">// 必须是一个简单对象或 URLSearchParams 对象</span></span><br><span class="line">    params<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        ID<span class="punctuation">:</span> <span class="number">12345</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `paramsSerializer`是可选方法，主要用于序列化`params`</span></span><br><span class="line">    <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class="line">    paramsSerializer<span class="punctuation">:</span> function (params) <span class="punctuation">&#123;</span></span><br><span class="line">        return Qs.stringify(params<span class="punctuation">,</span> <span class="punctuation">&#123;</span> arrayFormat<span class="punctuation">:</span> &#x27;brackets&#x27; <span class="punctuation">&#125;</span>);</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `data` 是作为请求体被发送的数据</span></span><br><span class="line">    <span class="comment">// 仅适用 &#x27;PUT&#x27;, &#x27;POST&#x27;, &#x27;DELETE 和 &#x27;PATCH&#x27; 请求方法</span></span><br><span class="line">    <span class="comment">// 在没有设置 `transformRequest` 时，则必须是以下类型之一:</span></span><br><span class="line">    <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line">    <span class="comment">// - 浏览器专属: FormData, File, Blob</span></span><br><span class="line">    <span class="comment">// - Node 专属: Stream, Buffer</span></span><br><span class="line">    data<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        firstName<span class="punctuation">:</span> &#x27;Fred&#x27;</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送请求体数据的可选语法</span></span><br><span class="line">    <span class="comment">// 请求方式 post</span></span><br><span class="line">    <span class="comment">// 只有 value 会被发送，key 则不会</span></span><br><span class="line">    data<span class="punctuation">:</span> &#x27;Country=Brasil&amp;City=Belo Horizonte&#x27;<span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `timeout` 指定请求超时的毫秒数。</span></span><br><span class="line">    <span class="comment">// 如果请求时间超过 `timeout` 的值，则请求会被中断</span></span><br><span class="line">    timeout<span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span> <span class="comment">// 默认值是 `0` (永不超时)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class="line">    withCredentials<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `adapter` 允许自定义处理请求，这使测试更加容易。</span></span><br><span class="line">    <span class="comment">// 返回一个 promise 并提供一个有效的响应 （参见 lib/adapters/README.md）。</span></span><br><span class="line">    adapter<span class="punctuation">:</span> function (config) <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `auth` HTTP Basic Auth</span></span><br><span class="line">    auth<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        username<span class="punctuation">:</span> &#x27;janedoe&#x27;<span class="punctuation">,</span></span><br><span class="line">        password<span class="punctuation">:</span> &#x27;s00pers3cret&#x27;</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `responseType` 表示浏览器将要响应的数据类型</span></span><br><span class="line">    <span class="comment">// 选项包括: &#x27;arraybuffer&#x27;, &#x27;document&#x27;, &#x27;json&#x27;, &#x27;text&#x27;, &#x27;stream&#x27;</span></span><br><span class="line">    <span class="comment">// 浏览器专属：&#x27;blob&#x27;</span></span><br><span class="line">    responseType<span class="punctuation">:</span> &#x27;json&#x27;<span class="punctuation">,</span> <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `responseEncoding` 表示用于解码响应的编码 (Node.js 专属)</span></span><br><span class="line">    <span class="comment">// 注意：忽略 `responseType` 的值为 &#x27;stream&#x27;，或者是客户端请求</span></span><br><span class="line">    <span class="comment">// Note: Ignored for `responseType` of &#x27;stream&#x27; or client-side requests</span></span><br><span class="line">    responseEncoding<span class="punctuation">:</span> &#x27;utf8&#x27;<span class="punctuation">,</span> <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `xsrfCookieName` 是 xsrf token 的值，被用作 cookie 的名称</span></span><br><span class="line">    xsrfCookieName<span class="punctuation">:</span> &#x27;XSRF-TOKEN&#x27;<span class="punctuation">,</span> <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `xsrfHeaderName` 是带有 xsrf token 值的http 请求头名称</span></span><br><span class="line">    xsrfHeaderName<span class="punctuation">:</span> &#x27;X-XSRF-TOKEN&#x27;<span class="punctuation">,</span> <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class="line">    <span class="comment">// 浏览器专属</span></span><br><span class="line">    onUploadProgress<span class="punctuation">:</span> function (progressEvent) <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// 处理原生进度事件</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class="line">    <span class="comment">// 浏览器专属</span></span><br><span class="line">    onDownloadProgress<span class="punctuation">:</span> function (progressEvent) <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// 处理原生进度事件</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `maxContentLength` 定义了node.js中允许的HTTP响应内容的最大字节数</span></span><br><span class="line">    maxContentLength<span class="punctuation">:</span> <span class="number">2000</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `maxBodyLength`（仅Node）定义允许的http请求内容的最大字节数</span></span><br><span class="line">    maxBodyLength<span class="punctuation">:</span> <span class="number">2000</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `validateStatus` 定义了对于给定的 HTTP状态码是 resolve 还是 reject promise。</span></span><br><span class="line">    <span class="comment">// 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，</span></span><br><span class="line">    <span class="comment">// 则promise 将会 resolved，否则是 rejected。</span></span><br><span class="line">    validateStatus<span class="punctuation">:</span> function (status) <span class="punctuation">&#123;</span></span><br><span class="line">        return status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// 默认值</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `maxRedirects` 定义了在node.js中要遵循的最大重定向数。</span></span><br><span class="line">    <span class="comment">// 如果设置为0，则不会进行重定向</span></span><br><span class="line">    maxRedirects<span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `socketPath` 定义了在node.js中使用的UNIX套接字。</span></span><br><span class="line">    <span class="comment">// e.g. &#x27;/var/run/docker.sock&#x27; 发送请求到 docker 守护进程。</span></span><br><span class="line">    <span class="comment">// 只能指定 `socketPath` 或 `proxy` 。</span></span><br><span class="line">    <span class="comment">// 若都指定，这使用 `socketPath` 。</span></span><br><span class="line">    socketPath<span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">    httpAgent<span class="punctuation">:</span> new http.Agent(<span class="punctuation">&#123;</span> keepAlive<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span>)<span class="punctuation">,</span></span><br><span class="line">    httpsAgent<span class="punctuation">:</span> new https.Agent(<span class="punctuation">&#123;</span> keepAlive<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span>)<span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `proxy` 定义了代理服务器的主机名，端口和协议。</span></span><br><span class="line">    <span class="comment">// 您可以使用常规的`http_proxy` 和 `https_proxy` 环境变量。</span></span><br><span class="line">    <span class="comment">// 使用 `false` 可以禁用代理功能，同时环境变量也会被忽略。</span></span><br><span class="line">    <span class="comment">// `auth`表示应使用HTTP Basic auth连接到代理，并且提供凭据。</span></span><br><span class="line">    <span class="comment">// 这将设置一个 `Proxy-Authorization` 请求头，它会覆盖 `headers` 中已存在的自定义 `Proxy-Authorization` 请求头。</span></span><br><span class="line">    <span class="comment">// 如果代理服务器使用 HTTPS，则必须设置 protocol 为`https`</span></span><br><span class="line">    proxy<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        protocol<span class="punctuation">:</span> &#x27;https&#x27;<span class="punctuation">,</span></span><br><span class="line">        host<span class="punctuation">:</span> &#x27;<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">        port<span class="punctuation">:</span> <span class="number">9000</span><span class="punctuation">,</span></span><br><span class="line">        auth<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            username<span class="punctuation">:</span> &#x27;mikeymike&#x27;<span class="punctuation">,</span></span><br><span class="line">            password<span class="punctuation">:</span> &#x27;rapunz3l&#x27;</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    cancelToken<span class="punctuation">:</span> new CancelToken(function (cancel) <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="punctuation">&#125;</span>)<span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    decompress<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h1><p><strong>全局<code>axios</code>默认值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;https://api.example.com&#x27;</span>;</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="variable constant_">AUTH_TOKEN</span>;</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>自定义实例默认值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建实例时配置默认值</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://api.example.com&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例后修改默认值</span></span><br><span class="line">instance.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="variable constant_">AUTH_TOKEN</span>;</span><br></pre></td></tr></table></figure><p><strong>配置的优先级</strong></p><p>配置将会按优先级进行合并。顺序是：在<code>lib/defaults.js</code>中找到的库默认值，然后是实例的<code>defaults</code>属性，最后是请求的<code>config</code>参数。后面的优先级要高于前面的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用库提供的默认配置创建实例</span></span><br><span class="line"><span class="comment">// 此时超时配置的默认值是 `0`</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写库的超时默认值</span></span><br><span class="line"><span class="comment">// 现在，所有使用此实例的请求都将等待2.5秒，然后才会超时</span></span><br><span class="line">instance.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">2500</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写此请求的超时时间，因为该请求需要很长时间</span></span><br><span class="line">instance.<span class="title function_">get</span>(<span class="string">&#x27;/longRequest&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><p>在请求或响应被<code>then</code>或<code>catch</code>处理前拦截。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 2xx 范围内的状态码都会触发该函数。</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 超出 2xx 范围的状态码都会触发该函数。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>稍后需要移除拦截器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> interceptor = axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">/*...*/</span> &#125;);</span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">eject</span>(interceptor);</span><br></pre></td></tr></table></figure><h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><p>使用<code>validateStatus</code>配置选项，可以自定义抛出错误的<code>HTTP code</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">validateStatus</span>: <span class="keyword">function</span> (<span class="params">status</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> status &lt; <span class="number">500</span>; <span class="comment">// 处理状态码小于500的情况</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用<code>toJSON</code>可以获得更多关于<code>HTTP</code>错误的信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="title function_">toJSON</span>());</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h1 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h1><p><strong><code>AbortController</code></strong></p><p>从<code>v0.22.0</code>开始，<code>Axios</code>支持以<code>fetch API</code>方式——<code>AbortController</code>取消请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/foo/bar&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">signal</span>: controller.<span class="property">signal</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">controller.<span class="title function_">abort</span>();</span><br></pre></td></tr></table></figure><p><strong><code>CancelToken</code> <code>deprecated</code></strong></p><p>可以使用<code>CancelToken.source</code>工厂方法创建一个<code>cancel token</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CancelToken</span> = axios.<span class="property">CancelToken</span>;</span><br><span class="line"><span class="keyword">const</span> source = <span class="title class_">CancelToken</span>.<span class="title function_">source</span>();</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">cancelToken</span>: source.<span class="property">token</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">thrown</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (axios.<span class="title function_">isCancel</span>(thrown)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Request canceled&#x27;</span>, thrown.<span class="property">message</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 处理错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;new name&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">cancelToken</span>: source.<span class="property">token</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消请求（message 参数是可选的）</span></span><br><span class="line">source.<span class="title function_">cancel</span>(<span class="string">&#x27;Operation canceled by the user.&#x27;</span>);</span><br></pre></td></tr></table></figure><p>也可以通过传递一个<code>executor</code>函数到<code>CancelToken</code>的构造函数来创建一个<code>cancel token</code>：</p><blockquote><p>可以使用同一个<code>cancel token</code>或<code>signal</code>取消多个请求。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CancelToken</span> = axios.<span class="property">CancelToken</span>;</span><br><span class="line"><span class="keyword">let</span> cancel;</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">cancelToken</span>: <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="keyword">function</span> <span class="title function_">executor</span> (<span class="params">c</span>) &#123;</span><br><span class="line">        <span class="comment">// executor 函数接收一个 cancel 函数作为参数</span></span><br><span class="line">        cancel = c;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消请求</span></span><br><span class="line"><span class="title function_">cancel</span>();</span><br></pre></td></tr></table></figure><p>在过渡期间，可以使用这两种取消<code>API</code>，即使是针对同一个请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CancelToken</span> = axios.<span class="property">CancelToken</span>;</span><br><span class="line"><span class="keyword">const</span> source = <span class="title class_">CancelToken</span>.<span class="title function_">source</span>();</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">cancelToken</span>: source.<span class="property">token</span>,</span><br><span class="line">    <span class="attr">signal</span>: controller.<span class="property">signal</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">thrown</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (axios.<span class="title function_">isCancel</span>(thrown)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Request canceled&#x27;</span>, thrown.<span class="property">message</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 处理错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;new name&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">cancelToken</span>: source.<span class="property">token</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消请求 (message 参数是可选的)</span></span><br><span class="line">source.<span class="title function_">cancel</span>(<span class="string">&#x27;Operation canceled by the user.&#x27;</span>);</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">controller.<span class="title function_">abort</span>(); <span class="comment">// 不支持 message 参数</span></span><br></pre></td></tr></table></figure><h1 id="请求体编码"><a href="#请求体编码" class="headerlink" title="请求体编码"></a>请求体编码</h1><p>默认情况下，<code>axios</code>将<code>JavaScript</code>对象序列化为<code>JSON</code>。 要以<code>application/x-www-form-urlencoded</code>格式发送数据。</p><p><strong>浏览器</strong></p><p>在浏览器中，可以使用<code>URLSearchParams</code> <code>API</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>();</span><br><span class="line">params.<span class="title function_">append</span>(<span class="string">&#x27;param1&#x27;</span>, <span class="string">&#x27;value1&#x27;</span>);</span><br><span class="line">params.<span class="title function_">append</span>(<span class="string">&#x27;param2&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>);</span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/foo&#x27;</span>, params);</span><br></pre></td></tr></table></figure><p>可以使用<code>qs</code>库编码数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;qs&#x27;</span>);</span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/foo&#x27;</span>, qs.<span class="title function_">stringify</span>(&#123; <span class="string">&#x27;bar&#x27;</span>: <span class="number">123</span> &#125;));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="string">&#x27;bar&#x27;</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123; <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">data</span>: qs.<span class="title function_">stringify</span>(data),</span><br><span class="line">    url,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">axios</span>(options);</span><br></pre></td></tr></table></figure><p><strong>自动序列化</strong></p><p>当请求头中的<code>content-type</code>是<code>application/x-www-form-urlencoded</code>时，<code>Axios</code>将自动地将普通对象序列化成<code>urlencoded</code>的格式。</p><h1 id="Multipart实体请求"><a href="#Multipart实体请求" class="headerlink" title="Multipart实体请求"></a><code>Multipart</code>实体请求</h1><h2 id="使用multipart-form-data类型发起POST请求"><a href="#使用multipart-form-data类型发起POST请求" class="headerlink" title="使用multipart/form-data类型发起POST请求"></a>使用<code>multipart/form-data</code>类型发起<code>POST</code>请求</h2><h3 id="使用FormData-API"><a href="#使用FormData-API" class="headerlink" title="使用FormData API"></a>使用<code>FormData API</code></h3><p><strong>浏览器</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> form = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">form.<span class="title function_">append</span>(<span class="string">&#x27;my_field&#x27;</span>, <span class="string">&#x27;my value&#x27;</span>);</span><br><span class="line">form.<span class="title function_">append</span>(<span class="string">&#x27;my_buffer&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]));</span><br><span class="line">form.<span class="title function_">append</span>(<span class="string">&#x27;my_file&#x27;</span>, fileInput.<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;https://example.com&#x27;</span>, form);</span><br></pre></td></tr></table></figure><p><code>Axios</code>会将传入数据序列化，因此使用<code>Axios</code>提供的<code>API</code>可以无需手动处理<code>FormData</code>的数据并实现一样的效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">postForm</span>(<span class="string">&#x27;https://httpbin.org/post&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">my_field</span>: <span class="string">&#x27;my value&#x27;</span>,</span><br><span class="line">  <span class="attr">my_buffer</span>: <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]),</span><br><span class="line">  <span class="attr">my_file</span>: fileInput.<span class="property">files</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>HTML</code>表单可以直接作为请求内容来进行传输。</p><p><strong><code>Node.js</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> form = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">form.<span class="title function_">append</span>(<span class="string">&#x27;my_field&#x27;</span>, <span class="string">&#x27;my value&#x27;</span>);</span><br><span class="line">form.<span class="title function_">append</span>(<span class="string">&#x27;my_buffer&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="string">&#x27;some content&#x27;</span>]));</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;https://example.com&#x27;</span>, form);</span><br></pre></td></tr></table></figure><p><strong>自动序列化</strong></p><p>从<code>v0.27.0</code>版本开始，当请求头中的<code>Content-Type</code>是<code>multipart/form-data</code>时，<code>Axios</code>支持自动地将普通对象序列化成一个<code>FormData</code>对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;https://httpbin.org/post&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">user</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Dmitriy&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">file</span>: fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;/foo/bar.jpg&#x27;</span>)</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data));</span><br></pre></td></tr></table></figure><p><code>Axios FormData</code>序列化支持一些特殊的结尾，以执行以下操作：</p><ul><li><code>&#123;&#125;</code>-通过<code>JSON.stringify</code>序列化数据</li><li><code>[]</code>-将<code>array-like</code>的对象使用相同的键值来展开为单独的字段</li></ul><blockquote><p>默认情况下，展开、扩展操作将在数组和<code>FileList</code>对象上使用。</p></blockquote><p><code>FormData</code>序列化支持通过<code>config.formSerializer:object</code>这个参数来传递一些额外的选项，以支持一些特殊的情况:</p><ul><li><code>visitor: Function</code>-用户定义的处理函数，将递归调用以安装自定义规则将数据对象序列化为<code>FormData</code>对象</li><li><code>dots :boolean = false</code>-使用点符号而不是括号来序列化数组和对象。</li><li><code>metaTokens: boolean = true</code>-在<code>FormData</code>键值中添加特殊对象。后端的<code>body-parser</code>可能会使用此元信息自动将值解析为<code>JSON</code>。</li><li><code>indexes: null|false|true = false</code>-控制如何添加索引到打平的<code>array-like</code>对象的展开键值中<ul><li><code>null</code>-不添加中括号（<code>arr: 1,arr: 2,arr: 3</code>）</li><li><code>false</code>（默认值）-添加空中括号（<code>arr[]: 1,arr[]: 2,arr[]: 3</code>）</li><li><code>true</code>-添加带有索引的中括号（<code>arr[0]: 1,arr[1]: 2,arr[2]: 3</code>）</li></ul></li></ul><p><code>Axios</code>支持一下别名方法：<code>postForm</code>，<code>putForm</code>，<code>patchForm</code>，这些方法只是对应的<code>HTTP</code>方法，其<code>content-type</code>头部默认设为<code>multipart/form-data</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PixiJS学习笔记</title>
      <link href="/2024/11/07/%E6%8A%80%E6%9C%AF/JavaScript/PixiJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/11/07/%E6%8A%80%E6%9C%AF/JavaScript/PixiJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>Pixi</code>-<code>2D sprite</code>渲染引擎。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JS库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML字符实体</title>
      <link href="/2024/10/26/%E6%8A%80%E6%9C%AF/HTML/HTML%E5%AD%97%E7%AC%A6%E5%AE%9E%E4%BD%93/"/>
      <url>/2024/10/26/%E6%8A%80%E6%9C%AF/HTML/HTML%E5%AD%97%E7%AC%A6%E5%AE%9E%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML特殊字符"><a href="#HTML特殊字符" class="headerlink" title="HTML特殊字符"></a>HTML特殊字符</h1><table><thead><tr><th align="center">HTML</th><th align="center">Symbol</th><th align="center">Numeric</th><th>描述</th><th align="center">Hex</th><th align="center">CSS(ISO)</th><th align="center">JS(Octal)</th></tr></thead><tbody><tr><td align="center"><code>&amp;quot;</code></td><td align="center"><code>&quot;</code></td><td align="center"><code>&amp;#34;</code></td><td>引号</td><td align="center"><code>u+0022</code></td><td align="center"><code>\0022</code></td><td align="center"><code>\42</code></td></tr><tr><td align="center"><code>&amp;num;</code></td><td align="center"><code>#</code></td><td align="center"><code>&amp;#35;</code></td><td>数字符号</td><td align="center"><code>u+0023</code></td><td align="center"><code>\0023</code></td><td align="center"><code>\43</code></td></tr><tr><td align="center"><code>&amp;dollar;</code></td><td align="center"><code>$</code></td><td align="center"><code>&amp;#36;</code></td><td>美元符号</td><td align="center"><code>u+0024</code></td><td align="center"><code>\0024</code></td><td align="center"><code>\44</code></td></tr><tr><td align="center"><code>&amp;percnt;</code></td><td align="center"><code>%</code></td><td align="center"><code>&amp;#37;</code></td><td>百分号</td><td align="center"><code>u+0025</code></td><td align="center"><code>\0025</code></td><td align="center"><code>\45</code></td></tr><tr><td align="center"><code>&amp;amp;</code></td><td align="center"><code>&amp;</code></td><td align="center"><code>&amp;#38;</code></td><td>和号</td><td align="center"><code>u+0026</code></td><td align="center"><code>\0026</code></td><td align="center"><code>\46</code></td></tr><tr><td align="center"><code>&amp;apos;</code></td><td align="center"><code>&#39;</code></td><td align="center"><code>&amp;#39;</code></td><td>撇号</td><td align="center"><code>u+0027</code></td><td align="center"><code>\0027</code></td><td align="center"><code>\47</code></td></tr><tr><td align="center"><code>&amp;lpar;</code></td><td align="center"><code>(</code></td><td align="center"><code>&amp;#40;</code></td><td>左括号</td><td align="center"><code>u+0028</code></td><td align="center"><code>\0028</code></td><td align="center"><code>\50</code></td></tr><tr><td align="center"><code>&amp;rpar;</code></td><td align="center"><code>)</code></td><td align="center"><code>&amp;#41;</code></td><td>右括号</td><td align="center"><code>u+0029</code></td><td align="center"><code>\0029</code></td><td align="center"><code>\51</code></td></tr><tr><td align="center"><code>&amp;ast;</code></td><td align="center"><code>*</code></td><td align="center"><code>&amp;#42;</code></td><td>星号</td><td align="center"><code>u+002A</code></td><td align="center"><code>\002a</code></td><td align="center"><code>\52</code></td></tr><tr><td align="center"><code>&amp;plus;</code></td><td align="center"><code>+</code></td><td align="center"><code>&amp;#43;</code></td><td>加号</td><td align="center"><code>u+002B</code></td><td align="center"><code>\002b</code></td><td align="center"><code>\53</code></td></tr><tr><td align="center"><code>&amp;comma;</code></td><td align="center"><code>,</code></td><td align="center"><code>&amp;#44;</code></td><td>逗号</td><td align="center"><code>u+002C</code></td><td align="center"><code>\002c</code></td><td align="center"><code>\54</code></td></tr><tr><td align="center"><code>&amp;minus;</code></td><td align="center"><code>-</code></td><td align="center"><code>&amp;#45;</code></td><td>连字符减号</td><td align="center"><code>u+002D</code></td><td align="center"><code>\002d</code></td><td align="center"><code>\55</code></td></tr><tr><td align="center"><code>&amp;period;</code></td><td align="center"><code>.</code></td><td align="center"><code>&amp;#46;</code></td><td>句号</td><td align="center"><code>u+002E</code></td><td align="center"><code>\002e</code></td><td align="center"><code>\56</code></td></tr><tr><td align="center"><code>&amp;sol;</code></td><td align="center"><code>/</code></td><td align="center"><code>&amp;#47;</code></td><td>固相线</td><td align="center"><code>u+002F</code></td><td align="center"><code>\002f</code></td><td align="center"><code>\57</code></td></tr><tr><td align="center"><code>&amp;colon;</code></td><td align="center"><code>:</code></td><td align="center"><code>&amp;#58;</code></td><td>固相线</td><td align="center"><code>u+003A</code></td><td align="center"><code>\003a</code></td><td align="center"><code>\72</code></td></tr><tr><td align="center"><code>&amp;semi;</code></td><td align="center"><code>;</code></td><td align="center"><code>&amp;#59;</code></td><td>分号</td><td align="center"><code>u+003B</code></td><td align="center"><code>\003b</code></td><td align="center"><code>\73</code></td></tr><tr><td align="center"><code>&amp;lt;</code></td><td align="center"><code>&lt;</code></td><td align="center"><code>&amp;#60;</code></td><td>少于</td><td align="center"><code>u+003C</code></td><td align="center"><code>\003c</code></td><td align="center"><code>\74</code></td></tr><tr><td align="center"><code>&amp;equals;</code></td><td align="center"><code>=</code></td><td align="center"><code>&amp;#61;</code></td><td>等于</td><td align="center"><code>u+003D</code></td><td align="center"><code>\003d</code></td><td align="center"><code>\75</code></td></tr><tr><td align="center"><code>&amp;gt;</code></td><td align="center"><code>&gt;</code></td><td align="center"><code>&amp;#62;</code></td><td>大于</td><td align="center"><code>u+003E</code></td><td align="center"><code>\003e</code></td><td align="center"><code>\76</code></td></tr><tr><td align="center"><code>&amp;quest;</code></td><td align="center"><code>?</code></td><td align="center"><code>&amp;#63;</code></td><td>问号</td><td align="center"><code>u+003F</code></td><td align="center"><code>\003f</code></td><td align="center"><code>\77</code></td></tr><tr><td align="center"><code>&amp;commat;</code></td><td align="center"><code>@</code></td><td align="center"><code>&amp;#64;</code></td><td>在标志处</td><td align="center"><code>u+0040</code></td><td align="center"><code>\0040</code></td><td align="center"><code>\100</code></td></tr><tr><td align="center"><code>&amp;lsqb;</code></td><td align="center"><code>[</code></td><td align="center"><code>&amp;#91;</code></td><td>左方括号</td><td align="center"><code>u+005B</code></td><td align="center"><code>\005b</code></td><td align="center"><code>\133</code></td></tr><tr><td align="center"><code>&amp;bsol;</code></td><td align="center"><code>\</code></td><td align="center"><code>&amp;#92;</code></td><td>反斜杠</td><td align="center"><code>u+005C</code></td><td align="center"><code>\005c</code></td><td align="center"><code>\134</code></td></tr><tr><td align="center"><code>&amp;rsqb;</code></td><td align="center"><code>]</code></td><td align="center"><code>&amp;#93;</code></td><td>右方括号</td><td align="center"><code>u+005D</code></td><td align="center"><code>\005d</code></td><td align="center"><code>\135</code></td></tr><tr><td align="center"><code>&amp;Hat;</code></td><td align="center"><code>^</code></td><td align="center"><code>&amp;#94;</code></td><td>抑扬顿挫</td><td align="center"><code>u+005E</code></td><td align="center"><code>\005e</code></td><td align="center"><code>\136</code></td></tr><tr><td align="center"><code>&amp;lowbar;</code></td><td align="center"><code>_</code></td><td align="center"><code>&amp;#95;</code></td><td>低线</td><td align="center"><code>u+005F</code></td><td align="center"><code>\005f</code></td><td align="center"><code>\137</code></td></tr><tr><td align="center"><code>&amp;lcub;</code></td><td align="center"><code>&#123;</code></td><td align="center"><code>&amp;#123;</code></td><td>左大括号</td><td align="center"><code>u+007b</code></td><td align="center"><code>\007b</code></td><td align="center"><code>\173</code></td></tr><tr><td align="center"><code>&amp;verbar;</code></td><td align="center"><code>|</code></td><td align="center"><code>&amp;#124;</code></td><td>竖线</td><td align="center"><code>u+007c</code></td><td align="center"><code>\007c</code></td><td align="center"><code>\174</code></td></tr><tr><td align="center"><code>&amp;rcub;</code></td><td align="center"><code>&#125;</code></td><td align="center"><code>&amp;#125;</code></td><td>右大括号</td><td align="center"><code>u+007d</code></td><td align="center"><code>\007d</code></td><td align="center"><code>\175</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
            <tag> 字符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ADB命令集合</title>
      <link href="/2024/10/24/%E6%8A%80%E6%9C%AF/Android/ADB%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/"/>
      <url>/2024/10/24/%E6%8A%80%E6%9C%AF/Android/ADB%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="设备基础"><a href="#设备基础" class="headerlink" title="设备基础"></a>设备基础</h1><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>adb devices</code></td><td>列出已连接设备</td></tr><tr><td><code>adb devices -l</code></td><td>列出已连接设备和种类</td></tr><tr><td><code>adb connect/disconnect [ip:port]</code></td><td>连接到指定<code>IP</code>和端口的设备&#x2F;断开连接</td></tr><tr><td><code>adb root</code></td><td>以<code>root</code>权限重新启动<code>adb</code></td></tr><tr><td><code>adb remount</code></td><td>重新挂载具有读&#x2F;写访问权限的文件系统</td></tr><tr><td><code>adb start-server</code></td><td>启动<code>adb</code>服务</td></tr><tr><td><code>adb kill-server</code></td><td>停止<code>adb</code>服务</td></tr><tr><td><code>adb reboot</code></td><td>重启设备</td></tr><tr><td><code>adb reboot bootloader</code></td><td>将设备重启到<code>fastboot</code>模式</td></tr><tr><td><code>adb reboot recovery</code></td><td>将设备重启到恢复模式</td></tr><tr><td><code>adb disable-verify</code></td><td>禁用设备的<code>dm-verity</code>安全特性</td></tr></tbody></table><h1 id="logcat"><a href="#logcat" class="headerlink" title="logcat"></a>logcat</h1><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>adb logcat</code></td><td>将日志消息打印到标准输出</td></tr><tr><td><code>adb logcat -g</code></td><td>显示当前日志缓冲大小</td></tr><tr><td><code>adb logcat -G &lt;size&gt;</code></td><td>设置缓冲区大小（<code>K</code>或<code>M</code>）</td></tr><tr><td><code>adb logcat -c</code></td><td>清除日志缓冲区</td></tr><tr><td><code>adb logcat *:V</code></td><td>启用所有日志消息（详细）</td></tr><tr><td><code>adb logcat *:W</code></td><td>显示优先级不低于<strong>警告</strong>的所有标记的所有日志消息</td></tr><tr><td><code>adb logcat -f &lt;filename&gt;</code></td><td>将日志转储到指定文件</td></tr></tbody></table><h1 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h1><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>adb push &lt;local&gt; &lt;remote&gt;</code></td><td>将本地文件复制到远程设备</td></tr><tr><td><code>adb pull &lt;remote&gt; &lt;local&gt;</code></td><td>将远程设备文件复制到本地</td></tr></tbody></table><h1 id="远程shell"><a href="#远程shell" class="headerlink" title="远程shell"></a>远程shell</h1><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>adb shell &lt;command&gt;</code></td><td>在设备上运行指定的命令</td></tr><tr><td><code>adb shell wm size</code></td><td>显示当前屏幕分辨率</td></tr><tr><td><code>adb shell wm size WxH</code></td><td>将分辨率设置为<code>WxH</code></td></tr><tr><td><code>adb shell pm list packages</code></td><td>列出所有已安装的应用包</td></tr><tr><td><code>adb shell pm list packages -3</code></td><td>列出所有已安装的第三方的应用包</td></tr><tr><td><code>adb shell monkey -p app.package.name &lt;count&gt;</code></td><td>启动指定包名的应用程序，并执行测试</td></tr><tr><td><code>adb shell ls</code></td><td>列出目录内容</td></tr><tr><td><code>adb shell ls -s</code></td><td>每个文件的打印尺寸</td></tr><tr><td><code>adb shell ls -R</code></td><td>递归列出子目录</td></tr></tbody></table><h1 id="包安装"><a href="#包安装" class="headerlink" title="包安装"></a>包安装</h1><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>adb install &lt;apk&gt;</code></td><td>安装应用程序</td></tr><tr><td><code>adb install &lt;path&gt;</code></td><td>从手机路径安装应用</td></tr><tr><td><code>adb install -r &lt;path&gt;</code></td><td>从手机路径安装应用（允许覆盖安装）</td></tr><tr><td><code>adb uninstall &lt;name&gt;</code></td><td>卸载应用程序</td></tr></tbody></table><h1 id="包信息"><a href="#包信息" class="headerlink" title="包信息"></a>包信息</h1><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>adb shell pm list packages</code></td><td>列出包名称</td></tr><tr><td><code>adb shell pm list packages -f</code></td><td>列出包+<code>apks</code>的路径</td></tr><tr><td><code>adb shell pm list packages -3</code></td><td>列出第三方包名称</td></tr><tr><td><code>adb shell pm list packages -s</code></td><td>仅列出系统包</td></tr><tr><td><code>adb shell pm list packages -u</code></td><td>列出包和未安装包</td></tr><tr><td><code>adb shell pm list packages -i</code></td><td>列出包名称+安装来源</td></tr><tr><td><code>adb shell pm list packages -e</code></td><td>列出启用的包</td></tr><tr><td><code>adb shell pm list packages -d</code></td><td>列出禁用的包</td></tr><tr><td><code>adb shell dumpsys package packages</code></td><td>列出所有应用程序的信息</td></tr><tr><td><code>adb shell dumpsys package &lt;name&gt;</code></td><td>列出一个包的信息</td></tr><tr><td><code>adb shell pm path &lt;package&gt;</code></td><td>列出<code>APK</code>文件的路径</td></tr></tbody></table><h1 id="手机信息"><a href="#手机信息" class="headerlink" title="手机信息"></a>手机信息</h1><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>adb get-state</code></td><td>打印设备状态</td></tr><tr><td><code>adb get-serialno</code></td><td>获取设备的序列号</td></tr><tr><td><code>adb shell dumpsys iphonesybinfo</code></td><td>获取设备的<code>IMEI</code>信息</td></tr><tr><td><code>adb shell netstat</code></td><td>列出设备上的所有<code>TCP</code>连接</td></tr><tr><td><code>adb shell pwd</code></td><td>打印当前工作目录</td></tr><tr><td><code>adb shell dumpsys dattery</code></td><td>获取设备电池状态</td></tr><tr><td><code>adb shell pm list features</code></td><td>列出设备支持的所有功能</td></tr><tr><td><code>adb shell service list</code></td><td>列出设备上运行的所有服务</td></tr><tr><td><code>adb shell dumpsys activity &lt;package&gt;/&lt;activity&gt;</code></td><td>获取指定包和活动的信息</td></tr><tr><td><code>adb shell ps</code></td><td>打印设备上所有运行的进程状态</td></tr><tr><td><code>adb shell wm size</code></td><td>显示当前设备的屏幕分辨率</td></tr></tbody></table><h1 id="设备相关"><a href="#设备相关" class="headerlink" title="设备相关"></a>设备相关</h1><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>adb reboot recovery</code></td><td>重启设备进入恢复模式</td></tr><tr><td><code>adb reboot fastboot</code></td><td>重启设备进入恢复模式</td></tr><tr><td><code>adb reboot screencap -p &quot;/path/to/screenshot.png&quot;</code></td><td>截图</td></tr><tr><td><code>adb reboot screenrecord &quot;/path/to/record.mp4&quot;</code></td><td>录制设备屏幕</td></tr><tr><td><code>adb backup -apk -all -f backup.ab</code></td><td>备份设置和应用程序</td></tr><tr><td><code>adb backup -apk -shared -all -f backup.ab</code></td><td>备份设置、应用程序和共享存储</td></tr><tr><td><code>adb backup -apk -nosystem -all -f backup.ab</code></td><td>仅备份非系统应用程序</td></tr><tr><td><code>adb restore backup.ab</code></td><td>恢复以前的备份</td></tr><tr><td><code>adb shell am start -a android.intent.action.VIEW -d URL</code></td><td>打开网址</td></tr><tr><td><code>adb shell am start -t image/* -a android.intent.action.VIEW</code></td><td>打开画廊</td></tr></tbody></table><h1 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h1><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>adb shell permissions groups</code></td><td>列出所有已定义的权限组</td></tr><tr><td><code>adb shell list permissions -g -r</code></td><td>列出所有权限的详细信息</td></tr></tbody></table><h1 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h1><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>adb logcat [options][filter][filter]</code></td><td>查看设备日志</td></tr><tr><td><code>adb bugreport</code></td><td>打印错误报告</td></tr></tbody></table><h1 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h1><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>adb push example.apk /sdcard/Download/</code></td><td>将文件推送到<code>Android</code>设备的下载文件夹</td></tr><tr><td><code>adb install example.apk</code></td><td>从主机安装<code>APK</code>到<code>Android</code>设备</td></tr><tr><td><code>adb shell settings put global http_proxy :0</code></td><td>禁用网络代理</td></tr><tr><td><code>adb shell pm list packages -f</code></td><td>列出所有已安装的包并获取完整路径</td></tr><tr><td><code>adb install /sdcard/Download/example.apk</code></td><td>从<code>Android</code>设备存储安装<code>APK</code></td></tr><tr><td><code>adb devices</code><br/><code>adb -s 7f1c864e shell</code></td><td>显示连接的设备并指定一个设备进行<code>shell</code></td></tr><tr><td><code>adb install /Users/dev/projects/myapp.apk</code></td><td>将计算机上的<code>APK</code>文件安装到设备</td></tr><tr><td><code>adb shell pm list packages | grep app_name</code></td><td>通过名称查找应用的包名</td></tr><tr><td><code>adb push path/to/local/file /sdcard/foo.txt</code></td><td>将文件从计算机复制到设备</td></tr><tr><td><code>adb shell input text &quot;Hello World&quot;</code></td><td>使用虚拟键盘发送文本</td></tr><tr><td><code>adb shell input tap x y</code></td><td>点击屏幕发送点击</td></tr><tr><td><code>adb pull /sdcard/Download/example.apk</code></td><td>从安卓设备中提取文件</td></tr><tr><td><code>adb shell settings put global http_proxy &lt;address&gt;:&lt;port&gt;</code></td><td>设置网络代理</td></tr><tr><td><code>adb connect 192.168.56.101:5555</code></td><td>通过<code>IP</code>地址连接到设备</td></tr><tr><td><code>adb shell pm path com.example.myapp</code></td><td>查找应用的<code>APK</code>路径</td></tr><tr><td><code>adb shell pm path com.example.myapp</code></td><td>从设备提取<code>APK</code>到计算机</td></tr><tr><td><code>adb shell input swipe 300 300 500 1000</code></td><td>滚动屏幕</td></tr><tr><td><code>adb shell input keyevent 66</code></td><td>发送按键事件</td></tr><tr><td><code>adb shell &#39;logcat --pid=$(pidof -s &lt;package_name&gt;)&#39;</code></td><td>查看包的日志</td></tr><tr><td><code>adb devices</code><br/><code>adb shell ifconfig</code><br/><code>adb tcpip 5555</code><br/><code>adb connect 192.168.1.4:5555</code></td><td>记下<code>inet addr</code>后的<code>IP</code>地址。<br/>断开<code>USB</code>线缆</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> ADB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发文档</title>
      <link href="/2024/06/29/%E6%8A%80%E6%9C%AF/%E6%96%87%E6%A1%A3/%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/"/>
      <url>/2024/06/29/%E6%8A%80%E6%9C%AF/%E6%96%87%E6%A1%A3/%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><ol><li><a href="https://wangdoc.com/">网道 &#x2F; WangDoc.com</a></li><li><a href="https://zh.javascript.info/">现代 JavaScript 教程 &#x2F; JAVASCRIPT.INFO</a></li><li><a href="https://services.gradle.org/distributions/">Gradle&#x2F;distributions</a></li><li><a href="https://webpack.docschina.org/">Webpack 5 文档</a></li><li><a href="http://jessibuca.monibuca.com/">Jessibuca 纯H5低延迟直播流播放器</a></li><li><a href="https://webrtc.github.io/samples/">WebRTC samples</a></li></ol><h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><ol><li><a href="https://react.docschina.org/">React-用于构建 Web 和原生交互界面的库-1</a></li><li><a href="https://zh-hans.react.dev/">React-用于构建 Web 和原生交互界面的库-2</a></li><li><a href="https://reactnative.dev/">React Native-Learn once, write anywhere.</a></li><li><a href="https://awesomereact.com/">AWESOME REACT</a></li><li><a href="https://3x.ant.design/docs/react/introduce-cn">Ant Design of React</a></li></ol><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><ol><li><a href="https://vuejobs.com/">VueJobs</a></li><li><a href="https://next.awesome-vue.js.org/">Awesome Vue.js</a></li><li><a href="https://pinia.vuejs.org/zh/">Pinia-符合直觉的 Vue.js 状态管理库，类型安全、可扩展性以及模块化设计。</a></li><li><a href="https://www.nuxtjs.cn/">NuxtJS：使用简便的 Vue 框架</a></li><li><a href="https://wangchujiang.com/reference/docs/vue.html">Vue 3 备忘清单</a></li><li>[Vue 2 备忘清单](Vue 2 备忘清单)</li><li><a href="https://www.iviewui.com/">View Design</a></li><li><a href="https://vue3.chengpeiquan.com/">Vue3 入门指南与实战案例</a></li></ol><h1 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h1><ol><li><a href="https://nest.nodejs.cn/">NestJS 中文网</a></li><li><a href="https://express.nodejs.cn/">Express 中文网-快速、独立、极简的 Node.js Web 框架。</a></li></ol><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><ol><li><a href="https://umijs.org/">UmiJS-企业级前端开发框架-用Umi构建你的下一个React&#x2F;Vue&#x2F;PC&#x2F;Mobile&#x2F;SPA&#x2F;SSR&#x2F;CSR&#x2F;中后台应用</a></li><li><a href="https://vitejs.cn/">Vite中文网-下一代前端开发与构建工具</a></li><li><a href="https://vitejs.cn/vite3-cn/">Vite 官方中文文档</a></li></ol><h1 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h1><ol><li><a href="https://blog.csdn.net/wuyutaoktm/article/details/132064524">在AndroidStudio中如何查看Gradle的版本</a></li><li><a href="https://developer.android.google.cn/build/releases/gradle-plugin?hl=zh-cn">Android Gradle 插件 8.4 版本说明</a></li><li>C<a href="https://blog.micblo.com/2020/02/21/Chromium-%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E6%8E%A5%E5%8F%A3-SpeechSynthesis-%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90/#google_vignette">hromium 语音合成接口 SpeechSynthesis 实现分析</a></li></ol><h1 id="GITHUB"><a href="#GITHUB" class="headerlink" title="GITHUB"></a>GITHUB</h1><ol><li><a href="https://github.com/bradtraversy/50projects50days">50projects50days</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> 文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vite开发配置</title>
      <link href="/2024/06/10/%E6%8A%80%E6%9C%AF/Vite/Vite%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/06/10/%E6%8A%80%E6%9C%AF/Vite/Vite%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-webrtc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite --host&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview --host&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;element-plus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.7.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pinia&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.1.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.4.21&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue-router&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.3.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@vitejs/plugin-basic-ssl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vitejs/plugin-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;less&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;unplugin-auto-import&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.17.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;unplugin-vue-components&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.26.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.2.8&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="vite-config-js"><a href="#vite-config-js" class="headerlink" title="vite.config.js"></a>vite.config.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fileURLToPath, <span class="variable constant_">URL</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;node:url&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> basicSSL <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-basic-ssl&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">base</span>: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title function_">basicSSL</span>()</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./src&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">    <span class="attr">https</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="nginx-config"><a href="#nginx-config" class="headerlink" title="nginx config"></a>nginx config</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">1443</span> ssl;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_certificate</span>  C:/SmartTerminal/nginx-<span class="number">1</span>.<span class="number">17</span>.<span class="number">4</span>/ssl/server.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> C:/SmartTerminal/nginx-<span class="number">1</span>.<span class="number">17</span>.<span class="number">4</span>/ssl/server.key;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span> SSLv2 SSLv3;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> <span class="string">&quot;ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4&quot;</span>;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_verify_client</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#location / &#123;</span></span><br><span class="line">    <span class="comment">#    root C:/SmartTerminal/terminal/webrtc-dev/dist;</span></span><br><span class="line">    <span class="comment">#    try_files $uri $uri/ /index.html;</span></span><br><span class="line">    <span class="comment">#&#125; </span></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> https://192.168.66.199:5173; </span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&#x27;upgrade&#x27;</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_cache_bypass</span> <span class="variable">$http_upgrade</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /terminal &#123;        </span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8080;      <span class="comment"># 转发</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real_IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$remote_addr</span>:<span class="variable">$remote_port</span>;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;   <span class="comment"># 升级协议头 websocket</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection upgrade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="public-config-js"><a href="#public-config-js" class="headerlink" title="public&#x2F;config.js"></a>public&#x2F;config.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">g</span> = &#123;</span><br><span class="line">  <span class="attr">websocketUrl</span>: <span class="string">&quot;wss://192.168.66.199:1443/terminal?code=&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="src-assets-js-comlib-js"><a href="#src-assets-js-comlib-js" class="headerlink" title="src&#x2F;assets&#x2F;js&#x2F;comlib.js"></a>src&#x2F;assets&#x2F;js&#x2F;comlib.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">g</span> = &#123;</span><br><span class="line">  <span class="attr">websocketUrl</span>: <span class="string">&quot;wss://192.168.66.199:1443/terminal?code=&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js开发库</title>
      <link href="/2024/04/06/%E6%8A%80%E6%9C%AF/Node/Nodejs%E5%BC%80%E5%8F%91%E5%BA%93/"/>
      <url>/2024/04/06/%E6%8A%80%E6%9C%AF/Node/Nodejs%E5%BC%80%E5%8F%91%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h3 id="Sequelize"><a href="#Sequelize" class="headerlink" title="Sequelize"></a>Sequelize</h3><p><code>Sequelize</code>是一个基于<code>Promise</code>的<code>Node.js</code>对象关系映射器（<code>ORM</code>），支持<code>PostgreSQL</code>、<code>MySQL</code>、<code>SQLite</code>等。</p><p><code>Sequelize</code>使用<code>JavaScript</code>对象对数据库表的结构进行建模，并连接到常用的关系数据库进行查询和更改数据，解析检索到的数据并将其作为<code>JavaScript</code>对象返回。</p><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>使用<code>Connect/Express</code>作为中间件提供跨域资源共享。<code>CORS</code>包装了<code>Node.js</code>路由中间件，它接受多个参数来指定跨域选项，如<code>origin</code>、<code>header</code>等。</p><h3 id="Nodemailer"><a href="#Nodemailer" class="headerlink" title="Nodemailer"></a>Nodemailer</h3><p><code>Nodemailer</code>简化了从<code>Node.js</code>服务器发送的电子邮件。它使用一个传输对象，该对象基于简单邮件传输协议（<code>SMTP</code>）。创建消息时，此传输对象接受<code>from</code>、<code>to</code>、<code>subject</code>、<code>body</code>和其他参数作为输入。</p><h3 id="Passport"><a href="#Passport" class="headerlink" title="Passport"></a>Passport</h3><p><code>Passport</code>是一个模块化的<code>Node.js</code>身份验证中间件。支持超过<code>500</code>种身份验证方案，普通用户名和密码登录、通过<code>OAuth</code>进行的社交网站委托身份验证，以及用于联合身份验证的<code>OpenID</code>都是可选。</p><h3 id="Async"><a href="#Async" class="headerlink" title="Async"></a>Async</h3><p><code>Async</code>是一个基于<code>Promise</code>的使用回调方法来处理异步事件的工具模块。</p><h3 id="WinsTon"><a href="#WinsTon" class="headerlink" title="WinsTon"></a>WinsTon</h3><p><code>Winston</code>是<code>Node.js</code>的日志包，允许在许多传输上进行通用日志记录。</p><h3 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose"></a>Mongoose</h3><p><code>Mongoose</code>是一款基于<code>Node.js</code>的<code>MongoDB</code>对象建模工具，通常被称为对象数据建模<code>ODM</code>库。</p><h3 id="Socket-IO"><a href="#Socket-IO" class="headerlink" title="Socket.IO"></a>Socket.IO</h3><p>通过<code>HTTP</code>长轮询使用数字握手在服务器和客户端之间建立低级连接，通过<code>TCP</code>实时进行通信。</p><h3 id="Lodash"><a href="#Lodash" class="headerlink" title="Lodash"></a>Lodash</h3><h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><p><code>Axios</code>是一个运行在<code>Node.js</code>和浏览器的基于<code>Promise</code>的<code>HTTP</code>客户端。</p><p>根据需要管理浏览器或<code>Node.js</code>请求和响应数据的转换。<code>Axios</code>是同构的，它可以使用相同的代码库在服务器和客户端上运行。</p><p><code>Axios</code>在服务器端使用本机<code>HTTP</code>模块，在客户端使用<code>XMLHttpRequest</code>进行<code>HTTP</code>通信。</p><h3 id="Puppeteer"><a href="#Puppeteer" class="headerlink" title="Puppeteer"></a>Puppeteer</h3><p><code>Puppeteer</code>是一个<code>Node.js</code>框架，通过<code>DevTools</code>协议提供用于控制<code>Chrome/Chromium</code>的高级<code>API</code>来自动化<code>Chrome</code>。</p><h3 id="Multer"><a href="#Multer" class="headerlink" title="Multer"></a>Multer</h3><p><code>Multer</code>是一个<code>Node.js</code>中间件库，基于<code>HTML</code>表单解析器<code>Busboy</code>构建，支持多部分和多形式数据。</p><h3 id="Dotenv"><a href="#Dotenv" class="headerlink" title="Dotenv"></a>Dotenv</h3><p>用于维护应用程序环境变量并保护关键配置数据。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>踏春</title>
      <link href="/2024/04/01/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E8%B8%8F%E6%98%A5/"/>
      <url>/2024/04/01/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E8%B8%8F%E6%98%A5/</url>
      
        <content type="html"><![CDATA[<p>踏春<br>作者：吴华锦<br>一泓江水抱春光，两树梨花照海棠。<br>细雨狎狎生无赖，芳草离离没斜阳。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目总集</title>
      <link href="/2023/06/06/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE/%E9%A1%B9%E7%9B%AE%E6%80%BB%E9%9B%86/"/>
      <url>/2023/06/06/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE/%E9%A1%B9%E7%9B%AE%E6%80%BB%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h3 id="公司项目"><a href="#公司项目" class="headerlink" title="公司项目"></a>公司项目</h3><ol><li><a href="https://whjin.github.io/docs/">项目总集</a></li></ol><h3 id="个人项目"><a href="#个人项目" class="headerlink" title="个人项目"></a>个人项目</h3><ol><li><a href="https://github.com/whjin/canvas-utils">canvas-utils</a></li><li><a href="https://github.com/whjin/react-gadget">react-gadget</a></li><li><a href="https://github.com/whjin/node-tbuys">node-tbuys</a></li><li><a href="https://github.com/whjin/docs">docs</a></li><li><a href="https://github.com/whjin/smart_flutter_app">smart_flutter_app</a><span id="more"></span></li><li><a href="https://github.com/whjin/vue-vite-app">vue-vite-app</a></li><li><a href="https://github.com/whjin/threejs-sets">threejs-sets</a></li><li><a href="https://github.com/whjin/react-umi">react-umi</a></li><li><a href="https://github.com/whjin/typescript-canvas">typescript-canvas</a></li><li><a href="https://github.com/whjin/webrtc-framework">webrtc-framework</a></li><li><a href="https://github.com/whjin/webgl-framework">webgl-framework</a></li><li><a href="https://github.com/whjin/make-react-game">make-react-game</a></li><li><a href="https://whjin.github.io/frontend-dev-doc/">frontend-dev-doc</a></li><li><a href="https://whjin.github.io/blog/">blog</a></li><li><a href="https://github.com/whjin/make-quasar">make-quasar</a></li><li><a href="https://whjin.github.io/site-nav/">site-nav</a></li></ol><h3 id="文档汇总"><a href="#文档汇总" class="headerlink" title="文档汇总"></a>文档汇总</h3><ol><li><a href="https://docs-cn.aircode.io/">AirCode 文档</a></li><li><a href="https://pajhome.org.uk/crypt/md5/">JavaScript MD5</a></li><li><a href="https://www.dcloud.io/docs/api/index.html">HTML5+ API Reference</a></li><li><a href="https://www.javascripting.com/">JavaScripting</a></li><li><a href="https://www.fourmilab.ch/javascrypt/javascrypt.html">JavaScrypt Encryption and Decryption</a></li><li><a href="https://algo.itcharge.cn/">算法通关手册</a></li><li><a href="https://doocs.github.io/leetcode/#/?id=%e7%ab%99%e7%82%b9">LeetCode</a></li><li><a href="https://backlog.com/git-tutorial/cn/">Git教程</a></li><li><a href="https://socketio.bootcss.com/">Socket.IO 中文文档</a></li><li><a href="https://socket.io/zh-CN/">Socket.IO</a></li><li><a href="https://veaba.github.io/socket.io-docs/">Socket.io 文档</a></li><li><a href="https://webrtc.github.io/samples/">WebRTC samples</a></li><li><a href="https://an.rustfisher.com/webrtc/intro/concept-intro/">WebRTC文档</a></li><li><a href="https://an.rustfisher.com/">RustFisher 安卓|Java|设计模式|WebRTC|Python|NestJS|PyQt</a></li><li><a href="https://www.webrtc.org.cn/">WebRTC中文网</a></li><li><a href="https://www.rtcdeveloper.cn/cn/community/">声网 RTE 开发者社区</a></li><li><a href="https://www.jianshu.com/p/167b605add32">音视频文章汇总</a></li><li><a href="https://blog.csdn.net/qq_36410795/article/details/123916084?spm=1001.2014.3001.5501">WebRTC 详解信令服务器媒体协商及实战（及通讯过程）</a></li><li><a href="https://www.mdui.org/design/">Material Design 指南中文版</a></li><li><a href="https://dev.mysql.com/downloads/installer/">MySQL Community Downloads</a></li><li><a href="https://flutter.cn/">Flutter中文网</a></li><li><a href="https://flutterchina.club/"> Flutter中文社区</a></li><li><a href="https://dart.cn/">Dart 中文文档</a></li><li><a href="https://ducafecat.tech/">Flutter技术博客</a></li><li><a href="https://mp.weixin.qq.com/s/03YqS-CrUpIJk0ZCV3YjPg">Flutter 资源大全</a></li><li><a href="https://developer.android.google.cn/?hl=zh-cn">Android开发者平台</a></li><li><a href="https://services.gradle.org/distributions/">Gradle Distributions下载列表</a></li><li><a href="https://book.flutterchina.club/">《Flutter实战·第二版》</a></li><li><a href="https://firebase.google.cn/?hl=zh-cn">Firebase中文网</a></li><li><a href="https://echarts.apache.org/zh/index.html">Apache ECharts主页</a></li><li><a href="https://www.hcharts.cn/">Highcharts主页</a></li><li><a href="https://nodejs.org/zh-cn">Node.js中文主页</a></li><li><a href="https://www.nodeapp.cn/">Node.js v8.x 中文文档</a></li><li><a href="https://www.javascriptc.com/nodejs/zh-cn/">Node.js中文网</a></li><li><a href="http://www.nodejs.com.cn/">Node.js 中文网</a></li><li><a href="https://cnodejs.org/">CNode：Node.js专业中文社区</a></li><li><a href="https://nodejs.p2hp.com/">Node.Js中文网</a></li><li><a href="https://npmmirror.com/">npmmirror 镜像站</a></li><li><a href="https://www.mongodb.com/zh-cn">MongoDB：应用程序数据平台</a></li><li><a href="https://v5.bootcss.com/">Bootstrap v5 中文文档</a></li><li><a href="https://www.bbsmax.com/A/xl56YWRoJr/">移动端 h5 uniapp 读，写，删本地文件或sd文件</a></li><li><a href="https://d3js.org/">D3.js - Data-Driven Documents</a></li><li><a href="https://threejs.org/">Three.js – JavaScript 3D Library</a></li><li><a href="https://galacean.antgroup.com/#/">Galacean - 移动优先的高性能 Web 互动引擎</a></li><li><a href="https://www.yuque.com/galacean-engine/blog">Galacean文档</a></li><li><a href="http://www.yanhuangxueyuan.com/WebGL/">WebGL电子书</a></li><li><a href="http://www.yanhuangxueyuan.com/">WebGL教程</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API">WebGL API文档</a></li><li><a href="http://www.hewebgl.com/">WebGL中文网</a></li><li><a href="http://www.webgl3d.cn/">Three.js中文网</a></li><li><a href="https://www.canvasapi.cn/">canvas API中文网</a></li><li><a href="http://pixijs.huashengweilai.com/">Pixi.js中文网</a></li><li><a href="https://pnpm.io/zh/">Fast, disk space efficient package manager | pnpm</a></li><li><a href="https://www.mdui.org/design/">Material Design 指南中文版</a></li><li><a href="https://zh-hans.react.dev/">React 中文社区</a></li><li><a href="https://immerjs.github.io/immer/zh-CN/">Immer文档</a></li><li><a href="https://reactnative.cn/">React Native 中文网</a></li><li><a href="https://nextjs.frontendx.cn/">Next.js中文网</a></li><li><a href="https://reactrouter.com/en/6.12.0">React Router文档</a></li><li><a href="https://redux.js.org/">Redux文档</a></li><li><a href="https://create-react-app.dev/">Create React App文档</a></li><li><a href="https://3x.ant.design/index-cn">Ant Design官网</a></li><li><a href="https://umijs.org/">UmiJS - 插件化的企业级前端应用框架</a></li><li><a href="https://www.nextjs.cn/">Next.js - React 应用开发框架 | Next.js中文网</a></li><li><a href="https://pinia.web3doc.top/">Pinia 中文文档</a></li><li><a href="https://router.vuejs.org/zh/">Vue Router | Vue.js 的官方路由</a></li><li><a href="https://vue-loader.vuejs.org/zh/">Vue Loader文档</a></li><li><a href="https://vuex.vuejs.org/zh/">Vuex文档</a></li><li><a href="https://cli.vuejs.org/zh/">Vue CLI文档</a></li><li><a href="https://cn.vuejs.org/">Vue.js - 渐进式 JavaScript 框架 | Vue.js</a></li><li><a href="https://vitejs.cn/vite3-cn/">Vite | 下一代的前端工具链</a></li><li><a href="https://www.iviewui.com/">View Design官网</a></li><li><a href="https://vitejs.cn/">Vite中文网</a></li><li><a href="https://webpack.docschina.org/">webpack文档</a></li><li><a href="https://www.zhangxinxu.com/">张鑫旭的个人主页</a></li><li><a href="https://frontend.devrank.cn/traffic-catalogue">前端知识库</a></li><li><a href="https://zh.javascript.info/">现代 JavaScript 教程</a></li><li><a href="https://guoshuyu.cn/home/wx/">Flutter实战教程</a></li><li><a href="https://www.kancloud.cn/kancloud/http-cookies-explained/48333">HTTP cookies 详解</a></li><li><a href="https://es6.ruanyifeng.com/">ES6 入门教程 - ECMAScript 6入门</a></li><li><a href="https://wangdoc.com/">网道 - 互联网开发文档</a></li><li><a href="https://www.html5plus.org/doc/zh_cn/events.html#">HTML5+ API Reference</a></li><li><a href="https://gridbyexample.com/">Grid by Example</a></li><li><a href="https://wangchujiang.com/reference/index.html">Quick Reference速查表</a></li><li><a href="https://css-tricks.com/">CSS-Tricks</a></li><li><a href="https://weekly.75.team/">奇舞周刊</a></li><li><a href="https://leetcode.cn/">力扣（LeetCode）官网</a></li><li><a href="https://npm.devtool.tech/">npm.devtool.tech</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git异常处理</title>
      <link href="/2023/02/19/%E6%8A%80%E6%9C%AF/Git/Git%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2023/02/19/%E6%8A%80%E6%9C%AF/Git/Git%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="本地工作区文件恢复"><a href="#本地工作区文件恢复" class="headerlink" title="本地工作区文件恢复"></a>本地工作区文件恢复</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;filename/dirname&gt;</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="远程分支删除后，删除本地分支及关联"><a href="#远程分支删除后，删除本地分支及关联" class="headerlink" title="远程分支删除后，删除本地分支及关联"></a>远程分支删除后，删除本地分支及关联</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch --unset-upstream &lt;branchname&gt;</span><br><span class="line"></span><br><span class="line">git branch --unset-upstream feature/test</span><br></pre></td></tr></table></figure><h4 id="修改提交时的备注内容"><a href="#修改提交时的备注内容" class="headerlink" title="修改提交时的备注内容"></a>修改提交时的备注内容</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br><span class="line"></span><br><span class="line">git log --pretty=online</span><br></pre></td></tr></table></figure><h4 id="修改分支名"><a href="#修改分支名" class="headerlink" title="修改分支名"></a>修改分支名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -m &lt;oldbranch&gt; &lt;newbranch&gt;</span><br><span class="line"></span><br><span class="line">git branch -m feature/stor-13711 feature/story-13711</span><br></pre></td></tr></table></figure><h4 id="撤回提交"><a href="#撤回提交" class="headerlink" title="撤回提交"></a>撤回提交</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft [&lt;commit-id&gt;/HEAD~n]</span><br><span class="line"></span><br><span class="line">git reset --soft HEAD~1</span><br><span class="line"></span><br><span class="line">git reset --mixed HEAD~1</span><br><span class="line"></span><br><span class="line">git reset --hard HEAD~1</span><br></pre></td></tr></table></figure><h4 id="撤销本地分支合并"><a href="#撤销本地分支合并" class="headerlink" title="撤销本地分支合并"></a>撤销本地分支合并</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><h4 id="恢复误删的本地分支"><a href="#恢复误删的本地分支" class="headerlink" title="恢复误删的本地分支"></a>恢复误删的本地分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;branch-name&gt; &lt;commit-id&gt;</span><br><span class="line"></span><br><span class="line">git checkout -b feature/delete HEAD@&#123;2&#125;</span><br></pre></td></tr></table></figure><h4 id="不确定哪个根治有自己提交的commit"><a href="#不确定哪个根治有自己提交的commit" class="headerlink" title="不确定哪个根治有自己提交的commit"></a>不确定哪个根治有自己提交的commit</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --contains &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git操作文档</title>
      <link href="/2023/02/18/%E6%8A%80%E6%9C%AF/Git/Git%E6%93%8D%E4%BD%9C%E6%96%87%E6%A1%A3/"/>
      <url>/2023/02/18/%E6%8A%80%E6%9C%AF/Git/Git%E6%93%8D%E4%BD%9C%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>feat</code></td><td align="center">新特性</td></tr><tr><td align="center"><code>fix(scope)</code></td><td align="center">修复 <code>scope</code> 中的 <code>Bug</code></td></tr><tr><td align="center"><code>feat!:/feat(scope)!:</code></td><td align="center"><code>breaking change</code> &#x2F; 重构 <code>API</code></td></tr><tr><td align="center"><code>build</code></td><td align="center">变更影响的是构建系统或者外部依赖 (如: <code>gulp</code>, <code>npm</code>)</td></tr><tr><td align="center"><code>ci</code></td><td align="center">修改了 <code>CI</code> 配置文件或脚本 (如: <code>Github Action</code>, <code>Travis</code>)</td></tr><tr><td align="center"><code>chore</code></td><td align="center">【重要】 变更不影响源代码或测试（如更新了辅助工具、库等)</td></tr><tr><td align="center"><code>docs</code></td><td align="center">只修改了文档</td></tr><tr><td align="center"><code>feat</code></td><td align="center">【重要】 一个新特性</td></tr><tr><td align="center"><code>fix</code></td><td align="center">【重要】 修复了一个 <code>Bug</code></td></tr><tr><td align="center"><code>perf</code></td><td align="center">增强性能的代码变更</td></tr><tr><td align="center"><code>refactor</code></td><td align="center">并非修复 <code>Bug</code> 或添加新特性的代码变更</td></tr><tr><td align="center"><code>revert</code></td><td align="center">回退代码</td></tr><tr><td align="center"><code>style</code></td><td align="center">变更不影响一些有意义的代码 (如: 删除空格、格式化代码、添加分号等)</td></tr><tr><td align="center"><code>test</code></td><td align="center">添加测试代码或修正已有的测试</td></tr></tbody></table><h3 id="提交（Commit）"><a href="#提交（Commit）" class="headerlink" title="提交（Commit）"></a>提交（Commit）</h3><h4 id="查看HEAD上最近一次的提交（commit）"><a href="#查看HEAD上最近一次的提交（commit）" class="headerlink" title="查看HEAD上最近一次的提交（commit）"></a>查看HEAD上最近一次的提交（commit）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git show</span><br><span class="line"></span><br><span class="line">git log -n1 -p</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="修改提交信息（commit-message）"><a href="#修改提交信息（commit-message）" class="headerlink" title="修改提交信息（commit message）"></a>修改提交信息（commit message）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend --only</span><br><span class="line"></span><br><span class="line">git commit --amend --only -m &#x27;xxx&#x27;</span><br></pre></td></tr></table></figure><h4 id="修改提交的用户名和邮箱"><a href="#修改提交的用户名和邮箱" class="headerlink" title="修改提交的用户名和邮箱"></a>修改提交的用户名和邮箱</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend --author &#x27;new authorname email&#x27;</span><br></pre></td></tr></table></figure><h4 id="从一个提交移除一个文件"><a href="#从一个提交移除一个文件" class="headerlink" title="从一个提交移除一个文件"></a>从一个提交移除一个文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout HEAD^ myfile</span><br><span class="line"></span><br><span class="line">git add -A</span><br><span class="line"></span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h4 id="删除最后一次提交"><a href="#删除最后一次提交" class="headerlink" title="删除最后一次提交"></a>删除最后一次提交</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD^ --hard</span><br><span class="line"></span><br><span class="line">git push -f [remote][branch]</span><br><span class="line"></span><br><span class="line">git reset --soft HEAD@&#123;1&#125;</span><br></pre></td></tr></table></figure><h4 id="删除任意提交"><a href="#删除任意提交" class="headerlink" title="删除任意提交"></a>删除任意提交</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rebase --onto SHA1_OF_BAD_COMMIT^ SHA1_OF_BAD_COMMIT</span><br><span class="line"></span><br><span class="line">git push -f [remote][branch]</span><br></pre></td></tr></table></figure><h4 id="强推到远端"><a href="#强推到远端" class="headerlink" title="强推到远端"></a>强推到远端</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f origin my-branch</span><br></pre></td></tr></table></figure><h4 id="硬重置（hard-reset）后，找回内容"><a href="#硬重置（hard-reset）后，找回内容" class="headerlink" title="硬重置（hard reset）后，找回内容"></a>硬重置（hard reset）后，找回内容</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br><span class="line"></span><br><span class="line">git reset --hard SHA1234</span><br></pre></td></tr></table></figure><h3 id="暂存（Staging）"><a href="#暂存（Staging）" class="headerlink" title="暂存（Staging）"></a>暂存（Staging）</h3><h4 id="把暂存（staging）的内容添加到上一次的提交"><a href="#把暂存（staging）的内容添加到上一次的提交" class="headerlink" title="把暂存（staging）的内容添加到上一次的提交"></a>把暂存（staging）的内容添加到上一次的提交</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h4 id="只暂存一个新文件的一部分，不是全部"><a href="#只暂存一个新文件的一部分，不是全部" class="headerlink" title="只暂存一个新文件的一部分，不是全部"></a>只暂存一个新文件的一部分，不是全部</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add --patch[-p] filename.x</span><br><span class="line"></span><br><span class="line">git add -N filename.x</span><br></pre></td></tr></table></figure><h4 id="把在一个文件里的变化（changes）加到两个提交里"><a href="#把在一个文件里的变化（changes）加到两个提交里" class="headerlink" title="把在一个文件里的变化（changes）加到两个提交里"></a>把在一个文件里的变化（changes）加到两个提交里</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add -p</span><br></pre></td></tr></table></figure><h4 id="把暂存的内容变成未暂存，把未暂存的内容暂存"><a href="#把暂存的内容变成未暂存，把未暂存的内容暂存" class="headerlink" title="把暂存的内容变成未暂存，把未暂存的内容暂存"></a>把暂存的内容变成未暂存，把未暂存的内容暂存</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;WIP&quot;</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line">git reset HEAD^</span><br><span class="line"></span><br><span class="line">git stash pop --index 0</span><br></pre></td></tr></table></figure><h3 id="未暂存（Unstaged）"><a href="#未暂存（Unstaged）" class="headerlink" title="未暂存（Unstaged）"></a>未暂存（Unstaged）</h3><h4 id="把未暂存（unstaged）的内容移动到一个新分支"><a href="#把未暂存（unstaged）的内容移动到一个新分支" class="headerlink" title="把未暂存（unstaged）的内容移动到一个新分支"></a>把未暂存（unstaged）的内容移动到一个新分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b my-branch</span><br></pre></td></tr></table></figure><h4 id="把未暂存的内容移动到另一个已存在的分支"><a href="#把未暂存的内容移动到另一个已存在的分支" class="headerlink" title="把未暂存的内容移动到另一个已存在的分支"></a>把未暂存的内容移动到另一个已存在的分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br><span class="line"></span><br><span class="line">git checkout my-branch</span><br><span class="line"></span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><h4 id="丢弃本地未提交的变化（uncommitted-changes）"><a href="#丢弃本地未提交的变化（uncommitted-changes）" class="headerlink" title="丢弃本地未提交的变化（uncommitted changes）"></a>丢弃本地未提交的变化（uncommitted changes）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// one commit</span><br><span class="line">git reset --hard HEAD^</span><br><span class="line"></span><br><span class="line">// two commits</span><br><span class="line">git reset --hard HEAD^^</span><br><span class="line"></span><br><span class="line">// four commits</span><br><span class="line">git reset --hard HEAD~4</span><br><span class="line"></span><br><span class="line">git checkout -f</span><br><span class="line"></span><br><span class="line">git reset filename</span><br></pre></td></tr></table></figure><h4 id="丢弃某些未暂存的内容"><a href="#丢弃某些未暂存的内容" class="headerlink" title="丢弃某些未暂存的内容"></a>丢弃某些未暂存的内容</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git checkout -p</span><br><span class="line"></span><br><span class="line">git stash -p</span><br><span class="line"></span><br><span class="line">git reset --hard</span><br><span class="line"></span><br><span class="line">git stash pop</span><br><span class="line"></span><br><span class="line">git stash drop</span><br></pre></td></tr></table></figure><h3 id="分支（Branches）"><a href="#分支（Branches）" class="headerlink" title="分支（Branches）"></a>分支（Branches）</h3><h4 id="从错误的分支拉取了内容，或把内容推送到了错误的分支"><a href="#从错误的分支拉取了内容，或把内容推送到了错误的分支" class="headerlink" title="从错误的分支拉取了内容，或把内容推送到了错误的分支"></a>从错误的分支拉取了内容，或把内容推送到了错误的分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br><span class="line"></span><br><span class="line">git reset --hard [hash]</span><br></pre></td></tr></table></figure><h4 id="丢弃本地的提交，以便本地分支与远程保持一致"><a href="#丢弃本地的提交，以便本地分支与远程保持一致" class="headerlink" title="丢弃本地的提交，以便本地分支与远程保持一致"></a>丢弃本地的提交，以便本地分支与远程保持一致</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line"></span><br><span class="line">git reset --hard origin/branch</span><br></pre></td></tr></table></figure><h4 id="需要提交到一个新分支，但错误的提交到了main"><a href="#需要提交到一个新分支，但错误的提交到了main" class="headerlink" title="需要提交到一个新分支，但错误的提交到了main"></a>需要提交到一个新分支，但错误的提交到了main</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch my-branch</span><br><span class="line"></span><br><span class="line">git reset --hard HEAD^</span><br><span class="line"></span><br><span class="line">git reset --hard [hash]</span><br></pre></td></tr></table></figure><h4 id="保留来自另一个ref-ish的整体文件"><a href="#保留来自另一个ref-ish的整体文件" class="headerlink" title="保留来自另一个ref-ish的整体文件"></a>保留来自另一个ref-ish的整体文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add -A &amp;&amp; git commit -m &quot;commit message&quot;</span><br><span class="line"></span><br><span class="line">git checkout solution -- file.txt</span><br></pre></td></tr></table></figure><h4 id="删除上游（upstream）分支被删除了的本地分支"><a href="#删除上游（upstream）分支被删除了的本地分支" class="headerlink" title="删除上游（upstream）分支被删除了的本地分支"></a>删除上游（upstream）分支被删除了的本地分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch -p</span><br></pre></td></tr></table></figure><h4 id="不小心删除了分支"><a href="#不小心删除了分支" class="headerlink" title="不小心删除了分支"></a>不小心删除了分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b my-branch</span><br><span class="line"></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line">git reflog</span><br><span class="line"></span><br><span class="line">git checkout -b my-branch</span><br></pre></td></tr></table></figure><h4 id="删除一个远程分支"><a href="#删除一个远程分支" class="headerlink" title="删除一个远程分支"></a>删除一个远程分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete my-branch</span><br><span class="line"></span><br><span class="line">git push origin :my-branch</span><br></pre></td></tr></table></figure><h4 id="删除一个本地分支"><a href="#删除一个本地分支" class="headerlink" title="删除一个本地分支"></a>删除一个本地分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D my-branch</span><br></pre></td></tr></table></figure><h4 id="从别人正在工作的远程分支迁出（checkout）一个分支"><a href="#从别人正在工作的远程分支迁出（checkout）一个分支" class="headerlink" title="从别人正在工作的远程分支迁出（checkout）一个分支"></a>从别人正在工作的远程分支迁出（checkout）一个分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line"></span><br><span class="line">git checkout --track origin/[branch]</span><br></pre></td></tr></table></figure><h3 id="Rebasing和合并（Merging）"><a href="#Rebasing和合并（Merging）" class="headerlink" title="Rebasing和合并（Merging）"></a>Rebasing和合并（Merging）</h3><h4 id="撤销rebase-merge"><a href="#撤销rebase-merge" class="headerlink" title="撤销rebase&#x2F;merge"></a>撤销rebase&#x2F;merge</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard ORIG_HEAD</span><br></pre></td></tr></table></figure><h4 id="已经rebase，但不想强推（force-push）"><a href="#已经rebase，但不想强推（force-push）" class="headerlink" title="已经rebase，但不想强推（force push）"></a>已经rebase，但不想强推（force push）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git checkout my-branch</span><br><span class="line"></span><br><span class="line">git rebase -i main</span><br><span class="line"></span><br><span class="line">git checkout main</span><br><span class="line"></span><br><span class="line">git merge --ff-only my-branch</span><br></pre></td></tr></table></figure><h4 id="需要组合（combine）几个提交"><a href="#需要组合（combine）几个提交" class="headerlink" title="需要组合（combine）几个提交"></a>需要组合（combine）几个提交</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft main</span><br><span class="line"></span><br><span class="line">git commit -am &quot;new awesome feature&quot;</span><br><span class="line"></span><br><span class="line">git rebase -i main</span><br><span class="line"></span><br><span class="line">git rebase -i HEAD~2</span><br></pre></td></tr></table></figure><h4 id="安全合并（merging）策略"><a href="#安全合并（merging）策略" class="headerlink" title="安全合并（merging）策略"></a>安全合并（merging）策略</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --no-ff --no-commit my-branch</span><br></pre></td></tr></table></figure><h4 id="将一个分支合并成一个提交"><a href="#将一个分支合并成一个提交" class="headerlink" title="将一个分支合并成一个提交"></a>将一个分支合并成一个提交</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --squash my-branch</span><br></pre></td></tr></table></figure><h4 id="组合（combine）未推的提交"><a href="#组合（combine）未推的提交" class="headerlink" title="组合（combine）未推的提交"></a>组合（combine）未推的提交</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i @&#123;u&#125;</span><br></pre></td></tr></table></figure><h4 id="检查是否分支上的所有提交都已经合并"><a href="#检查是否分支上的所有提交都已经合并" class="headerlink" title="检查是否分支上的所有提交都已经合并"></a>检查是否分支上的所有提交都已经合并</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log --graph --left-right --cherry-pick --outline HEAD...feature/120-on-scroll</span><br><span class="line"></span><br><span class="line">git log main ^feature/120-on-scroll --no-merges</span><br></pre></td></tr></table></figure><h4 id="暂存所有改动"><a href="#暂存所有改动" class="headerlink" title="暂存所有改动"></a>暂存所有改动</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br><span class="line"></span><br><span class="line">git stash -u</span><br></pre></td></tr></table></figure><h4 id="暂存指定文件"><a href="#暂存指定文件" class="headerlink" title="暂存指定文件"></a>暂存指定文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash push working-directory-path/filename.ext</span><br><span class="line"></span><br><span class="line">git stash push working-directory-path/filename1.ext working-directory-path/filename2.ext</span><br></pre></td></tr></table></figure><h4 id="暂存时记录消息"><a href="#暂存时记录消息" class="headerlink" title="暂存时记录消息"></a>暂存时记录消息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash save &lt;message&gt;</span><br><span class="line"></span><br><span class="line">git stash push -m &lt;message&gt;</span><br></pre></td></tr></table></figure><h4 id="使用某个指定暂存"><a href="#使用某个指定暂存" class="headerlink" title="使用某个指定暂存"></a>使用某个指定暂存</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br><span class="line"></span><br><span class="line">git stash apply &quot;stash@&#123;n&#125;&quot;</span><br><span class="line"></span><br><span class="line">git stash apply &quot;stash@&#123;2.hours.ago&#125;&quot;</span><br></pre></td></tr></table></figure><h4 id="暂存时保留未暂存的内容"><a href="#暂存时保留未暂存的内容" class="headerlink" title="暂存时保留未暂存的内容"></a>暂存时保留未暂存的内容</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash create</span><br><span class="line"></span><br><span class="line">git stash store -m &quot;commit message&quot; CREATED_SHA1</span><br></pre></td></tr></table></figure><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><h4 id="克隆所有子模块"><a href="#克隆所有子模块" class="headerlink" title="克隆所有子模块"></a>克隆所有子模块</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive git://github.com/foo/bar.git</span><br><span class="line"></span><br><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure><h4 id="删除标签（tag）"><a href="#删除标签（tag）" class="headerlink" title="删除标签（tag）"></a>删除标签（tag）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag -d &lt;tag_name&gt;</span><br><span class="line"></span><br><span class="line">git push &lt;remote&gt; :refs/tags/&lt;tag_name&gt;</span><br></pre></td></tr></table></figure><h4 id="恢复已删除标签"><a href="#恢复已删除标签" class="headerlink" title="恢复已删除标签"></a>恢复已删除标签</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fsck --uncreachable | grep tag</span><br><span class="line"></span><br><span class="line">git update-ref refs/tags/&lt;tag_name&gt; &lt;hash&gt;</span><br></pre></td></tr></table></figure><h3 id="跟踪文件（Tracking-Files）"><a href="#跟踪文件（Tracking-Files）" class="headerlink" title="跟踪文件（Tracking Files）"></a>跟踪文件（Tracking Files）</h3><h4 id="只改变一个文件名字，不修改内容"><a href="#只改变一个文件名字，不修改内容" class="headerlink" title="只改变一个文件名字，不修改内容"></a>只改变一个文件名字，不修改内容</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv --force myfile MyFile</span><br></pre></td></tr></table></figure><h4 id="从Git删除一个文件，但保留该文件"><a href="#从Git删除一个文件，但保留该文件" class="headerlink" title="从Git删除一个文件，但保留该文件"></a>从Git删除一个文件，但保留该文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached log.txt</span><br></pre></td></tr></table></figure><h3 id="配置（Configuration）"><a href="#配置（Configuration）" class="headerlink" title="配置（Configuration）"></a>配置（Configuration）</h3><h4 id="缓存一个仓库（repository）的用户名和密码"><a href="#缓存一个仓库（repository）的用户名和密码" class="headerlink" title="缓存一个仓库（repository）的用户名和密码"></a>缓存一个仓库（repository）的用户名和密码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper cache</span><br><span class="line"></span><br><span class="line">git config --global credential.helper &#x27;cache --timeout=3600&#x27;</span><br></pre></td></tr></table></figure><h4 id="修改远程分支名"><a href="#修改远程分支名" class="headerlink" title="修改远程分支名"></a>修改远程分支名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git branch -m oldbranch newbranch</span><br><span class="line"></span><br><span class="line">git push --delete origin oldbranch</span><br><span class="line"></span><br><span class="line">git push origin newbranch</span><br><span class="line"></span><br><span class="line">git branch --set-upsteam-to origin/newbranch</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>功能代码集合</title>
      <link href="/2023/01/24/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/%E5%8A%9F%E8%83%BD%E4%BB%A3%E7%A0%81%E9%9B%86%E5%90%88/"/>
      <url>/2023/01/24/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/%E5%8A%9F%E8%83%BD%E4%BB%A3%E7%A0%81%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h3 id="JS原型链"><a href="#JS原型链" class="headerlink" title="JS原型链"></a>JS原型链</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;&#125;</span><br><span class="line">Person.prototype.name = &quot;abc&quot;;</span><br><span class="line">Person.prototype.sayName = function () &#123;</span><br><span class="line">  console.log(this.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let person = new Person();</span><br><span class="line"></span><br><span class="line">person.__proto__ = Person.prototype;</span><br><span class="line">String.__proto__ = Function.prototype;</span><br><span class="line">String.constructor = Function;</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="JS继承"><a href="#JS继承" class="headerlink" title="JS继承"></a>JS继承</h3><h4 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Parent() &#123;</span><br><span class="line">  this.name = &quot;Parent&quot;;</span><br><span class="line">  this.sex = &quot;male&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Child() &#123;</span><br><span class="line">  this.name = &quot;Child&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype = new Parent();</span><br></pre></td></tr></table></figure><h4 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&quot;Child&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Persion</span>();</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span>;</span><br></pre></td></tr></table></figure><h3 id="new关键字"><a href="#new关键字" class="headerlink" title="new关键字"></a>new关键字</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function _new(constructor, ...arg) &#123;</span><br><span class="line">  let obj = &#123;&#125;;</span><br><span class="line">  obj.__proto__ = constructor.prototype;</span><br><span class="line">  let res = constructor.apply(obj, arg);</span><br><span class="line">  return Object.prototype.toString.call(res) === &quot;[object Object]&quot; ? res : obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue技术点汇总</title>
      <link href="/2023/01/22/%E6%8A%80%E6%9C%AF/Vue/Vue%E6%8A%80%E6%9C%AF%E7%82%B9%E6%B1%87%E6%80%BB/"/>
      <url>/2023/01/22/%E6%8A%80%E6%9C%AF/Vue/Vue%E6%8A%80%E6%9C%AF%E7%82%B9%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="响应式数据"><a href="#响应式数据" class="headerlink" title="响应式数据"></a>响应式数据</h3><p>根据数据类型【数组和对象】进行不同处理。</p><ol><li><p>对象内部通过<code>defineReactive</code>方法，使用<code>Object.defineProperty()</code>监听数据属性的<code>get</code>进行数据依赖收集，再通过<code>set</code>完成数据更新。</p></li><li><p>数组则通过重写数组方法实现。扩展<code>7</code>个变更方法（<code>push/pop/shift/unshift/splice/reverse/sort</code>），通过监听这些方法收集依赖和派发更新。</p></li></ol><blockquote><p>多层对象通过递归实现监听，<code>Vue3</code>使用<code>proxy</code>实现响应式数据。<br>响应式流程：<code>defineReactive</code>定义响应式数据；给属性增加<code>dep</code>收集对应的<code>watcher</code>；等数据变化进行更新。<br><code>dep.depend</code>——<code>get</code>取值，依赖收集；<code>dep.notify</code>——<code>set</code>设置，通知视图更新。</p></blockquote><span id="more"></span><p>性能优化点：1. 对象层级过深；2. 不需要响应式数据不放在<code>data</code>；3. <code>Object.freeze</code>可以冻结数据。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript常用方法集</title>
      <link href="/2020/08/23/%E6%8A%80%E6%9C%AF/JavaScript/JavaScript%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E9%9B%86/"/>
      <url>/2020/08/23/%E6%8A%80%E6%9C%AF/JavaScript/JavaScript%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h3 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式化日期类型,fmt格式可选择</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dateFormat</span>(<span class="params">fmt, date</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> ret;</span><br><span class="line">  <span class="keyword">let</span> opt = &#123;</span><br><span class="line">    <span class="string">&quot;Y+&quot;</span>: date.<span class="title function_">getFullYear</span>().<span class="title function_">toString</span>(), <span class="comment">// 年</span></span><br><span class="line">    <span class="string">&quot;M+&quot;</span>: (date.<span class="title function_">getMonth</span>() + <span class="number">1</span>).<span class="title function_">toString</span>(), <span class="comment">// 月</span></span><br><span class="line">    <span class="string">&quot;D+&quot;</span>: date.<span class="title function_">getDate</span>().<span class="title function_">toString</span>(), <span class="comment">// 日</span></span><br><span class="line">    <span class="string">&quot;h+&quot;</span>: date.<span class="title function_">getHours</span>().<span class="title function_">toString</span>(), <span class="comment">// 时</span></span><br><span class="line">    <span class="string">&quot;m+&quot;</span>: date.<span class="title function_">getMinutes</span>().<span class="title function_">toString</span>(), <span class="comment">// 分</span></span><br><span class="line">    <span class="string">&quot;s+&quot;</span>: date.<span class="title function_">getSeconds</span>().<span class="title function_">toString</span>(), <span class="comment">// 秒</span></span><br><span class="line">    <span class="string">&quot;ms+&quot;</span>: date.<span class="title function_">getMilliseconds</span>().<span class="title function_">toString</span>() <span class="comment">// 毫秒</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> opt) &#123;</span><br><span class="line">    ret = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;(&quot;</span> + k + <span class="string">&quot;)&quot;</span>).<span class="title function_">exec</span>(fmt);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">      fmt = fmt.<span class="title function_">replace</span>(ret[<span class="number">1</span>], ret[<span class="number">1</span>].<span class="property">length</span> == <span class="number">1</span> ? opt[k] : opt[k].<span class="title function_">padStart</span>(ret[<span class="number">1</span>].<span class="property">length</span>, <span class="string">&quot;0&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fmt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">let</span> fDate = <span class="title function_">dateFormat</span>(<span class="string">&quot;YYYY-MM-DD hh:mm:ss.ms&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(date));</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="时间转换（秒数转时分秒）"><a href="#时间转换（秒数转时分秒）" class="headerlink" title="时间转换（秒数转时分秒）"></a>时间转换（秒数转时分秒）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">timeFormat</span> (<span class="params">sec</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> minite = <span class="title class_">Math</span>.<span class="title function_">floor</span>((sec / <span class="number">60</span> % <span class="number">60</span>)) &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">floor</span>((sec / <span class="number">60</span> % <span class="number">60</span>)) : <span class="title class_">Math</span>.<span class="title function_">floor</span>((sec / <span class="number">60</span> % <span class="number">60</span>));</span><br><span class="line">    <span class="keyword">let</span> second = <span class="title class_">Math</span>.<span class="title function_">floor</span>((sec % <span class="number">60</span>)) &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">floor</span>((sec % <span class="number">60</span>)) : <span class="title class_">Math</span>.<span class="title function_">floor</span>((sec % <span class="number">60</span>));</span><br><span class="line">    <span class="keyword">if</span> (sec &lt; <span class="number">3600</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;minite&#125;</span>:<span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> hour = <span class="title class_">Math</span>.<span class="title function_">floor</span>(sec / <span class="number">3600</span>) &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">floor</span>(sec / <span class="number">3600</span>) : <span class="title class_">Math</span>.<span class="title function_">floor</span>(sec / <span class="number">3600</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;hour&#125;</span>:<span class="subst">$&#123;minite&#125;</span>:<span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算时分秒差值"><a href="#计算时分秒差值" class="headerlink" title="计算时分秒差值"></a>计算时分秒差值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算时分秒差值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timeDiffer</span>(<span class="params">beginTime, endTime</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> ret = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">let</span> sTime = <span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="title function_">dateFormat</span>(<span class="string">&quot;YYYY/MM/DD&quot;</span>, date) + <span class="string">&quot; &quot;</span> + beginTime);</span><br><span class="line">  <span class="keyword">if</span> (beginTime &gt;= endTime) &#123;</span><br><span class="line">    date.<span class="title function_">setDate</span>(date.<span class="title function_">getDate</span>() + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> eTime = <span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="title function_">dateFormat</span>(<span class="string">&quot;YYYY/MM/DD&quot;</span>, date) + <span class="string">&quot; &quot;</span> + endTime);</span><br><span class="line">  <span class="keyword">let</span> differ = eTime - sTime;</span><br><span class="line">  <span class="keyword">let</span> hour = <span class="title class_">Math</span>.<span class="title function_">floor</span>(differ / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span>);</span><br><span class="line">  <span class="keyword">let</span> minute = <span class="title class_">Math</span>.<span class="title function_">floor</span>(differ / <span class="number">1000</span> / <span class="number">60</span> - hour * <span class="number">60</span>);</span><br><span class="line">  <span class="keyword">let</span> second = <span class="title class_">Math</span>.<span class="title function_">floor</span>(differ / <span class="number">1000</span> - hour * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">  ret = &#123;</span><br><span class="line">    <span class="attr">differHour</span>: hour,</span><br><span class="line">    <span class="attr">differMinute</span>: minute,</span><br><span class="line">    <span class="attr">differSecond</span>: second</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; differHour, differMinute, differSecond &#125; = <span class="title function_">timeDiffer</span>(beginTime, endTime);</span><br></pre></td></tr></table></figure><h3 id="数组-对象-深-浅-拷贝"><a href="#数组-对象-深-浅-拷贝" class="headerlink" title="(数组&#x2F;对象)(深&#x2F;浅)拷贝"></a>(数组&#x2F;对象)(深&#x2F;浅)拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [&#123; <span class="attr">name</span>: <span class="string">&quot;o&quot;</span> &#125;];</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">stu</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;o&quot;</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组浅拷贝</span></span><br><span class="line"><span class="keyword">let</span> listCopy1 = [].<span class="title function_">concat</span>(list);</span><br><span class="line"><span class="keyword">let</span> listCopy2 = list.<span class="title function_">slice</span>();</span><br><span class="line"><span class="keyword">let</span> listCopy3 = <span class="title class_">Array</span>.<span class="title function_">from</span>(list);</span><br><span class="line"><span class="keyword">let</span> listCopy4 = [...list];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象浅拷贝</span></span><br><span class="line"><span class="keyword">let</span> objCopy1 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj);</span><br><span class="line"><span class="keyword">let</span> objCopy2 = &#123; ...obj &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组|对象深拷贝</span></span><br><span class="line"><span class="keyword">let</span> listCopy = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(list));</span><br><span class="line"><span class="keyword">let</span> objCopy = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 深拷贝，即复制并独立一份数据，操作不影响原数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(i)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[i] === <span class="string">&quot;object&quot;</span> &amp;&amp; obj[i] !== <span class="literal">null</span>) &#123;</span><br><span class="line">        result[i] = <span class="title function_">deepCopy</span>(obj[i]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result[i] = obj[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> copyObj = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">&quot;object&quot;</span> &amp;&amp; obj !== <span class="literal">null</span>) &#123;</span><br><span class="line">    copyObj = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      copyObj[i] = <span class="title function_">deepClone</span>(obj[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    copyObj = obj;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> copyObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6最简方法</span></span><br><span class="line"><span class="keyword">let</span> result = [];</span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">  result = <span class="keyword">new</span> <span class="title class_">Set</span>(arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter去重</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 当前元素在原数据中的第一个索引等于当前索引值，否则返回当前元素</span></span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(item, <span class="number">0</span>) == index;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组去重</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!result.<span class="title function_">includes</span>(arr[i])) &#123;</span><br><span class="line">        result.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组对象去重"><a href="#数组对象去重" class="headerlink" title="数组对象去重"></a>数组对象去重</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">uniqueArr</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!map.<span class="title function_">has</span>(arr[i].<span class="property">name</span>)) &#123;</span><br><span class="line">      map.<span class="title function_">set</span>(arr[i].<span class="property">name</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [...map.<span class="title function_">values</span>()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组对象排序"><a href="#数组对象排序" class="headerlink" title="数组对象排序"></a>数组对象排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组对象排序，比较两个字符串</span></span><br><span class="line">list.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a.<span class="property">id</span>.<span class="title function_">localeCompare</span>(b.<span class="property">id</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="获取上-下个月日期"><a href="#获取上-下个月日期" class="headerlink" title="获取上&#x2F;下个月日期"></a>获取上&#x2F;下个月日期</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下个月</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="variable language_">this</span>.<span class="property">startDate</span>);</span><br><span class="line"><span class="keyword">let</span> nextMonthDate = date.<span class="title function_">setMonth</span>(date.<span class="title function_">getMonth</span>() + <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">endDate</span> = <span class="title function_">dateFormat</span>(<span class="string">&quot;YYYY-MM-DD&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(nextMonthDate));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上个月个月</span></span><br><span class="line"><span class="keyword">let</span> lastMonthDate = date.<span class="title function_">setMonth</span>(date.<span class="title function_">getMonth</span>() - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="获取前-后7天日期"><a href="#获取前-后7天日期" class="headerlink" title="获取前&#x2F;后7天日期"></a>获取前&#x2F;后7天日期</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前7天</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="variable language_">this</span>.<span class="property">startDate</span>);</span><br><span class="line"><span class="keyword">let</span> afterDate = date.<span class="title function_">setDate</span>(date.<span class="title function_">getDate</span>() + <span class="number">6</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">endDate</span> = <span class="title function_">dateFormat</span>(<span class="string">&quot;YYYY-MM-DD&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(afterDate));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后7天</span></span><br><span class="line"><span class="keyword">let</span> afterDate = date.<span class="title function_">setDate</span>(date.<span class="title function_">getDate</span>() - <span class="number">6</span>);</span><br></pre></td></tr></table></figure><h3 id="一周日期"><a href="#一周日期" class="headerlink" title="一周日期"></a>一周日期</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> weeks=[<span class="string">&quot;周一&quot;</span>,<span class="string">&quot;周二&quot;</span>,<span class="string">&quot;周三&quot;</span>,<span class="string">&quot;周四&quot;</span>,<span class="string">&quot;周五&quot;</span>,<span class="string">&quot;周六&quot;</span>,<span class="string">&quot;周日&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">  <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">let</span> index = date.<span class="title function_">getDay</span>() ? date.<span class="title function_">getDay</span>() - <span class="number">1</span> : <span class="number">6</span>;</span><br><span class="line">  <span class="keyword">let</span> nowDate = date.<span class="title function_">setDate</span>(date.<span class="title function_">getDate</span>() - index + i);</span><br><span class="line">  <span class="keyword">let</span> formatDate = <span class="title function_">dateFormat</span>(<span class="string">&quot;MM-DD&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(nowDate));</span><br><span class="line">  <span class="keyword">let</span> week = weeks[i]; </span><br><span class="line">  <span class="keyword">let</span> weekDate = <span class="string">`<span class="subst">$&#123;formatDate&#125;</span>(<span class="subst">$&#123;week&#125;</span>)`</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">weekDateColumns</span>.<span class="title function_">push</span>(weekDate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="点击内容切换"><a href="#点击内容切换" class="headerlink" title="点击内容切换"></a>点击内容切换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> len = <span class="variable language_">this</span>.<span class="property">assistList</span>.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">index</span> &lt; len) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">index</span>++;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">assistInfo</span> = <span class="variable language_">this</span>.<span class="property">assistList</span>[<span class="variable language_">this</span>.<span class="property">index</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">index</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">assistInfo</span> = <span class="variable language_">this</span>.<span class="property">assistList</span>[<span class="variable language_">this</span>.<span class="property">index</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时分秒"><a href="#时分秒" class="headerlink" title="时分秒"></a>时分秒</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">时：<span class="string">`parseInt(count/60/60)`</span></span><br><span class="line">分：<span class="string">`parseInt(count/60)%60`</span></span><br><span class="line">秒：<span class="string">`parseInt(count%60)`</span></span><br></pre></td></tr></table></figure><h3 id="当月第一天和最后一天"><a href="#当月第一天和最后一天" class="headerlink" title="当月第一天和最后一天"></a>当月第一天和最后一天</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一天</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">date.<span class="title function_">setDate</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">dateFormat</span>(<span class="string">&quot;YYYY-MM-DD&quot;</span>, date));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后一天</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">let</span> lastDay = <span class="keyword">new</span> <span class="title class_">Date</span>(date.<span class="title function_">getFullYear</span>(), date.<span class="title function_">getMonth</span>() + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">dateFormat</span>(<span class="string">&quot;YYYY-MM-DD&quot;</span>, lastDay));</span><br></pre></td></tr></table></figure><h3 id="fetch接口请求"><a href="#fetch接口请求" class="headerlink" title="fetch接口请求"></a>fetch接口请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> api = <span class="string">&quot;https://api.com&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> headerConfig = &#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="title class_">Accept</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(api, headerConfig);</span><br><span class="line">  <span class="keyword">let</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按键处理方法"><a href="#按键处理方法" class="headerlink" title="按键处理方法"></a>按键处理方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keydown&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#container&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> &#123; key, keyCode, code &#125; = e;</span><br><span class="line">  <span class="keyword">let</span> template = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;e.key&quot;</span>,</span><br><span class="line">      <span class="attr">content</span>: key == <span class="string">&quot; &quot;</span> ? <span class="string">&quot;Space&quot;</span> : key,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;e.keyCode&quot;</span>,</span><br><span class="line">      <span class="attr">content</span>: keyCode,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;e.code&quot;</span>,</span><br><span class="line">      <span class="attr">content</span>: code,</span><br><span class="line">    &#125;,</span><br><span class="line">  ].<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    template += <span class="string">`&lt;div class=&quot;key&quot;&gt;&lt;small&gt;<span class="subst">$&#123;item.title&#125;</span>&lt;/small&gt;<span class="subst">$&#123;item.content&#125;</span>&lt;/div&gt;`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  container.<span class="property">innerHTML</span> = template;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="返回顶部"><a href="#返回顶部" class="headerlink" title="返回顶部"></a>返回顶部</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  scroll-behavior: smooth;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.back</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">110px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;&quot;</span>) center no-repeat dodgerblue;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="built_in">calc</span>(<span class="number">100vh</span> + <span class="number">50px</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自适应内部元素"><a href="#自适应内部元素" class="headerlink" title="自适应内部元素"></a>自适应内部元素</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">figure</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: min-content;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">figure</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: inherit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="iview封装菜单menu"><a href="#iview封装菜单menu" class="headerlink" title="iview封装菜单menu"></a>iview封装菜单menu</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;i-submenu :name=&quot;menuList.name&quot;&gt;</span><br><span class="line">    &lt;!-- 父级菜单 --&gt;</span><br><span class="line">    &lt;template slot=&quot;title&quot;&gt;&#123;&#123; menuList.title &#125;&#125;&lt;/template&gt;</span><br><span class="line">    &lt;template v-for=&quot;(item, index) in menuList.children&quot;&gt;</span><br><span class="line">      &lt;!-- 如果还要子集，继续调用 --&gt;</span><br><span class="line">      &lt;left-menu-nav v-if=&quot;item.hasOwnProperty(&#x27;children&#x27;)&quot; :menuList=&quot;item&quot;&gt;&lt;/left-menu-nav&gt;</span><br><span class="line">      &lt;!-- 无子菜单 --&gt;</span><br><span class="line">      &lt;i-menu-item v-else :name=&quot;item.name&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;/i-menu-item&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/i-submenu&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;leftMenuNav&quot;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    menuList: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      default: () =&gt; &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;Layout&gt;</span><br><span class="line">    &lt;Sider hide-trigger collapsible :width=&quot;192&quot; :collapsed-width=&quot;64&quot; v-model=&quot;collapsed&quot; class=&quot;left-sider&quot; :style=&quot;&#123; overflow: &#x27;hidden&#x27; &#125;&quot;&gt;</span><br><span class="line">        &lt;i-menu class=&quot;menu-position&quot; ref=&quot;menu&quot; :active-name=&quot;selectItem&quot; :open-names=&quot;menuOpenName&quot; @on-select=&quot;changeSelectItem&quot;&gt;</span><br><span class="line">            &lt;template v-for=&quot;(item, index) in menuList&quot; :name=&quot;item.name&quot;&gt;</span><br><span class="line">                &lt;!-- 有子菜单 --&gt;</span><br><span class="line">                &lt;left-menu-nav v-if=&quot;item.hasOwnProperty(&#x27;children&#x27;)&quot; :menuList=&quot;item&quot;&gt;&lt;/left-menu-nav&gt;</span><br><span class="line">                &lt;!-- 无子菜单 --&gt;</span><br><span class="line">                &lt;i-menu-item v-else :name=&quot;item.name&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;/i-menu-item&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/i-menu&gt;</span><br><span class="line">    &lt;/Sider&gt;</span><br><span class="line">    &lt;Content class=&quot;main-content-con&quot;&gt;</span><br><span class="line">        &lt;Layout class=&quot;main-layout-con&quot;&gt;</span><br><span class="line">            &lt;Content class=&quot;content-wrapper&quot; style=&quot;position: relative&quot;&gt;</span><br><span class="line">                &lt;router-view style=&quot;height: 100%&quot; /&gt;</span><br><span class="line">                &lt;div v-show=&quot;lockEnable&quot; class=&quot;lockBox&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;ABackTop :height=&quot;100&quot; :bottom=&quot;80&quot; :right=&quot;50&quot; container=&quot;.content-wrapper&quot;&gt;&lt;/ABackTop&gt;</span><br><span class="line">            &lt;/Content&gt;</span><br><span class="line">        &lt;/Layout&gt;</span><br><span class="line">    &lt;/Content&gt;</span><br><span class="line">&lt;/Layout&gt;</span><br></pre></td></tr></table></figure><h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> images = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">callback</span> = (<span class="params">entries</span>) =&gt; &#123;</span><br><span class="line">  entries.<span class="title function_">forEach</span>(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> image = entry.<span class="property">target</span>;</span><br><span class="line">      <span class="keyword">const</span> data_src = image.<span class="title function_">getAttribute</span>(<span class="string">&quot;data-src&quot;</span>);</span><br><span class="line">      image.<span class="title function_">setAttribute</span>(<span class="string">&quot;src&quot;</span>, data_src);</span><br><span class="line">      <span class="title class_">ResizeObserver</span>.<span class="title function_">unobserver</span>(image);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(callback);</span><br><span class="line">images.<span class="title function_">forEach</span>(<span class="function">(<span class="params">image</span>) =&gt;</span> &#123;</span><br><span class="line">  observer.<span class="title function_">observe</span>(image);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="CSS多行文本省略"><a href="#CSS多行文本省略" class="headerlink" title="CSS多行文本省略"></a>CSS多行文本省略</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">  -webkit-<span class="selector-tag">line</span>-clamp: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue字符串换行"><a href="#Vue字符串换行" class="headerlink" title="Vue字符串换行"></a>Vue字符串换行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 添加`white-space:pre`</span><br><span class="line">2. 使用`&lt;pre&gt;`标签替换</span><br></pre></td></tr></table></figure><h3 id="封装iView无限层级菜单"><a href="#封装iView无限层级菜单" class="headerlink" title="封装iView无限层级菜单"></a>封装iView无限层级菜单</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;i-submenu :name=&quot;menuList.name&quot;&gt;</span><br><span class="line">    &lt;!-- 父级菜单 --&gt;</span><br><span class="line">    &lt;template slot=&quot;title&quot;&gt;&#123;&#123;menuList.title&#125;&#125;&lt;/template&gt;</span><br><span class="line">    &lt;template v-for=&quot;(item,index) in menuList.children&quot;&gt;</span><br><span class="line">      &lt;!-- 如果还要子集，继续调用 --&gt;</span><br><span class="line">      &lt;left-menu-nav v-if=&quot;item.children&amp;&amp;item.children.length&quot; :menuList=&quot;item&quot; :key=&quot;item.index&quot;&gt;&lt;/left-menu-nav&gt;</span><br><span class="line">      &lt;!-- 子菜单 --&gt;</span><br><span class="line">      &lt;i-menu-item :key=&quot;item.id&quot; :name=&quot;item.name&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/i-menu-item&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/i-submenu&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;leftMenuNav&quot;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    menuList: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      default: () =&gt; &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;i-menu :active-name=&quot;selectItem&quot; :open-names=&quot;menuOpenName&quot; @on-select=&quot;changeSelectItem&quot;&gt;</span><br><span class="line">&lt;template v-for=&quot;(item, index) in menuList&quot; :name=&quot;item.name&quot;&gt;</span><br><span class="line">  &lt;!-- 有子菜单 --&gt;</span><br><span class="line">  &lt;left-menu-nav v-if=&quot;item.children &amp;&amp; item.children.length&quot; :menuList=&quot;item&quot; :key=&quot;item.name&quot;&gt;&lt;/left-menu-nav&gt;</span><br><span class="line">  &lt;!-- 无子菜单 --&gt;</span><br><span class="line">  &lt;i-menu-item v-else :name=&quot;item.name&quot; :key=&quot;item.name&quot;&gt;&#123;&#123;</span><br><span class="line">    item.title</span><br><span class="line">  &#125;&#125;&lt;/i-menu-item&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/i-menu&gt;</span><br></pre></td></tr></table></figure><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;upload&quot;&gt;</span><br><span class="line">  &lt;<span class="selector-tag">button</span> id=&quot;btn&quot; class=&quot;btn&quot;&gt;上传文件&lt;/<span class="selector-tag">button</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">input</span> type=&quot;file&quot; id=&quot;<span class="selector-tag">input</span>&quot; class=&quot;<span class="selector-tag">input</span>&quot; /&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">.upload &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.btn &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  border: 1px dashed rgb(31, 154, 158);</span><br><span class="line">  background: #fff;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">.input &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 0;</span><br><span class="line">  top: 0;</span><br><span class="line">  opacity: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS控制禁止点击"><a href="#CSS控制禁止点击" class="headerlink" title="CSS控制禁止点击"></a>CSS控制禁止点击</h3><p><code>pointer-events: none; //（禁止鼠标点击事件）</code></p><h3 id="单行居中，多行顶部对齐"><a href="#单行居中，多行顶部对齐" class="headerlink" title="单行居中，多行顶部对齐"></a>单行居中，多行顶部对齐</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.table-item</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16</span>upx;</span><br><span class="line">    <span class="attribute">text-align</span>: justify;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">    <span class="selector-tag">span</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">125</span>upx;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">65</span>upx;</span><br><span class="line">      <span class="attribute">overflow</span>: auto;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">align-items</span>: center;</span><br><span class="line">      <span class="attribute">justify-content</span>: center;</span><br><span class="line">      <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">      -webkit-box-orient: vertical;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="计算传入时间与当前时间相差的秒数"><a href="#计算传入时间与当前时间相差的秒数" class="headerlink" title="计算传入时间与当前时间相差的秒数"></a>计算传入时间与当前时间相差的秒数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">convertStrToTime</span> (<span class="params">time</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> nowTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">  <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">let</span> arr = time.<span class="title function_">split</span>(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">  date.<span class="title function_">setHours</span>(<span class="built_in">parseInt</span>(arr[<span class="number">0</span>]));</span><br><span class="line">  date.<span class="title function_">setMinutes</span>(<span class="built_in">parseInt</span>(arr[<span class="number">1</span>]));</span><br><span class="line">  <span class="keyword">let</span> endTime = <span class="keyword">new</span> <span class="title class_">Date</span>(date).<span class="title function_">getTime</span>();</span><br><span class="line">  <span class="keyword">let</span> ret = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((endTime - nowTime) / <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web SQL浏览器数据库实例</title>
      <link href="/2020/08/23/%E6%8A%80%E6%9C%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/Web-SQL%E6%B5%8F%E8%A7%88%E5%99%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E4%BE%8B/"/>
      <url>/2020/08/23/%E6%8A%80%E6%9C%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/Web-SQL%E6%B5%8F%E8%A7%88%E5%99%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在做一个消息定时器，需要在离线环境中使用，通过表单写入事项存储到本地，渲染在表格中。尝试过使用Node.js进行文件读写操作，受到UI框架的限制；同时测试了localStorage存储，也达不到想要的效果。最后直接使用WebSql和indexDB来完成。以下是一个DEMO，实际效果正在测试中…</p></blockquote><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// html</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn-create&quot;</span>&gt;</span>创建user数据表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn-insert&quot;</span>&gt;</span>插入数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn-query&quot;</span>&gt;</span>查询数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn-update&quot;</span>&gt;</span>修改数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn-delete&quot;</span>&gt;</span>删除数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn-drop&quot;</span>&gt;</span>删除user数据表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;websql&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;server.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">findId</span> = (<span class="params">id</span>) =&gt; <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> db = <span class="title function_">openDatabase</span>(<span class="string">&quot;MySql&quot;</span>, <span class="string">&quot;1.0&quot;</span>, <span class="string">&quot;Test DB&quot;</span>, <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"><span class="keyword">let</span> result = db ? <span class="string">&quot;数据库创建成功&quot;</span> : <span class="string">&quot;数据库创建失败&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> websql = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;websql&quot;</span>);</span><br><span class="line">websql.<span class="property">innerHTML</span> = result;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建数据表</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">USER_TABLE_SQL</span> =</span><br><span class="line">  <span class="string">&quot;create table if not exists userTable (username varchar(12),&quot;</span> + <span class="string">&quot;password varchar(16),info text)&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createTable</span>(<span class="params"></span>) &#123;</span><br><span class="line">  db.<span class="title function_">transaction</span>(<span class="function">(<span class="params">tx</span>) =&gt;</span> &#123;</span><br><span class="line">    tx.<span class="title function_">executeSql</span>(</span><br><span class="line">      <span class="variable constant_">USER_TABLE_SQL</span>,</span><br><span class="line">      [],</span><br><span class="line">      <span class="function">(<span class="params">tx, result</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;创建user表成功&quot;</span> + result;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">tx, error</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;创建user表失败&quot;</span> + error.<span class="property">message</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">INSERT_USER_SQL</span> = <span class="string">&quot;insert into userTable (username,password,info) values (?,?,?)&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">insertData</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  db.<span class="title function_">transaction</span>(<span class="function">(<span class="params">tx</span>) =&gt;</span> &#123;</span><br><span class="line">    tx.<span class="title function_">executeSql</span>(</span><br><span class="line">      <span class="variable constant_">INSERT_USER_SQL</span>,</span><br><span class="line">      [user.<span class="property">username</span>, user.<span class="property">password</span>, user.<span class="property">info</span>],</span><br><span class="line">      <span class="function">(<span class="params">tx, result</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;添加数据成功&quot;</span> + result;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">tx, error</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;添加数据失败&quot;</span> + error.<span class="property">message</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询数据</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">QUERY_USER_SQL</span> = <span class="string">&quot;select * from userTable&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queryData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  db.<span class="title function_">transaction</span>(<span class="function">(<span class="params">tx</span>) =&gt;</span> &#123;</span><br><span class="line">    tx.<span class="title function_">executeSql</span>(</span><br><span class="line">      <span class="variable constant_">QUERY_USER_SQL</span>,</span><br><span class="line">      [],</span><br><span class="line">      <span class="function">(<span class="params">tx, result</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;查询数据成功&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(result.<span class="property">rows</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">tx, error</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;查询数据失败&quot;</span> + error.<span class="property">message</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改数据</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">UPDATE_USER_SQL</span> = <span class="string">&quot;update userTable set username=?,password=?,info=? where rowid=1&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateData</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  db.<span class="title function_">transaction</span>(<span class="function">(<span class="params">tx</span>) =&gt;</span> &#123;</span><br><span class="line">    tx.<span class="title function_">executeSql</span>(</span><br><span class="line">      <span class="variable constant_">UPDATE_USER_SQL</span>,</span><br><span class="line">      [user.<span class="property">username</span>, user.<span class="property">password</span>, user.<span class="property">info</span>],</span><br><span class="line">      <span class="function">(<span class="params">tx, result</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;修改数据成功&quot;</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">tx, error</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;修改数据失败&quot;</span> + error.<span class="property">message</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DELETE_USER_SQL</span> = <span class="string">&quot;delete from userTable where rowid=(select Max(rowid) from userTable)&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deleteData</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  db.<span class="title function_">transaction</span>(<span class="function">(<span class="params">tx</span>) =&gt;</span> &#123;</span><br><span class="line">    tx.<span class="title function_">executeSql</span>(</span><br><span class="line">      <span class="variable constant_">DELETE_USER_SQL</span>,</span><br><span class="line">      [],</span><br><span class="line">      <span class="function">(<span class="params">tx, result</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;删除数据成功&quot;</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">tx, error</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;删除数据失败&quot;</span> + error.<span class="property">message</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据表</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DROP_USER_SQL</span> = <span class="string">&quot;drop table userTable&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dropTable</span>(<span class="params"></span>) &#123;</span><br><span class="line">  db.<span class="title function_">transaction</span>(<span class="function">(<span class="params">tx</span>) =&gt;</span> &#123;</span><br><span class="line">    tx.<span class="title function_">executeSql</span>(</span><br><span class="line">      <span class="variable constant_">DROP_USER_SQL</span>,</span><br><span class="line">      [],</span><br><span class="line">      <span class="function">(<span class="params">tx, result</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;删除数据表成功&quot;</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">tx, error</span>) =&gt;</span> &#123;</span><br><span class="line">        websql.<span class="property">innerHTML</span> = <span class="string">&quot;删除数据表失败&quot;</span> + error.<span class="property">message</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&quot;李宇春&quot;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&quot;abc123456&quot;</span>,</span><br><span class="line">  <span class="attr">info</span>: <span class="string">&quot;快乐女声-&gt;中国好声音&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> btnCreate = <span class="title function_">findId</span>(<span class="string">&quot;btn-create&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> btnInsert = <span class="title function_">findId</span>(<span class="string">&quot;btn-insert&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> btnQuery = <span class="title function_">findId</span>(<span class="string">&quot;btn-query&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> btnUpdate = <span class="title function_">findId</span>(<span class="string">&quot;btn-update&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> btnDelete = <span class="title function_">findId</span>(<span class="string">&quot;btn-delete&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> btnDrop = <span class="title function_">findId</span>(<span class="string">&quot;btn-drop&quot;</span>);</span><br><span class="line">btnCreate.<span class="property">onclick</span> = <span class="function">() =&gt;</span> <span class="title function_">createTable</span>();</span><br><span class="line">btnInsert.<span class="property">onclick</span> = <span class="function">() =&gt;</span> <span class="title function_">insertData</span>(user);</span><br><span class="line">btnQuery.<span class="property">onclick</span> = <span class="function">() =&gt;</span> <span class="title function_">queryData</span>();</span><br><span class="line">btnUpdate.<span class="property">onclick</span> = <span class="function">() =&gt;</span> <span class="title function_">updateData</span>(user);</span><br><span class="line">btnDelete.<span class="property">onclick</span> = <span class="function">() =&gt;</span> <span class="title function_">deleteData</span>(user);</span><br><span class="line">btnDrop.<span class="property">onclick</span> = <span class="function">() =&gt;</span> <span class="title function_">dropTable</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八月新作</title>
      <link href="/2020/08/23/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E5%85%AB%E6%9C%88%E6%96%B0%E4%BD%9C/"/>
      <url>/2020/08/23/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E5%85%AB%E6%9C%88%E6%96%B0%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>八月新作<br>作者：吴华锦<br>其一<br>云霞消徂暑，江波观游鱼。<br>罡风穷碧落，盈香绕芙蕖。<br>白鹤沙洲渡，红衣陌上行。<br>山昏影重重，归鸟入巢林。</p><p>其二<br>远方无从往，种蔬小庭轩。<br>狂风舞天地，豪雨涨春涧。<br>山静云高洁，水清林悠远。<br>掌灯频顾盼，花开笑清颜。</p><p>好景词穷无奈何，归去读书有所得。<br>悠悠天地人间境，大美不言自相识。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远方无从往</title>
      <link href="/2020/05/16/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E8%BF%9C%E6%96%B9%E6%97%A0%E4%BB%8E%E5%BE%80/"/>
      <url>/2020/05/16/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E8%BF%9C%E6%96%B9%E6%97%A0%E4%BB%8E%E5%BE%80/</url>
      
        <content type="html"><![CDATA[<p>远方无从往<br>作者：吴华锦<br>远方无从往，种蔬小庭轩。<br>罡风舞天地，豪雨涨春涧。<br>风静云高洁，水清林悠远。<br>掌灯频顾盼，云开照清颜。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript开发文档</title>
      <link href="/2019/10/13/%E6%8A%80%E6%9C%AF/Typescript/TypeScript%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/"/>
      <url>/2019/10/13/%E6%8A%80%E6%9C%AF/Typescript/TypeScript%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p><strong>安装编译工具</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="string">&quot;tsc &amp;&amp; concurrently \&quot;npm run tsc:w\&quot; \&quot;npm run lite\&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;lite&quot;</span>: <span class="string">&quot;lite-server&quot;</span>,</span><br><span class="line">  <span class="string">&quot;tsc&quot;</span>: <span class="string">&quot;tsc&quot;</span>,</span><br><span class="line">  <span class="string">&quot;tsc:w&quot;</span>: <span class="string">&quot;tsc -w&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;concurrently&quot;</span>: <span class="string">&quot;^5.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;lite-server&quot;</span>: <span class="string">&quot;^2.5.4&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;useDefineForClassFields&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isolatedModules&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;DOM&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;src/**/*.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.d.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.tsx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.vue&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extendsions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;.vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;.tsx&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件通信</title>
      <link href="/2019/10/12/%E6%8A%80%E6%9C%AF/Vue/Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
      <url>/2019/10/12/%E6%8A%80%E6%9C%AF/Vue/Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="props"><a href="#props" class="headerlink" title="props"></a>props</h1><p>父传子组件的属性，<code>props</code>值可以是一个数组或对象。</p><h1 id="emit"><a href="#emit" class="headerlink" title="$emit"></a>$emit</h1><p>子传父组件绑定自定义事件。</p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;home @title=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;title&#x27;</span>,[&#123;<span class="attr">title</span>:<span class="string">&#x27;这是title&#x27;</span>&#125;])</span><br></pre></td></tr></table></figure><h1 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h1><p><code>vuex</code>是一个状态管理器插件，适合数据共享多的项目。</p><ul><li><code>state</code>：定义存储数据的仓库，可通过<code>this.$store.state</code>或<code>mapState</code>访问；</li><li><code>getters</code>：获取<code>store</code>值，可认为是<code>store</code>的计算属性，可通过<code>this.$store.getters</code>或<code>mapGetters</code>访问；</li><li><code>mutations</code>：同步改变<code>store</code>值，为什么会设计成同步，因为<code>mutation</code>是直接改变<code>store</code>值，<code>Vue</code>对操作进行了记录，如果是异步无法追踪改变，可通过<code>mapMutations</code>调用；</li><li><code>actions</code>：异步调用函数执行<code>mutation</code>，进而改变<code>store</code>值，可通过<code>this.$dispatch</code>或<code>mapActions</code>访问；</li><li><code>modules</code>：模块，如果状态过多，可以拆分成模块，最后在入口通过<code>...</code>解构引入。</li></ul><h1 id="parent父实例和children子实例"><a href="#parent父实例和children子实例" class="headerlink" title="parent父实例和children子实例"></a>parent父实例和children子实例</h1><ul><li>父组件<code>this.$children</code></li><li>子组件<code>this.$parent</code></li></ul><p><code>children</code>和<code>parent</code>并不保证顺序，也不是响应式，只能拿到一级父组件和子组件。</p><h1 id="refs"><a href="#refs" class="headerlink" title="$refs"></a>$refs</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;home ref=<span class="string">&quot;home&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="comment">// this.$refs.home 即可拿到子组件的实例,就可以直接操作 data 和 methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="root"><a href="#root" class="headerlink" title="$root"></a>$root</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$root</span>) <span class="comment">//获取根实例，最后所有组件都是挂载到根实例上</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$root</span>.<span class="property">$children</span>[<span class="number">0</span>]) <span class="comment">//获取根实例的一级子组件</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$root</span>.<span class="property">$children</span>[<span class="number">0</span>].<span class="property">$children</span>[<span class="number">0</span>]) <span class="comment">//获取根实例的二级子组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="sync"><a href="#sync" class="headerlink" title=".sync"></a>.sync</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;home :title.<span class="property">sync</span>=<span class="string">&quot;title&quot;</span> /&gt;</span><br><span class="line"><span class="comment">//编译时会被扩展为</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">home</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>  @<span class="attr">update:title</span>=<span class="string">&quot;val =&gt; title = val&quot;</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="comment">// 子组件可以通过$emit触发 update 方法改变</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.$emit(<span class="string">&quot;update:title&quot;</span>, <span class="string">&#x27;这是新的title&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="v-slot"><a href="#v-slot" class="headerlink" title="v-slot"></a>v-slot</h1><p><code>v-slot</code>作用就是将父组件的<code>template</code>传入子组件。</p><p>插槽分类：匿名插槽（默认插槽），没有命名，有且仅有一个。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;todo-list&gt; </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       任意内容</span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是匿名插槽<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/todo-list&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">slot</span>&gt;</span>我是默认值<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="comment">//v-slot:default写上感觉和具名写法比较统一,容易理解,也可以不用写</span></span><br></pre></td></tr></table></figure><p>具名插槽：相对匿名插槽组件<code>slot</code>标签带<code>name</code>命名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;todo-list&gt; </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:todo</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       任意内容</span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是匿名插槽<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/todo-list&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo&quot;</span>&gt;</span>我是默认值<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>作用域插槽：子组件内数据可以被父页面拿到（解决了数据只能从父页面传递给子组件）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;todo-list&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:todo</span>=<span class="string">&quot;slotProps&quot;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">   &#123;&#123;slotProps.user.firstName&#125;&#125;</span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span> </span><br><span class="line">&lt;/todo-list&gt; </span><br><span class="line"><span class="comment">//slotProps 可以随意命名</span></span><br><span class="line"><span class="comment">//slotProps 获取的是子组件标签slot上属性数据的集合所有v-bind:user=&quot;user&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo&quot;</span> <span class="attr">:user</span>=<span class="string">&quot;user&quot;</span> <span class="attr">:test</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; user.lastName &#125;&#125;</span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span> </span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">user</span>:&#123;</span><br><span class="line">        <span class="attr">lastName</span>:<span class="string">&quot;Zhang&quot;</span>,</span><br><span class="line">        <span class="attr">firstName</span>:<span class="string">&quot;san&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">test</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">// &#123;&#123; user.lastName &#125;&#125;是默认数据  v-slot:todo 当父页面没有(=&quot;slotProps&quot;)</span></span><br></pre></td></tr></table></figure><h1 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h1><ol><li>生命一个全局Vue实例变量<code>EventBus</code>，把所有的通信数据、事件监听都存储到这个变量上；</li><li>类似于Vuex，但这种方式只适用于极小的项目；</li><li>原理就是利用<code>on</code>和<code>emit</code>，并实例化一个全局Vue实现数据共享；</li><li>可以实现平级、嵌套组件传值，但是对应的事件名<code>eventTarget</code>必须是全局唯一的。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 main.js</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$eventBus</span>=<span class="keyword">new</span> <span class="title class_">Vue</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传值组件</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$eventBus</span>.$emit(<span class="string">&#x27;eventTarget&#x27;</span>,<span class="string">&#x27;这是eventTarget传过来的值&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收组件</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$eventBus</span>.$on(<span class="string">&quot;eventTarget&quot;</span>,<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;eventTarget&#x27;</span>,v);<span class="comment">//这是eventTarget传过来的值</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h1><ol><li>方案一：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由定义</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/describe/:id&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Describe&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">Describe</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 页面传参</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">`/describe/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 页面获取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span></span><br></pre></td></tr></table></figure><ol start="2"><li>方案二：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由定义</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/describe&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Describe&#x27;</span>,</span><br><span class="line">  <span class="attr">omponent</span>: <span class="title class_">Describe</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 页面传参</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Describe&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: id</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 页面获取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span></span><br></pre></td></tr></table></figure><ol start="3"><li>方案三：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由定义</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/describe&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Describe&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">Describe</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 页面传参</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/describe&#x27;</span>,</span><br><span class="line">    <span class="attr">query</span>: &#123;</span><br><span class="line">      <span class="attr">id</span>: id</span><br><span class="line">  <span class="string">`&#125;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">// 页面获取</span></span><br><span class="line"><span class="string">this.$route.query.id</span></span><br></pre></td></tr></table></figure><p>三种方案对比，方案二参数不会拼接在路由后面，页面刷新参数会丢失；方案一和三参数拼接在后面，暴露了信息。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清除浮动细节介绍</title>
      <link href="/2019/10/11/%E6%8A%80%E6%9C%AF/CSS/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%BB%86%E8%8A%82%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/10/11/%E6%8A%80%E6%9C%AF/CSS/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%BB%86%E8%8A%82%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>浮动<code>float</code>的渲染位置在行框与包含块之间，这样可以使得行框内文字与浮动元素不重叠，并且环绕它显示。在布局过程中经常使用它实现左右并排布局的效果。但是，由于浮动特性，容器如果没有明确设定高度，会依照普通流内元素高度设置，这样就会导致脱离普通流的浮动元素溢出容器，影响后面的元素布局。</p><span id="more"></span><p>已知的清除浮动元素方法：</p><ol><li>采用一个<code>HTML</code>标签，以及<code>css</code>的<code>clear</code>属性，手动清除浮动；</li><li>采用伪类<code>:after</code>动态建立一个块元素，设定<code>clear</code>属性，清除之前的浮动元素；</li><li>采用<code>css overflow</code>非<code>visible</code>值（<code>overflow:auto/overflow:hidden</code>）设定使父容器包含浮动元素；</li><li>采用<code>display:table/display:table-cell</code>等<code>table</code>系列属性将父元素变成<code>table</code>形式自动包含浮动元素；</li><li>使用<code>table</code>以及<code>td</code>标签作为浮动元素容器；</li><li>采用<code>float:left/float:right</code>方式将父元素同样浮动，就可以包含浮动内容；</li><li>在<code>IE 6/7</code>的标准文档模式中设置<code>width/height/zoom</code>等样式来自动清除浮动；</li></ol><h2 id="使用clear样式清除"><a href="#使用clear样式清除" class="headerlink" title="使用clear样式清除"></a>使用clear样式清除</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear-float</span> &#123;<span class="attribute">clear</span>:both;&#125; </span><br></pre></td></tr></table></figure><p><code>clear</code>属性是<code>CSS 1</code>就提供的用来清除浮动的样式，设置了<code>clear</code>属性的元素，其上边框位置会紧贴浮动元素的<code>margin-bottom</code>边界位置渲染，忽略其<code>margin-top</code>设置。这样父容器高度为设定（默认值是<code>auto</code>）时，由于定义的清除浮动样式元素所在位置处于浮动元素下，容器计算后的实际高度就包含了浮动元素。</p><h2 id="使用伪元素-after清除"><a href="#使用伪元素-after清除" class="headerlink" title="使用伪元素:after清除"></a>使用伪元素:after清除</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.after-clear-float</span> <span class="selector-pseudo">:after</span>&#123;<span class="attribute">content</span>:<span class="string">&quot;&quot;</span>; <span class="attribute">display</span>:block; <span class="attribute">clear</span>:both;&#125;</span><br></pre></td></tr></table></figure><p><code>:after</code>伪元素是在<code>CSS 2</code>规范内提出的，<code>IE 6/7</code>并不支持。它的作用是在指定该伪元素内部，所有子元素最后自动生成一个伪元素，并且可以为这个伪元素设定样式。在设定样式中，使用<code>clear</code>属性即可达到与手动添加元素指定清理的效果。</p><p><strong>注意兼容问题：</strong></p><h2 id="使用overflow清除"><a href="#使用overflow清除" class="headerlink" title="使用overflow清除"></a>使用overflow清除</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.overflow-clear-float</span> &#123;<span class="attribute">overflow</span>:hidden;&#125;</span><br><span class="line">或者</span><br><span class="line"><span class="selector-class">.overflow-clear-float</span> &#123;<span class="attribute">overflow</span>:auto;&#125;</span><br></pre></td></tr></table></figure><p><code>overflow</code>样式值为非<code>visible</code>时，实际上是创建了CSS 2.1规范定义的BFC。创建了它的元素，会重新计算其内部元素位置，从未获得确切高度。这样父容器也就包含了浮动元素高度。</p><h2 id="使用display-table清除"><a href="#使用display-table清除" class="headerlink" title="使用display:table清除"></a>使用display:table清除</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.table-clear-float</span> &#123;<span class="attribute">display</span>:table&#125;</span><br><span class="line">或者</span><br><span class="line"><span class="selector-class">.table-clear-float</span> &#123;<span class="attribute">display</span>:table-cell&#125;</span><br></pre></td></tr></table></figure><p>当元素<code>display</code>值被设定为<code>table</code>或<code>table-cell</code>时，同样创建了CSS 2.1规范定义的BFC。这样父容器也就包含了浮动元素高度。</p><h2 id="使用表格类元素作为浮动元素容器"><a href="#使用表格类元素作为浮动元素容器" class="headerlink" title="使用表格类元素作为浮动元素容器"></a>使用表格类元素作为浮动元素容器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">”float:left”</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当使用<code>table td th</code>等<code>table</code>系列标签时，元素的<code>display</code>值实际上是<code>display:table</code>系列，这同样也创建了BFC。这样父容器也就包含了浮动元素高度。同时在IE 6&#x2F;7中，<code>table td th</code>等<code>table</code>系列标签天然拥有<code>haslayout</code>特性，这也可以使容器自动包含浮动元素高度。</p><h2 id="使用浮动父元素清除"><a href="#使用浮动父元素清除" class="headerlink" title="使用浮动父元素清除"></a>使用浮动父元素清除</h2><p>当元素设置<code>float:left/float:right</code>时，创建BFC。父容器包含浮动元素高度。</p><h2 id="触发haslayout清除"><a href="#触发haslayout清除" class="headerlink" title="触发haslayout清除"></a>触发haslayout清除</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">haslayout-<span class="attribute">clear</span>-<span class="attribute">float</span>:&#123;<span class="attribute">width</span>:<span class="number">1px</span>&#125;</span><br><span class="line">或</span><br><span class="line"><span class="selector-class">.haslayout-clear-float</span>:&#123;<span class="attribute">height</span>:<span class="number">1px</span>&#125;</span><br><span class="line">或</span><br><span class="line"><span class="selector-class">.haslayout-clear-float</span>:&#123;zoom:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p><code>layout</code>是IE的专有概念，它决定了元素如何对其内容进行定位和尺寸计算。可以被某些<code>css property</code>特性不可逆的触发，而某些HTML元素本身就具有<code>layout</code>。</p><p><code>layout</code>在IE中可以通过<code>hasLayout</code>属性来判断一个元素是否具有<code>layout</code>，如<code>object.currentStyle.hasLayout</code>。</p><p><code>layout</code>是IE浏览器渲染引擎的一个内部组成部分，在IE浏览器中，一个元素要么自己对自身的内容进行组织和计算大小，要么依赖于包含块来计算尺寸和组织内容。为了协调这两种方式的矛盾，渲染引擎采用了<code>hasLayout</code>属性，属性值可以为<code>true</code>或<code>false</code>。当一个元素的<code>hasLayout</code>属性值为<code>true</code>时，我们说这个元素有一个布局<code>layout</code>，或拥有布局。</p><p><strong>默认拥有布局的元素：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>, <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span>, <span class="tag">&lt;<span class="name">tr</span>&gt;</span>, <span class="tag">&lt;<span class="name">th</span>&gt;</span>, <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span>, <span class="tag">&lt;<span class="name">button</span>&gt;</span>, <span class="tag">&lt;<span class="name">select</span>&gt;</span>, <span class="tag">&lt;<span class="name">textarea</span>&gt;</span>, <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span>, <span class="tag">&lt;<span class="name">legend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span>&gt;</span>, <span class="tag">&lt;<span class="name">embed</span>&gt;</span>, <span class="tag">&lt;<span class="name">object</span>&gt;</span>, <span class="tag">&lt;<span class="name">applet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">marquee</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>可以触发<code>hasLayout</code>的<code>CSS</code>特性：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">display: inline-block</span><br><span class="line">height: (除 auto 外任何值)</span><br><span class="line">width: (除 auto 外任何值)</span><br><span class="line">float: (left 或 right)</span><br><span class="line">position: absolute</span><br><span class="line">writing-mode: tb-rl</span><br><span class="line">zoom: (除 normal 外任意值)</span><br></pre></td></tr></table></figure><p><strong><code>IE7还有一些额外的属性可以触发</code>hasLayout&#96;：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">min-height: (任意值)</span><br><span class="line">min-width: (任意值)</span><br><span class="line">max-height: (除 none 外任意值)</span><br><span class="line">max-width: (除 none 外任意值)</span><br><span class="line">overflow: (除 visible 外任意值，仅用于块级元素)</span><br><span class="line">overflow-x: (除 visible 外任意值，仅用于块级元素)</span><br><span class="line">overflow-y: (除 visible 外任意值，仅用于块级元素)</span><br><span class="line">position: fixed</span><br></pre></td></tr></table></figure><h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><p>对于初级开发者，推荐使用以下清除浮动元素的方式：</p><ul><li>采用一个<code>HTML</code>标签，以及<code>css</code>的<code>clear</code>属性，来手动清除浮动；</li><li>为元素设置<code>overflow:hidden</code>或<code>overflow:auto</code>值，配合可以设置<code>zoom:1</code>样式触发<code>IE 6 hasLayout</code>特性，来达到兼容所有浏览器清除浮动的目的；</li><li>采用伪元素<code>:after</code>配合可以设置<code>zoom:1</code>样式触发<code>IE6/7 hasLayout</code>特性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode配置</title>
      <link href="/2019/09/05/%E6%8A%80%E6%9C%AF/VSCode/vscode%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/09/05/%E6%8A%80%E6%9C%AF/VSCode/vscode%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><ol><li><code>Beautify</code></li><li><code>chinese Language</code></li><li><code>open in browser</code></li><li><code>Vetur</code></li><li><code>minapp</code></li></ol><span id="more"></span><h1 id="settings-json"><a href="#settings-json" class="headerlink" title="settings.json"></a>settings.json</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;window.zoomLevel&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;markdown.preview.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[html]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HookyQR.beautify&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[javascript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HookyQR.beautify&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[json]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HookyQR.beautify&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.wordWrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.associations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;*.tpl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;.easymockrc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vetur.format.defaultFormatter.html&quot;</span><span class="punctuation">:</span> <span class="string">&quot;js-beautify-html&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vetur.format.defaultFormatterOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;js-beautify-html&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;wrap_attributes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;force-aligned&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;window.zoomLevel&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;markdown.preview.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[html]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode.html-language-features&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[javascript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[json]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.wordWrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.associations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;*.tpl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;.easymockrc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;*.vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;*.cjson&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jsonc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;*.wxss&quot;</span><span class="punctuation">:</span> <span class="string">&quot;css&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;*.wxs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;javascript&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.hideCursorInOverviewRuler&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.hover.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.autoClosingBrackets&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;workbench.sideBar.location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;left&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[jsonc]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vetur.format.defaultFormatter.html&quot;</span><span class="punctuation">:</span> <span class="string">&quot;js-beautify-html&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier.singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier.semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;emmet.includeLanguages&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;wxml&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;javascript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;velocity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;minapp-vscode.disableAutoConfig&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint.enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint.validate&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;javascript&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;javascriptreact&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;autoFix&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;autoFix&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;explorer.confirmDragAndDrop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;explorer.confirmDelete&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;liveServer.settings.donotShowInfoMsg&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[typescript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;workbench.iconTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode-icons&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式实例</title>
      <link href="/2019/08/29/%E6%8A%80%E6%9C%AF/JavaScript/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AE%9E%E4%BE%8B/"/>
      <url>/2019/08/29/%E6%8A%80%E6%9C%AF/JavaScript/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="商品计价的千分位分隔符转换"><a href="#商品计价的千分位分隔符转换" class="headerlink" title="商品计价的千分位分隔符转换"></a>商品计价的千分位分隔符转换</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> total.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/\B(?=(\d&#123;3&#125;)+$)/g</span>, <span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="去除字符串的空格"><a href="#去除字符串的空格" class="headerlink" title="去除字符串的空格"></a>去除字符串的空格</h3><ol><li>字符串原生<code>trim</code>方法，只能去除两侧空格，返回新字符串</li><li><code>replace</code>正则匹配<ul><li>去除所有空格：<code>str = str.replace(/\s*/g,&quot;&quot;)</code>  </li><li>去除两侧空格：<code>str = str.replace(/^\s*|\s*$]/g,&quot;&quot;)</code></li><li>去除左侧空格：<code>str = str.replace(/^\s*/,&quot;&quot;)</code></li><li>去除右侧空格：<code>str = str.replace(/\s*$/,&quot;&quot;)</code></li></ul></li></ol><span id="more"></span><h3 id="中文、英文、数字但不包括下划线等符号"><a href="#中文、英文、数字但不包括下划线等符号" class="headerlink" title="中文、英文、数字但不包括下划线等符号"></a>中文、英文、数字但不包括下划线等符号</h3><ul><li>中文：<code>^[\u4e00-\u9fa5]&#123;0,&#125;$</code></li><li>中文、英文、数字：<code>^[\u4e00-\u9fa5A-Za-z0-9_]+$</code>（包括下划线），<code>[\u4e00-\u9fa5A-Za-z0-9]+$</code>&#x2F;<code>[\u4e00-\u9fa5A-Za-z0-9]&#123;2,20&#125;$</code>（不包括下划线）</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>状态管理与Vuex</title>
      <link href="/2019/08/24/%E6%8A%80%E6%9C%AF/Vue/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E4%B8%8EVuex/"/>
      <url>/2019/08/24/%E6%8A%80%E6%9C%AF/Vue/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E4%B8%8EVuex/</url>
      
        <content type="html"><![CDATA[<p>在实际的业务中，经常有跨组件共享数据的需求，<code>Vuex</code>就是设计用来统一管理组件状态的，它定义了一系列规范来使用和操作数据，使组件的应用更高效。</p><p>引入<code>Vuex</code>之后统一对共享数据进行管理存放，在各个页面中可以利用<code>commit</code>方法提交<code>mutation</code>对共享数据进行修改。</p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">count</span>++,</span><br><span class="line">    <span class="attr">decrement</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">count</span>--</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Component.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">count</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;increment&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">decrement</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;decrement&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue技术细节</title>
      <link href="/2019/08/23/%E6%8A%80%E6%9C%AF/Vue/Vue%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/"/>
      <url>/2019/08/23/%E6%8A%80%E6%9C%AF/Vue/Vue%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<h1 id="key属性"><a href="#key属性" class="headerlink" title="key属性"></a>key属性</h1><p>为了方便<code>Vue</code>实例跟踪每个节点的身份，从而重用和重新排列现有元素，需要为每项提供一个唯一的<code>key</code>属性。理想的<code>key</code>属性值是每项都有并且唯一的<code>id</code>。<code>key</code>的工作方式类似于一个属性，所以需要用<code>v-bind</code>来绑定动态值。</p><span id="more"></span><h1 id="生命周期函数表"><a href="#生命周期函数表" class="headerlink" title="生命周期函数表"></a>生命周期函数表</h1><table><thead><tr><th>生命周期函数</th><th>含义</th></tr></thead><tbody><tr><td><code>beforeCreate</code>（创建前）</td><td>组件实例刚被创建，组件属性计算之前，比如<code>data</code>属性等</td></tr><tr><td><code>created</code>（创建后）</td><td>组件实例刚创建完成，属性已经绑定，此时<code>DOM</code>还未完成，<code>$el</code>属性还不存在</td></tr><tr><td><code>beforeMount</code>（载入前）</td><td>模板编译、挂载之前</td></tr><tr><td><code>mounted</code>（载入后）</td><td>模板编译、挂载之后</td></tr><tr><td><code>beforeUpdate</code>（更新前）</td><td>组件更新之前</td></tr><tr><td><code>updated</code>（更新后）</td><td>组件更新之后</td></tr><tr><td><code>beforeDestroy</code>（销毁前）</td><td>组件销毁前调用</td></tr><tr><td><code>destroyed</code>（销毁后）</td><td>组件销毁后调用</td></tr></tbody></table><h1 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h1><p>在<code>Vue</code>中通过<code>props</code>传递数据是单向的，也就是父组件数据会传递给子组件，但是反过来不成立。之所以这样设计，就是尽可能将父子组件解耦，避免子组件无意间修改父组件的状态。</p><p>业务中经常遇到两种需要改变<code>props</code>传递过来数据的情况。一种是父组件传递初始值，子组件将其作为初始值保存起来，在自己的作用域内可以随意使用和修改。这种情况可以在子组件的<code>data</code>中再声明一个数据来引用父组件传递过来的数据。</p><p>另一种情况是<code>props</code>作为需要被转变的原始值传入，这种情况计算属性就可以了。</p><h1 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h1><h2 id="自定义事件及-emit方法"><a href="#自定义事件及-emit方法" class="headerlink" title="自定义事件及$emit方法"></a>自定义事件及$emit方法</h2><p><code>Vue.js</code>允许正向传值，也就是父组件传值给子组件。正向传值不需要条件触发，是主动的，逆向传值则是不允许的，需要主动抛出自定义事件去监听。</p><p><code>this.$emit(&quot;event&quot;,val)</code></p><p><code>$emit</code>为实例方法，用来触发事件监听。其中，参数<code>event</code>代表自定义事件名称，参数<code>val</code>代表通过自定义事件传递的值，注意这里的<code>val</code>是可选参数。</p><p>子组件传值给父组件的时候，事件触发及接收原则是：谁触发的监听谁接收。</p><h1 id="兄弟组件通信"><a href="#兄弟组件通信" class="headerlink" title="兄弟组件通信"></a>兄弟组件通信</h1><p>兄弟组件间的传值最容易想到的解决方案是通过共同的父组件进行中转。其中一个场景是组件1中的某个数量需要在组件2中同步展示。本质上是<code>props</code>和<code>$emit</code>综合使用。</p><h1 id="slot分发内容"><a href="#slot分发内容" class="headerlink" title="slot分发内容"></a>slot分发内容</h1><p><code>slot</code>的官方定义是用于组件内容分发，简单通俗的解释就是在组件化开发中，虽然组件是一样的，但是在不同的使用场景，组件的某一部分需要有不同的内容显示。</p><h2 id="匿名slot"><a href="#匿名slot" class="headerlink" title="匿名slot"></a>匿名slot</h2><p>匿名<code>slot</code>就是没有名字的插槽，特点是可以放任何内容。</p><h2 id="具名slot"><a href="#具名slot" class="headerlink" title="具名slot"></a>具名slot</h2><p>具名<code>slot</code>可以用一个特殊属性<code>name</code>来配置如何分发内容，多个<code>slot</code>可以有不同的名字，具名<code>slot</code>将匹配内容片段中有对应<code>slot</code>特性的元素。</p><h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><p>既然使用<code>methods</code>就可以实现，为什么还需要计算属性呢？原因就是计算属性是基于它的依赖缓存的，一个计算属性所依赖的数据发生变化，它才会重新取值，所以<code>massage</code>只要不改变，计算属性就不更新。但是<code>methods</code>不同，只要重新渲染，它就会被调用，函数就会被执行。</p><p>究竟是使用计算属性还是<code>methods</code>取决于是否需要缓存，当遍历大数组和计算量很大时，应当使用计算属性，除非不希望得到缓存。</p><h1 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h1><p><code>Vue.js</code>提供了一种更通用的方式<code>watch</code>来观察和响应<code>Vue</code>实例上的数据变动，称为侦听器。</p><h1 id="异步更新队列"><a href="#异步更新队列" class="headerlink" title="异步更新队列"></a>异步更新队列</h1><p><code>Vue</code>在观察到数据变化时并不是直接更新<code>DOM</code>，而是开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。在缓冲时会去除重复数据，从而避免不必要的计算和<code>DOM</code>操作。然后在下一个事件循环<code>tick</code>中，<code>Vue</code>刷新队列并执行实际（已去重的）工作。</p><p><code>$nextTick</code>就是用来知道什么时候<code>DOM</code>更新完成的。</p><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><p>自定义指令的选项是由几个钩子函数组成的，每个都是可选的。</p><ul><li><code>bind</code>：只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。</li><li><code>inserted</code>：被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于<code>document</code>中）。</li><li><code>update</code>：被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新。</li><li><code>componentUpdated</code>：被绑定元素所在模板完成一次更新周期时调用。</li><li><code>unbind</code>：只调用一次，指令与元素解绑时调用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux+API制作meme generator</title>
      <link href="/2019/05/14/%E6%8A%80%E6%9C%AF/React/Redux%E5%88%B6%E4%BD%9CmemeGenerator/"/>
      <url>/2019/05/14/%E6%8A%80%E6%9C%AF/React/Redux%E5%88%B6%E4%BD%9CmemeGenerator/</url>
      
        <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>新建项目<code>create-react-app redux-meme-generator</code></p><p>安装插件<code>npm i -S redux react-redux redux-thunk react-bootstrap</code></p><span id="more"></span><h1 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h1><p>运行项目<code>npm run start</code>，清空<code>src</code>下的文件，建立<code>index.js</code>，引入<code>react</code>和<code>react-dom</code>。并在<code>src</code>下新建<code>component</code>、<code>actions</code>、<code>reducer</code>文件夹。</p><p><strong>src&#x2F;index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./component/App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;createStore, applyMiddleware&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">&#x27;./reducer&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Provider</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;fetchMemes&#125; <span class="keyword">from</span> <span class="string">&quot;./actions&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(rootReducer, <span class="title function_">applyMiddleware</span>(thunk));</span><br><span class="line">store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;store&#x27;</span>, store.<span class="title function_">getState</span>()));</span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">fetchMemes</span>());</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">  , <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure><p><strong>component&#x2F;App.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to the Meme Generator!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapStateToProps</span>(<span class="params">state</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps, <span class="literal">null</span>)(<span class="title class_">App</span>);</span><br></pre></td></tr></table></figure><p>通过以上代码就可以有权限从<code>component</code>通过<code>store</code>取得<code>memes</code>，现在可以进行UI操作。</p><p>环境设置完毕。</p><h1 id="Fetch-Memes-Asyncchronously"><a href="#Fetch-Memes-Asyncchronously" class="headerlink" title="Fetch Memes Asyncchronously"></a>Fetch Memes Asyncchronously</h1><p>在串接API时需要登录账号密码，我们将这组账号密码封装成一个<code>action</code>。</p><p><strong>src&#x2F;actions&#x2F;secrets.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> username = <span class="string">&#x27;AnnieTsai&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> password = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; username, password &#125;;</span><br></pre></td></tr></table></figure><p>但我们不想在项目公开时，被其他人看到我们的账号密码。因此可以到<code>.gitignore</code>里将这个<code>action</code>的路径写上<code>src/actions/secrets.js</code>，就不会发布出去。</p><p><strong>actions&#x2F;index.js</strong>，编写从<code>json</code>获取<code>memes</code>的逻辑。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">RECRIVE_MEMES</span> = <span class="string">&#x27;RESEIVE_MEMES&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">receiveMemes</span>(<span class="params">json</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;memes&#125; = json.<span class="property">data</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="variable constant_">RECRIVE_MEMES</span>,</span><br><span class="line">    memes</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchMemesJson</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.imgflip.com/get_memes&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">fetchMemes</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">dispatch</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetchMemesJson</span>()</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">json</span> =&gt;</span> <span class="title function_">dispatch</span>(<span class="title function_">receiveMemes</span>(json)))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过<code>fetch</code>来获得所需要的内容。</p><blockquote><p>Fetch API提供了一个JavaScript接口，用于访问和操作HTTP管道的部分，例如请求和响应。它还提供了一个全局<code>fetch()</code>方法，该方法提供了一种简单、合乎逻辑的方式来跨网络异步获取资源。</p></blockquote><h1 id="套用thunk-middileware"><a href="#套用thunk-middileware" class="headerlink" title="套用thunk middileware"></a>套用thunk middileware</h1><p><strong>reducer&#x2F;index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;combineReducers&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">RECRIVE_MEMES</span>&#125; <span class="keyword">from</span> <span class="string">&quot;../actions&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">memes</span>(<span class="params">state = [], action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">RECRIVE_MEMES</span>:</span><br><span class="line">      <span class="keyword">return</span> action.<span class="property">memes</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootReducer = <span class="title function_">combineReducers</span>(&#123;memes&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer;</span><br></pre></td></tr></table></figure><h1 id="Listing-memes"><a href="#Listing-memes" class="headerlink" title="Listing memes"></a>Listing memes</h1><p>我们可以借由<code>meme name</code>来区分每一个<code>component</code>，每一个<code>meme</code>对象都有<code>name</code>属性值，让它们能够被识别。另外，我们也需要加上<code>key</code>来判别每个对象的唯一性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome to the Meme Generator!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">memes</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">meme, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;meme.name&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="Load-more"><a href="#Load-more" class="headerlink" title="Load more"></a>Load more</h1><p>当一个页面有大量的资料时，我们就会进行分页或是浓缩的动作。</p><p>通过<code>constructor</code>建立一个设定显示数量的<code>state</code>。</p><p><strong>src&#x2F;component&#x2F;App.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">super</span>();</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">    <span class="attr">memeLimit</span>: <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript的<code>slice()</code>让我们可以从某个字符串<code>string.slice()</code>或数组<code>Array.slice()</code>提取某一段信息。在渲染的地方加上：<code>slice(0,this,state,memeLimit)</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">memes</span>.<span class="title function_">slice</span>(<span class="number">3</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">memeLimit</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">meme,index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//设置为3，该从第4个开始提取，只会显示后面7个</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;meme.name&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>接下来我要制作一个按钮，让使用者可以点击<code>load more</code>，就可以显示更多<code>memes</code>。当使用者点击这个按钮时，便更新<code>state</code>，把<code>memeLimit</code>再加上10。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">memeLimit</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">memeLimit</span>+<span class="number">10</span>&#125;)</span><br><span class="line">&#125;&#125;&gt;<span class="title class_">Load</span> <span class="number">10</span> more memes...&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="create-meme-items"><a href="#create-meme-items" class="headerlink" title="create meme items"></a>create meme items</h1><p>现在把图片呈现出来</p><p><strong>component&#x2F;MemeItem.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MemeItem</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">src</span>=<span class="string">&#123;this.props.meme.url&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">alt</span>=<span class="string">&#123;this.props.meme.name&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;this.props.meme.name&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MemeItem</span>;</span><br></pre></td></tr></table></figure><p>在<code>App.js</code>引入<code>MemeItem.js</code>，并在原本渲染呈现<code>meme name</code>的地方</p><p>转换成<code>MemeItem</code>component tag</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">MemeItem</span> key=&#123;index&#125; meme=&#123;meme&#125; /&gt;</span><br></pre></td></tr></table></figure><h1 id="Animating-Memes-Items"><a href="#Animating-Memes-Items" class="headerlink" title="Animating Memes Items"></a>Animating Memes Items</h1><p>要实现鼠标移动图片之上有动画，可以通过<code>css</code>的<code>hover</code>，我们可以通过<code>setState</code>不断地更新<code>hover</code>的状态。在<code>MemeItem</code>component中设置<code>constructor</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">super</span>();</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">    <span class="attr">hovered</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React生命周期</title>
      <link href="/2019/05/13/%E6%8A%80%E6%9C%AF/React/React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2019/05/13/%E6%8A%80%E6%9C%AF/React/React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="React-component-lifecycle-生命周期"><a href="#React-component-lifecycle-生命周期" class="headerlink" title="React component lifecycle 生命周期"></a>React component lifecycle 生命周期</h1><p><code>React</code>的生命周期是<code>component</code>在建立和渲染的过程，以<code>component class</code>出发，<code>React</code>会做以下的过程：</p><span id="more"></span><p>依照<code>component</code>被挂入DOM的过程分类，过程中会依序执行<code>component</code>的函数如下：</p><ul><li><p><code>Mounting</code>：<code>component</code>被建立实体（即<code>react element</code>）后，渲染到DOM的过程：</p><ol><li><code>constructor()</code></li><li><code>static getDerivedStateFromProps()</code></li><li><code>render()</code></li><li><code>componentDidMount()</code></li></ol></li><li><p><code>Updating</code>：当<code>component</code>收到新的<code>props</code>时，更新状态（<code>state</code>），再重新渲染到DOM的过程：</p><ol><li><code>static getDerivedStateFromProps()</code></li><li><code>shouldComponentUpdate()</code></li><li><code>render()</code></li><li><code>getSnapshotBeforeUpdate()</code></li><li><code>componentDidUpdate()</code></li></ol></li><li><p><code>Unmounting</code>：当<code>component</code>不被使用，从DOM移除的过程</p><ol><li><code>componentWillUnmounted()</code></li></ol></li><li><p><code>Error Handling</code>：当<code>component</code>错误发生时</p><ol><li><code>componentDidCatch()</code></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端插件库</title>
      <link href="/2019/05/12/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%8F%92%E4%BB%B6%E5%BA%93/"/>
      <url>/2019/05/12/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%8F%92%E4%BB%B6%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="前端插件库"><a href="#前端插件库" class="headerlink" title="前端插件库"></a>前端插件库</h1><h2 id="DataTables"><a href="#DataTables" class="headerlink" title="DataTables"></a>DataTables</h2><p>官网：<a href="https://www.datatables.net/">https://www.datatables.net/</a></p><p>DataTables是jQuery的JavaScript函数库，目的是强化表格操作（如搜索、排序），并自动加入组件引入表格中，使用非常灵活简便。</p><span id="more"></span><p><img src="http://night.myweb.hinet.net/pic/it2018/day1_1.gif"></p><h2 id="LazyLoad"><a href="#LazyLoad" class="headerlink" title="LazyLoad"></a>LazyLoad</h2><p>官网：<a href="https://github.com/tuupola/lazyload">Lazy Load</a><br>延伸：<a href="https://appelsiini.net/projects/lazyload/">Vanilla JavaScript Lazy Load Plugin</a></p><p>Lazy Load帮助高度较长的网页进行延迟载入图片，尚未浏览到该部分时，不会载入视角外的图片，提高效率。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day2_1.gif"></p><h2 id="lightSlider"><a href="#lightSlider" class="headerlink" title="lightSlider"></a>lightSlider</h2><p>官网：<a href="https://sachinchoolur.github.io/lightslider/index.html">JQuery lightSlider</a><br>Github：<a href="https://github.com/sachinchoolur/lightslider">sachinchoolur&#x2F;lightslider</a></p><p>JQuery lightSlider是一个轻量且响应式的跑马灯&#x2F;幻灯片，附有缩图导览。另外还有相本功能、垂直跑马灯，应用层面广泛。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day3_1.gif"></p><h2 id="alertify-js"><a href="#alertify-js" class="headerlink" title="alertify.js"></a>alertify.js</h2><p>官网：<a href="https://fabien-d.github.io/alertify.js/">https://fabien-d.github.io/alertify.js/</a><br>Github：<a href="https://github.com/fabien-d/alertify.js">alertify.js</a></p><p>alertify.js是为了美化通知信息而生的JavaScript框架。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day4_1.gif"></p><h2 id="pickadate-js-日期-时间选择器"><a href="#pickadate-js-日期-时间选择器" class="headerlink" title="pickadate.js-日期&#x2F;时间选择器"></a>pickadate.js-日期&#x2F;时间选择器</h2><p>官网：<a href="https://amsul.ca/pickadate.js/">pickadate.js</a></p><p><img src="http://night.myweb.hinet.net/pic/it2018/day5_1.gif"></p><h2 id="chosen"><a href="#chosen" class="headerlink" title="chosen"></a>chosen</h2><p>官网：<a href="https://harvesthq.github.io/chosen/">Chosen</a><br>Github：<a href="https://github.com/harvesthq/chosen">chosen</a></p><p>Chosen是一个jQuery的插件，目的是让又长又笨重的下拉式选单变得更友善。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day6_1.gif"></p><h2 id="typeahead-js"><a href="#typeahead-js" class="headerlink" title="typeahead.js"></a>typeahead.js</h2><p>Github：<a href="https://github.com/twitter/typeahead.js">typeahead.js</a></p><p>由Twitter推出，灵活扎实的建议列表函数库。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day7_1.gif"></p><h2 id="textillate-js"><a href="#textillate-js" class="headerlink" title="textillate.js"></a>textillate.js</h2><p>官网：<a href="http://textillate.js.org/">textillate.js</a><br>Github：<a href="https://github.com/jschr/textillate">jschr&#x2F;textillate</a></p><p>textillate.js结合了很多很棒的函数库，简单应用CSS3动画特效。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day8_1.gif"></p><h2 id="Chart-js"><a href="#Chart-js" class="headerlink" title="Chart.js"></a>Chart.js</h2><p>官网：<a href="https://www.chartjs.org/">Chart.js</a></p><p>对设计师或开发人员，浅显易懂的JavaScript图标应用。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day9_1.gif"></p><h2 id="highlight-js"><a href="#highlight-js" class="headerlink" title="highlight.js"></a>highlight.js</h2><p>官网：<a href="https://highlightjs.org/">highlight.js</a><br>Github：<a href="https://github.com/highlightjs/highlight.js">highlight.js</a></p><p>针对Web程序所做的高亮显示上色。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day10_1.gif"></p><h2 id="jquery-loading"><a href="#jquery-loading" class="headerlink" title="jquery-loading"></a>jquery-loading</h2><p>官网：<a href="https://carlosbonetti.github.io/jquery-loading/">jquery-loading</a></p><p>起源于为了在读取或运行中，锁住特定对象，并同时保持让浏览者可以操作页面的其他部分。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day11_1.gif"></p><h2 id="jquery-validation"><a href="#jquery-validation" class="headerlink" title="jquery-validation"></a>jquery-validation</h2><p>官网：<a href="https://jqueryvalidation.org/">jQuery Validation</a><br>Github：<a href="https://github.com/jquery-validation/jquery-validation">jquery-validation</a></p><p>jQuery Validation插件让用户端检查表单变得更容易，并提供大量的定制化设定，无论导入新开发或是现有的项目都是很好的选择。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day12_1.gif"></p><h2 id="Moment-js"><a href="#Moment-js" class="headerlink" title="Moment.js"></a>Moment.js</h2><p>官网：<a href="https://momentjs.com/">Moment.js</a></p><p>轻量级专门解析、验证、操作、格式化日期的JavaScript函数库，Moment.js是为浏览器和Node.js而设计，所有组件都可以在这两个环境下运行。</p><h2 id="Animate-css"><a href="#Animate-css" class="headerlink" title="Animate.css"></a>Animate.css</h2><p>官网：<a href="https://daneden.github.io/animate.css/">Animate.css</a></p><p>纯CSS，无需JavaScript，支持多浏览器的动画特效，即插即用。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day14_1.gif"></p><h2 id="Ace"><a href="#Ace" class="headerlink" title="Ace"></a>Ace</h2><p>官网：<a href="https://ace.c9.io/">Ace</a></p><p>Ace是透过JavaScript所开发的线上程序语言编辑器插件，无论功能和性能都类似一般编辑器（Sublime、Vim和TextMate等），导入进任何网页或JavaScript应用程序都相当容易。值得一提的是Ace是由Cloud9 IDE的团队维护，并且是Mozilla Skywriter（Bespin）项目的延伸品，品质值得信赖。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day15_1.gif"></p><h2 id="PDF-js-js"><a href="#PDF-js-js" class="headerlink" title="PDF.js.js"></a>PDF.js.js</h2><p>官网：<a href="https://mozilla.github.io/pdf.js/">PDF.js</a></p><p>PDF.js是一个由HTML构建的PDF阅读器，由Mozilla Labs所推广，目标是建立一个通用的PDF平台。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day16_1.gif"></p><h2 id="reveal-js-网页变简报"><a href="#reveal-js-网页变简报" class="headerlink" title="reveal.js-网页变简报"></a>reveal.js-网页变简报</h2><p>官网：<a href="https://revealjs.com/#/">REVEAL.JS</a></p><p><img src="http://night.myweb.hinet.net/pic/it2018/day17_1.gif"></p><h2 id="Intro-js-网站导航"><a href="#Intro-js-网站导航" class="headerlink" title="Intro.js-网站导航"></a>Intro.js-网站导航</h2><p>官网：<a href="https://introjs.com/">Intro.js</a></p><p>优化网站的导航功能，提供步骤指南给浏览者，强化网站的用户体验。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day18_1.gif"></p><h2 id="Fine-Uploader-拖拽上传"><a href="#Fine-Uploader-拖拽上传" class="headerlink" title="Fine Uploader-拖拽上传"></a>Fine Uploader-拖拽上传</h2><p>官网：<a href="https://fineuploader.com/">fine-uploader</a><br>Github：<a href="https://github.com/FineUploader/fine-uploader">fine-uploader</a></p><p>导入拖拽上传档案，跨浏览器、原生JavaScript又加上免费开源，只要载入JavaScript就可以开始运行，不依赖其他程序。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day19_1.gif"></p><h2 id="parallax-js"><a href="#parallax-js" class="headerlink" title="parallax.js"></a>parallax.js</h2><p>官网：<a href="http://matthew.wagerfield.com/parallax/">parallax.js</a><br>Github：<a href="https://github.com/wagerfield/parallax">wagerfield&#x2F;parallax</a></p><p>对任何设备，兼容性高的视差引擎。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day20_1.gif"></p><h2 id="Hover-css"><a href="#Hover-css" class="headerlink" title="Hover.css"></a>Hover.css</h2><p>官网：<a href="https://ianlunn.github.io/Hover/">Hover.css</a><br>Github：<a href="https://github.com/IanLunn/Hover/">IanLunn&#x2F;Hover</a></p><p>多项针对链接、按钮、Logo、SVG和图片的移入CSS3特效。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day21_1.gif"></p><h2 id="iscroll"><a href="#iscroll" class="headerlink" title="iscroll"></a>iscroll</h2><p>Github：<a href="https://github.com/cubiq/iscroll">cubiq&#x2F;iscroll</a></p><p>iScroll是一款高性能、文件小、无依赖且多平台的JavaScript拖拽滑动库。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day22_1.gif"></p><h2 id="Toolbar-js"><a href="#Toolbar-js" class="headerlink" title="Toolbar.js"></a>Toolbar.js</h2><p>官网：<a href="https://paulkinzett.github.io/toolbar/">Toolbar.Js</a><br>Github：<a href="https://github.com/paulkinzett/toolbar">paulkinzett&#x2F;toolbar</a></p><p>一个产生工具列的jQuery插件。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day23_1.gif"></p><h2 id="nanoScroller-js"><a href="#nanoScroller-js" class="headerlink" title="nanoScroller.js"></a>nanoScroller.js</h2><p>Github：<a href="https://github.com/jamesflorentino/nanoScrollerJS">nanoScrollerJS</a></p><p>nanoScroller.js是一个用简单方法做出类似Mac OS X风格卷轴的jQuery插件，尽管目前没有在持续维护，但使用上相当简单且支持度高仍然是不错的选择。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day24_1.gif"></p><h2 id="iCheck"><a href="#iCheck" class="headerlink" title="iCheck"></a>iCheck</h2><p>官网：<a href="http://icheck.fronteed.com/">iCheck</a><br>Github：<a href="https://github.com/fronteed/iCheck">icheck</a></p><p>专为jQuery和Zepto做的高弹性定制化<code>checkbox</code>和<code>radio</code>按钮的插件。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day25_1.gif"></p><h2 id="KUTE-js"><a href="#KUTE-js" class="headerlink" title="KUTE.js"></a>KUTE.js</h2><p>官网：<a href="https://thednp.github.io/kute.js/">KUTE.js</a><br>Github：<a href="https://github.com/thednp/kute.js">kute.js</a></p><p>一个成熟的原生的JavaScript动画引擎，提供给网站开发者、设计师、动画师相当多基本的功能，浅显易懂的操作方式，跨浏览器动画，拥有着高质量、灵活、专业且轻量（主要核心只需要17K）。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day26_1.gif"></p><h2 id="Timeline-js"><a href="#Timeline-js" class="headerlink" title="Timeline.js"></a>Timeline.js</h2><p>官网：<a href="https://ilkeryilmaz.github.io/timelinejs/">Timeline.js</a></p><p>jQuery时间轴插件，使用简单是它的优点。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day27_1.gif"></p><h2 id="Muuri-js"><a href="#Muuri-js" class="headerlink" title="Muuri.js"></a>Muuri.js</h2><p>官网：<a href="https://haltu.github.io/muuri/">Muuri</a></p><p>Muuri是一个JavaScript Layout引擎，让你可以构建多样化的Layout，并具有响应式、可排序、可过滤、拖拽移动或动画效果。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day28_1.gif"></p><h2 id="Algolia-Places"><a href="#Algolia-Places" class="headerlink" title="Algolia Places"></a>Algolia Places</h2><p>官网：<a href="https://community.algolia.com/places/">Algolia Places</a></p><p>Algolia Places为您的网站提供一个快速、简单的方式，自动化产生地址建议列表的JavaScript函数库。</p><h2 id="lightgallery-js"><a href="#lightgallery-js" class="headerlink" title="lightgallery.js"></a>lightgallery.js</h2><p>官网：<a href="https://sachinchoolur.github.io/lightgallery.js/">lightgallery.js</a><br>Github：<a href="https://github.com/sachinchoolur/lightGallery">lightGallery</a></p><p>一个弹性高、组件化且响应式的灯箱jQuery插件。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day30_1.gif"></p><h2 id="Tabslet"><a href="#Tabslet" class="headerlink" title="Tabslet"></a>Tabslet</h2><p>官网：<a href="https://vdw.github.io/Tabslet/">Tabslet</a><br>Github：<a href="https://github.com/vdw/Tabslet">Tabslet</a></p><p>一个用于页签的jQuery插件，轻量级且操作容易。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day31_1.gif"></p><h2 id="Masonry-js"><a href="#Masonry-js" class="headerlink" title="Masonry.js"></a>Masonry.js</h2><p>官网：<a href="https://masonry.desandro.com/">Masonry</a></p><p>Masonry常用于瀑布流布局的插件。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day32_1.gif"></p><h2 id="Slidebars"><a href="#Slidebars" class="headerlink" title="Slidebars"></a>Slidebars</h2><p>官网：<a href="https://www.adchsm.com/slidebars/">Slidebars</a><br>Github：<a href="https://github.com/adchsm/Slidebars">Slidebars</a></p><p>Slidebars是一个jQuery框架，提供网站或网站应用程序侧边栏选单。</p><h2 id="three-js"><a href="#three-js" class="headerlink" title="three.js"></a>three.js</h2><p>官网：<a href="https://threejs.org/">three.js</a><br>Github：<a href="https://github.com/mrdoob/three.js">three.js</a></p><p>易于使用且轻量级3D函数库，提供<code>canvas</code>、<code>SVG</code>、<code>CSS3 3D</code>和<code>WebGL</code>渲染器。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day34_1.gif"></p><h2 id="Videos-js-HTML5视频播放器"><a href="#Videos-js-HTML5视频播放器" class="headerlink" title="Videos.js-HTML5视频播放器"></a>Videos.js-HTML5视频播放器</h2><p>官网：<a href="https://videojs.com/">Video.js: The Player Framework</a><br>Github：<a href="https://github.com/videojs/video.js">video.js</a></p><p>Video.js是随着HTML5的来袭所打造的媒体播放器，支持HTML5和Flash视频，支持PC和移动设备。这个项目从2010年开始，现在已经有超过40万的网站使用它。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day35_1.gif"></p><h2 id="Leaflet-js"><a href="#Leaflet-js" class="headerlink" title="Leaflet.js"></a>Leaflet.js</h2><p>官网：<a href="https://leafletjs.com/">Leaflet</a><br>Github：<a href="https://github.com/Leaflet/Leaflet">Leaflet</a></p><p>Leaflet是一个对移动设备友善的互动地图并且开源的JavaScript函数库，总大小只有38KB，却有着大多数开发人员想要的需要。简单、专业、实用并且跨平台可以有效率地在PC和移动设备上，并且有大量的插件可以扩展，有着华丽却简单使用的API，很易学且阅读性高的源码。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day36_1.gif"></p><h2 id="Sortable"><a href="#Sortable" class="headerlink" title="Sortable"></a>Sortable</h2><p>官网：<a href="https://sortablejs.github.io/Sortable/">SortableJS</a></p><p>Sortable可以对HTML对象做拖拽移动清单的JavaScript函数库，支持移动设备且不依赖jQuery等其他第三方，并兼容Bootstrap等CSS框架。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day37_1.gif"></p><h2 id="clipboard-js"><a href="#clipboard-js" class="headerlink" title="clipboard.js"></a>clipboard.js</h2><p>官网：<a href="https://clipboardjs.com/">clipboard.js</a><br>Github：<a href="https://github.com/zenorocha/clipboard.js">clipboard.js</a></p><p>复制内容到剪切板的小工具，不依赖Flash，大小只要3KB。</p><h2 id="howler-js"><a href="#howler-js" class="headerlink" title="howler.js"></a>howler.js</h2><p>官网：<a href="https://howlerjs.com/">howler.js</a></p><p>howler.js是针对当下网站的一个音频播放函数库，预设为Web Audio API和HTML5 Audio，可以透过JavaScript播放声音变得更简单，并且跨平台。</p><h2 id="p5-js-绘画插件"><a href="#p5-js-绘画插件" class="headerlink" title="p5.js-绘画插件"></a>p5.js-绘画插件</h2><p>官网：<a href="https://p5js.org/zh-Hans/">p5.js</a><br>Github：<a href="https://github.com/processing/p5.js">processing&#x2F;p5.js</a></p><p>p5.js是一个JavaScript函数库，有完整的绘画功能，并不局限在画布上，你可以把整个浏览器当做你的草稿，另外有插件可以让你更容易去做HTML5互动，加入文字栏、影片、视频或音频等功能。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day40_1.gif"></p><h2 id="fullPage-js-全页式导航"><a href="#fullPage-js-全页式导航" class="headerlink" title="fullPage.js-全页式导航"></a>fullPage.js-全页式导航</h2><p>官网：<a href="https://alvarotrigo.com/fullPage/zh/">fullPage.js</a><br>Github：<a href="https://github.com/alvarotrigo/fullPage.js">fullPage.js</a></p><p><img src="http://night.myweb.hinet.net/pic/it2018/day41_1.gif"></p><h2 id="store-js"><a href="#store-js" class="headerlink" title="store.js"></a>store.js</h2><p>Github：<a href="https://github.com/marcuswestin/store.js">store.js</a></p><p>针对任何项目都可以做的跨浏览器的数据存取，全站都可以运行，浏览器支持度高，小项目不想导入大型框架的不错选择。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day42_1.gif"></p><h2 id="fullcalendar"><a href="#fullcalendar" class="headerlink" title="fullcalendar"></a>fullcalendar</h2><p>官网：<a href="https://fullcalendar.io/">JavaScript Calendar</a><br>Github：<a href="https://github.com/fullcalendar/fullcalendar">fullcalendar</a></p><p>设计一个满版且可拖拽事件的行程日历。Bootstrap的排版风格，可读入JSON格式数据，安装容易、支持响应式排版。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day43_1.gif"></p><h2 id="Headroom-js"><a href="#Headroom-js" class="headerlink" title="Headroom.js"></a>Headroom.js</h2><p>官网：<a href="http://wicky.nillia.ms/headroom.js/">Headroom.js</a></p><p>把网站空间发挥到极限，不需要导航列表是隐藏，需要时出现。搭配Animation.css可以让画面更活泼，另外也支持jQuery或Angular。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day44_1.gif"></p><h2 id="ScrollToFixed"><a href="#ScrollToFixed" class="headerlink" title="ScrollToFixed"></a>ScrollToFixed</h2><p>官网：<a href="https://bigspotteddog.github.io/ScrollToFixed/">ScrollToFixed</a></p><p>ScrollToFixed能够让网页的导航或表头等固定在顶部或底部，用户更方便的操作或查看信息。除了导航和表头，也可以固定其他内容，比如广告、返回顶部等。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day45_1.gif"></p><h2 id="Handlebars-js"><a href="#Handlebars-js" class="headerlink" title="Handlebars.js"></a>Handlebars.js</h2><p>官网：<a href="http://handlebarsjs.com/">Handlebars.js</a><br>Github：<a href="https://github.com/wycats/handlebars.js">handlebars.js</a></p><p>Handlebars主要是让你在做语义化模板时更有效率、且不容易受挫，并且兼容Mustache模板，大多数可以直接互换使用。</p><h2 id="faker-js"><a href="#faker-js" class="headerlink" title="faker.js"></a>faker.js</h2><p>Github：<a href="https://github.com/Marak/Faker.js">faker.js</a></p><p>faker.js可以在浏览器或Node.js产生大量的假数据。测试时期相当方便的东西，也可以透过Google Extension来运行。</p><h2 id="TinyMCE-HTML编辑器"><a href="#TinyMCE-HTML编辑器" class="headerlink" title="TinyMCE-HTML编辑器"></a>TinyMCE-HTML编辑器</h2><p>官网：<a href="https://www.tiny.cloud/">TinyMCE</a><br>Github：<a href="https://github.com/tinymce/tinymce">tinymce</a></p><p>TinyMCE是功能齐全且轻量级的HTML编辑器，但需要在IE11以上才可以运行。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day48_1.gif"></p><h2 id="List-js-资料排序"><a href="#List-js-资料排序" class="headerlink" title="List.js-资料排序"></a>List.js-资料排序</h2><p>官网：<a href="https://listjs.com/">List.js</a><br>Github：<a href="https://github.com/javve/list.js">list.js</a></p><p>List.js对表格、清单、各式各样的对象，增加搜索、排序、过滤和灵活性，无形地建立在HTML内，极简易也易于使用。即便周边不如DataTables，但不依赖jQuery及大小仅Datatables的1&#x2F;4（压缩后17KB），以及对IE的高兼容性和不止对<code>&lt;table&gt;</code>，对<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>或是其他HTML元素的支持，都是<code>List.js</code>不容忽视的优势之一。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day49_1.gif"></p><h2 id="Swiper"><a href="#Swiper" class="headerlink" title="Swiper"></a>Swiper</h2><p>官网：Swiper<br>Github：Swiper</p><p>Swiper是当下王铮的幻灯片&#x2F;跑马灯插件，使用效能高，并可运用在移动设备上及混合式App上，不但在最新版本的IOS上运行良好，在Android、Windows Phone 8和PC设备上一样表现优秀。要注意的是，Swiper并不兼容所有平台设备，而是专注于当下主流平台设备的兼容性和效能上。同时Swiper也是<a href="http://www.framework7.cn/">Framework7</a>和<a href="https://ionicframework.com/">Ionic Framework</a>的组件的一部分。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day50_2.gif"></p><h2 id="toastr"><a href="#toastr" class="headerlink" title="toastr"></a>toastr</h2><p>官网：<a href="https://codeseven.github.io/toastr/">Toastr</a></p><p>toastr是一个提示信息JavaScript函数库，必须载入jQuery，宗旨是利用简单的程序函数库来做定制化跟扩展。toastr提供一个范例页面<a href="https://codeseven.github.io/toastr/demo.html">toastr examples</a>，方便自订效果跟产生源码，类似<a href="https://getbootstrap.com/docs/3.4/customize/">Customize and download · Bootstrap</a>的效果，方便使用者加快流程，先前介绍的<a href="https://alertifyjs.com/">ALERTIFY JS</a>整体层面比toastr好很多，无论原生JavaScript以及整体文件大小和功能延展性，但toastr简单使用的操作模式，如果有旧项目是在jQuery的环境下，要做一些定制化功能，或许就是不错的选择。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day51_1.gif"></p><h2 id="goodshare-js-极简动画绘制"><a href="#goodshare-js-极简动画绘制" class="headerlink" title="goodshare.js-极简动画绘制"></a>goodshare.js-极简动画绘制</h2><p>官网：<a href="https://soulwire.github.io/sketch.js/">Sketch.js</a></p><p><img src="http://night.myweb.hinet.net/pic/it2018/day53_1.gif"></p><h2 id="Quill"><a href="#Quill" class="headerlink" title="Quill"></a>Quill</h2><p>官网：<a href="https://quilljs.com/">Quill</a><br>Github：<a href="https://github.com/quilljs/quill">Quill</a></p><p>Quill是当下高兼容性、强大、丰富且具有扩展性的文字编辑器。对于移动设备的支持度高。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day54_1.gif"></p><h2 id="Shave-截断文字"><a href="#Shave-截断文字" class="headerlink" title="Shave-截断文字"></a>Shave-截断文字</h2><p>官网：<a href="https://dollarshaveclub.github.io/shave/">Shave</a></p><p>Shave根据内容的最大高度将文字截断，是一个没有任何依赖性的JavaScript插件。并将多出的文字藏在<code>span</code>后面，保留原文的完整性。CSS本身通过<code>text-overflow</code>也有类似的功能（<a href="https://css-tricks.com/snippets/css/truncate-string-with-ellipsis/">Truncate String with Ellipsis</a>），但需要设定宽度，如果需要不能固定宽度的项目，Shave应该是一个不错的选择。</p><h2 id="Tabulator"><a href="#Tabulator" class="headerlink" title="Tabulator"></a>Tabulator</h2><p>官网：<a href="http://tabulator.info/">Tabulator</a></p><p>Tabulator是相当容易操作的表格内容产生器，只需要花很少的时间就可以通过把数组或JSON格式的资料生成HTML界面的表格。并且支持响应式网页，以及运用其他插件做成对象产生资料图表。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day56_1.gif"></p><h2 id="ScrollReveal-动态显示内容"><a href="#ScrollReveal-动态显示内容" class="headerlink" title="ScrollReveal-动态显示内容"></a>ScrollReveal-动态显示内容</h2><p>官网：<a href="https://scrollrevealjs.org/">ScrollReveal</a></p><p><img src="http://night.myweb.hinet.net/pic/it2018/day57_1.gif"></p><h2 id="datedropper"><a href="#datedropper" class="headerlink" title="datedropper"></a>datedropper</h2><p>官网：<a href="https://felicegattuso.com/datedropper/">datedropper</a><br>Github：<a href="https://github.com/felicegattuso/datedropper">datedropper</a></p><p>datedropper是微型但功能强大的jQuery时间选择器。内建风格相当活泼可爱，可增加网站的活力。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day58_1.gif"></p><h2 id="Cleave-js-表单栏位格式化工具"><a href="#Cleave-js-表单栏位格式化工具" class="headerlink" title="Cleave.js-表单栏位格式化工具"></a>Cleave.js-表单栏位格式化工具</h2><p>官网：<a href="https://nosir.github.io/cleave.js/">Cleave.js</a></p><p><img src="http://night.myweb.hinet.net/pic/it2018/day59_1.gif"></p><h2 id="Infinite-Scroll"><a href="#Infinite-Scroll" class="headerlink" title="Infinite Scroll"></a>Infinite Scroll</h2><p>官网：<a href="https://infinite-scroll.com/">Infinite Scroll</a></p><p>Infinite Scroll是jQuery一个用来实现无限滚动的插件。</p><p><img src="http://night.myweb.hinet.net/pic/it2018/day60_1.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS的Transition与Animation</title>
      <link href="/2019/05/08/%E6%8A%80%E6%9C%AF/CSS/CSS%E7%9A%84Transition%E4%B8%8EAnimation/"/>
      <url>/2019/05/08/%E6%8A%80%E6%9C%AF/CSS/CSS%E7%9A%84Transition%E4%B8%8EAnimation/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文总结CSS3中两个用来做动画的属性，一个是<code>transition</code>，另一个是<code>animation</code>。</p></blockquote><span id="more"></span><h1 id="差异比较"><a href="#差异比较" class="headerlink" title="差异比较"></a>差异比较</h1><table><thead><tr><th>CSS3</th><th>差异</th></tr></thead><tbody><tr><td><code>transition</code></td><td>在给定的持续时间内平滑地更改属性值（从一个值到另一个值），也就是只需要指定开始与结束的参数，参数改变时就触发动画。</td></tr><tr><td></td><td>常用语鼠标事件（<code>:hover</code>、<code>active</code>、<code>:focus</code>、<code>:click</code>）或键盘输入时触发</td></tr><tr><td></td><td>需要事件触发，无法在网页加载时自动发生。一次性，不能重复发生，除非一再触发。</td></tr><tr><td></td><td>只能定义开始状态和结束状态，不能定义中间状态。</td></tr><tr><td><code>animation</code></td><td>可以自行写动画开始、进行间、结束时各阶段的变化，适合用来做较细微的动画表现。需要明确的指定关键帧（<code>@keyframe</code>）的参数。</td></tr><tr><td></td><td>网页加载时会直接执行，可以自行控制各阶段动画的变化</td></tr></tbody></table><blockquote><p><code>animation</code>和<code>transition</code>最大的不同在于<code>transition</code>是当参数改变时触发，而<code>animation</code>则是直接就执行，所有动画效果需要明确的指定关键帧的参数。</p></blockquote><table><thead><tr><th>CSS3</th><th>简写顺序</th></tr></thead><tbody><tr><td><code>transition</code></td><td>[<code>property</code>名称][<code>duration</code>时间][<code>timing-function</code>特效][<code>delay</code>延迟]</td></tr><tr><td><code>animation</code></td><td>[<code>name</code>名称][<code>duration</code>时间][<code>timing-function</code>特效][<code>delay</code>延迟]</td></tr><tr><td></td><td>[<code>iteration-count</code>次数][<code>direction</code>方向][<code>fill-mode</code>填充模式][<code>play-state</code>播放状态]</td></tr></tbody></table><h1 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h1><h2 id="transition写法"><a href="#transition写法" class="headerlink" title="transition写法"></a>transition写法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: purple;</span><br><span class="line">  <span class="attribute">transition</span>: width <span class="number">2s</span> ease-in <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="animation写法"><a href="#animation写法" class="headerlink" title="animation写法"></a>animation写法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">animation</span>: change <span class="number">5s</span>; <span class="comment">/*8个属性中至少要有名称、时间*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设定开始与结束状态*/</span></span><br><span class="line"><span class="comment">/*from 就是0%，to 就是100%*/</span></span><br><span class="line"><span class="keyword">@keyframes</span> change &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#4BC0C8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#C779D0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">animation</span>: change <span class="number">5s</span>; <span class="comment">/*8个属性中至少要有名称、时间*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设定开始与结束状态*/</span></span><br><span class="line"><span class="comment">/*from 就是0%，to 就是100%*/</span></span><br><span class="line"><span class="keyword">@keyframes</span> change &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#4BC0C8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">20%</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#C779D0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">60%</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#FEAC5E</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">80%</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#185a9d</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#4BC0C8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>值</th></tr></thead><tbody><tr><td><code>animation-name</code></td><td><code>@keyframes</code>后的名称</td></tr><tr><td><code>animation-duration</code>时间</td><td><code>time</code>以秒计算，如<code>3s initial</code>预设值<code>inherit</code>继承父层</td></tr><tr><td><code>animation-timing-function</code>特效</td><td><code>linear</code>等速、<code>ease</code>、<code>ease-in</code>、<code>ease-out</code>、<code>ease-in-out</code>、<code>step-start</code>、<code>step-end</code>、<code>steps(int,start/end)</code>、<code>cubic-bezier(n,n,n,n)</code><a href="https://cubic-bezier.com/#.17,.67,.83,.67">可上官网取值使用</a></td></tr><tr><td><code>animation-delay</code></td><td>以秒计算，如<code>2s</code></td></tr><tr><td><code>animation-iteration-count</code>次数</td><td><code>number</code>预设值为<code>1</code>，因此填<code>2</code>时，动画跑的次数为<code>1+2=3</code>次<code>infinite</code>无限循环</td></tr><tr><td><code>animation-direction</code>方向</td><td><code>normal</code>、<code>reverse</code>反向、<code>alternate</code>先反后正</td></tr><tr><td><code>animation-fill-mode</code></td><td><code>forwards</code>使用关键帧最后的值<code>backwards</code>使用最开始的值<code>both</code></td></tr><tr><td><code>animation-play-state</code>播放状态</td><td><code>pause</code>暂停<code>running</code>为预设值<code>initial</code>预设值、<code>inherit</code>继承父层</td></tr></tbody></table><blockquote><p>GitHub：<a href="https://github.com/daneden/animate.css">Animate.css 使用说明</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery选择器</title>
      <link href="/2019/05/08/%E6%8A%80%E6%9C%AF/jQuery/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>/2019/05/08/%E6%8A%80%E6%9C%AF/jQuery/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="基本选择器-Basics"><a href="#基本选择器-Basics" class="headerlink" title="基本选择器 Basics"></a>基本选择器 Basics</h1><ul><li><code>*</code>选择所有元素</li><li><code>.class</code>选择<code>class</code>，如：<code>$(&#39;.mybox&#39;)</code></li><li><code>element</code>选择<code>element</code>，如：<code>$(&#39;p&#39;)</code></li><li><code>#id</code>选择<code>id</code>，如：<code>$(&#39;#box&#39;)</code></li><li><code>selector1,selectorN</code>可以同时选择多个元素，如：<code>$(&#39;div, p.box, #phone&#39;)</code></li></ul><span id="more"></span><h1 id="层级选择器-Hierarchy"><a href="#层级选择器-Hierarchy" class="headerlink" title="层级选择器 Hierarchy"></a>层级选择器 Hierarchy</h1><ul><li><code>parent &gt; child</code>选择指定元素下的指定子元素，如：<code>$(&#39;ul.tonav &gt; li&#39;)</code></li><li><code>ancestor descendant</code>选择一个元素里所有的后代元素，如：<code>$(&#39;form input&#39;)</code></li><li><code>prev + next</code>选择所有指定元素后紧跟着的元素，如：<code>$(&#39;label + input&#39;)</code></li><li><code>prev ~ siblings</code>选择与指定元素之后有相同父级的同级选择器，如：<code>$(&#39;#prev ~ div&#39;)</code></li></ul><h1 id="基本过滤器-Basic-Filters"><a href="#基本过滤器-Basic-Filters" class="headerlink" title="基本过滤器 Basic Filters"></a>基本过滤器 Basic Filters</h1><ul><li><code>:animated</code>选择动画进行中的所有元素。如：<code>$(&#39;div:animated)</code></li><li><code>:eq(n)</code>选取第<code>n</code>个元素，如：<code>$(&#39;ul.tonav li:eq(n)&#39;)</code></li><li><code>:even</code>选取偶数个元素，如：<code>$(&#39;li:even&#39;)</code></li><li><code>:odd</code>选取奇数个元素，如：<code>$(&#39;li.odd&#39;)</code></li><li><code>:first</code>选取奇数个元素，如：<code>$(&#39;li:first&#39;)</code></li><li><code>:gt(n)</code>选取结果集中索引大于<code>n</code>的元素，<code>n</code>可以为负值，如：<code>$(&#39;:gt(3)&#39;)</code></li><li><code>:lt(n)</code>选取结果集中索引小于<code>n</code>的元素，<code>n</code>可以为负值，如：<code>$(&#39;:lt(3)&#39;)</code></li><li><code>:header</code>选取所有的标题元素，例如<code>h1</code>、<code>h2</code>、<code>h3</code>…，如：<code>$(&#39;:header&#39;)</code></li><li><code>:lang()</code>选取指定语言的所有元素，，如：<code>$(&#39;div:lang(zh-cn)&#39;)</code></li><li><code>:last</code>选取最后一个符合的元素，如：<code>$(&#39;li:last&#39;)</code></li><li><code>:not</code>选取不符合的所有元素，如：<code>$(&#39;input:not(:checked) + span&#39;)</code></li><li><code>:root</code>选取作为文档根目录的元素</li><li><code>:target</code>选取由文档的图片、视频、音频指示的目标元素</li></ul><h1 id="内容过滤器-Content-Filters"><a href="#内容过滤器-Content-Filters" class="headerlink" title="内容过滤器 Content Filters"></a>内容过滤器 Content Filters</h1><ul><li><code>:contains()</code>选择包含指定文本的所有元素，如：<code>$(&quot;div:containers(&#39;home&#39;)&quot;)</code></li><li><code>:empty</code>选择没有子元素或内容文字的元素，如：<code>$(&quot;td:empty&quot;))</code></li><li><code>:has()</code>选择包含至少一个匹配指定选择器的元素的元素，如：<code>$(&quot;div:has(p)&quot;))</code></li><li><code>:parent</code>选择至少有一个子节点（元素或文本）的所有元素</li></ul><h1 id="可视选择器-Visibility-Filters"><a href="#可视选择器-Visibility-Filters" class="headerlink" title="可视选择器 Visibility Filters"></a>可视选择器 Visibility Filters</h1><ul><li><code>:hidden</code>选择所有隐藏的元素，如：<code>$(&quot;div:hidden&quot;).show(3000));</code></li><li><code>:visible</code>选择所有隐藏的元素，如：<br>  <code>$(&quot;div:visible&quot;).click(function() &#123;$(this).css(&quot;background&quot;, &quot;yellow&quot;);&#125;);</code></li></ul><h1 id="属性选择器-Attribute"><a href="#属性选择器-Attribute" class="headerlink" title="属性选择器 Attribute"></a>属性选择器 Attribute</h1><ul><li><p><code>[name]</code>选择具有指定属性的元素（使用任何值都可以）。如：<code>$(&quot;div[id]&quot;)</code></p></li><li><p><code>[name|=&quot;value&quot;]</code>选择具有指定属性的元素，其值等于给定的字符串，或者以该字符串开头，后跟连字符（<code>-</code>）。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;a[href=&quot;about.html&quot;]&#x27;</span>);  <span class="comment">//选择 a 链接的 href 属性包含 &#x27;about.html&#x27; 的元素</span></span><br></pre></td></tr></table></figure></li><li><p><code>[name*=&quot;value&quot;]</code>选择具有包含给定子字符串的值得指定属性的元素。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;input[name*=&quot;man&quot;]&#x27;</span>);  <span class="comment">//选择所有的 name 属性包含 &#x27;man&#x27; 的 input 元素</span></span><br></pre></td></tr></table></figure></li><li><p><code>[name~=&quot;value&quot;]</code>选择具有指定属性的元素，其中包含由空格分隔的给定单词的值。</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;man-news&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;milk man&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;letter&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;input[name~=&quot;man&quot;]&#x27;</span>);  <span class="comment">//会选择到前两个 input 元素</span></span><br></pre></td></tr></table></figure></li><li><p><code>[name$=&quot;value&quot;]</code>选择具有指定属性的元素，其值与给定字符串精确匹配，要区分大小写。如：<code>$(&quot;input[name$=&#39;letter&#39;]&quot;)</code></p></li><li><p><code>[name=&quot;value&quot;]</code>选择具有指定属性的元素，其值恰好等于特定值，如：<code>$(&quot;input[value=&#39;Hot Fuzz&#39;]&quot;)</code>会选到<code>value</code>等于<code>Hot Fuzz</code>的<code>input</code></p></li><li><p><code>[name!=&quot;value&quot;]</code>选择不具有指定属性的元素，或者具有指定苏醒但不具有特定值的元素。如：<code>$(&quot;input[name!=&#39;newsletter&#39;]&quot;)</code>，<code>name</code>属性值为<code>newsletter</code>的不选。</p></li><li><p><code>[name^=&quot;value&quot;]</code>选择具有指定属性的元素，其值与给定字符串完全一致。</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;newsletter&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;milkman&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;news&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;input[name^=&quot;news&quot;]&#x27;</span>);  <span class="comment">//会选择到第三个 input</span></span><br></pre></td></tr></table></figure></li><li><p><code>[name=&quot;value&quot;][name2=&quot;value2&quot;]</code>符合所有指定的属性过滤器的元素。如：<code>$(&quot;input[id][name$=&#39;man&#39;]&quot;)</code></p></li></ul><h1 id="子代过滤器-Child-Filters"><a href="#子代过滤器-Child-Filters" class="headerlink" title="子代过滤器 Child Filters"></a>子代过滤器 Child Filters</h1><ul><li><code>:first-child</code>选择同父代的第一个子代元素。</li><li><code>:first-of-type</code>选择同一元素名称的兄弟中的第一个元素。</li><li><code>:last-child</code>选择同父代的最后一个子代元素。</li><li><code>:last-of-type</code>选择同一元素名称的兄弟中的最后一个元素。</li><li><code>:nth-child()</code>选择同父代的第<code>n</code>个子代元素。</li><li><code>:nth-last-child()</code>选择同父代的倒数第<code>n</code>个子代元素。</li><li><code>:nth-last-of-type()</code>选择同父代的倒数第<code>n</code>个子代元素。</li><li><code>:nth-of-type()</code>选择同父代的第<code>n</code>个子代元素。</li><li><code>:only-child</code>选择只有一个子代的元素。</li><li><code>:only-of-type()</code>选择所有没有同名元素的兄弟元素。如：<code>$(&quot;div.button:only-child&quot;)</code>选择只有一个<code>button</code>的<code>div</code></li></ul><h1 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h1><ul><li><code>:button</code>选择所有按钮元素和按钮类型的元素。</li><li><code>:checkbox</code>选择所有得可取块的元素。</li><li><code>:checked</code>选择所有选中的元素。</li><li><code>:disabled</code>选择所有被禁用的元素。</li><li><code>:enabled</code>选择所有已启用的元素。</li><li><code>:focus</code>选择当下被<code>focus</code>的元素。</li><li><code>:file</code>选择<code>file</code>类型的元素。</li><li><code>:image</code>选择图像类型的所有的元素。</li><li><code>:input</code>选择所有<code>input</code>、<code>textarea</code>、<code>select</code>和<code>button</code>元素。</li><li><code>:password</code>选择所有密码类型的元素。</li><li><code>:radio</code>选择所有选项按钮的元素。</li><li><code>:reset</code>选择所有清除按钮（复位按钮）的元素。</li><li><code>:selected</code>选择所有选中的元素。</li><li><code>:submit</code>选择所有提交类型的元素。</li><li><code>:text</code>选择所有文本输入框的元素。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端优化</title>
      <link href="/2019/05/07/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/"/>
      <url>/2019/05/07/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="前端优化"><a href="#前端优化" class="headerlink" title="前端优化"></a>前端优化</h1><p>浏览器发送HTTP请求，服务器收到请求全文后，返回HTTP响应，在浏览器接收之后结束这个过程。浏览器和服务器只有一次互动的机会，浏览器主动发起，而服务器被动地根据收到的请求内容返回结果。一个完整的请求都需要经过DNS寻址、与服务器建立连接、发送数据、等待服务器响应、接收数据的过程。</p><span id="more"></span><h1 id="前端优化的途径"><a href="#前端优化的途径" class="headerlink" title="前端优化的途径"></a>前端优化的途径</h1><ol><li><strong>页面级别</strong>的优化，例如HTTP请求数、脚本的无阻塞加载、内联脚本的位置优化等；</li><li><strong>代码级别</strong>的优化，例如JavaScript中的DOM操作优化、CSS选择符优化、图片优化以及HTML结构优化等。</li></ol><h1 id="页面级优化"><a href="#页面级优化" class="headerlink" title="页面级优化"></a>页面级优化</h1><h2 id="1-减少HTTP请求数"><a href="#1-减少HTTP请求数" class="headerlink" title="1. 减少HTTP请求数"></a>1. 减少HTTP请求数</h2><h3 id="减少HTTP请求数的主要途径"><a href="#减少HTTP请求数的主要途径" class="headerlink" title="减少HTTP请求数的主要途径"></a>减少HTTP请求数的主要途径</h3><p>1、从设计实现层面简化页面</p><p><strong>保持页面简洁、减少资源的使用</strong>是最直接的。能使用CSS替代效果就尽量少使用图片。</p><p>2、合理设置HTTP缓存</p><p>恰当地缓存设置可以大大减少HTTP请求。被缓存资源的请求服务器是304响应，只有<code>Header</code>没有<code>body</code>，没有节省带宽。对于多个页面都可能使用到的代码，尽量拆分到同一个文件中。如果是嵌入页面换来的是增大了页面的体积，而且无法利用浏览器缓存。</p><p>3、资源合并和压缩</p><p>如果可以，尽可能将外部的脚本、样式进行合并，多个合为一个。另外，CSS、JavaScript、image都可以用相应的工具进行压缩。</p><p>4、<code>CSS Sprites</code></p><p>合并CSS图片，减少请求数的有一个好办法。</p><p>5、<code>lazy load image</code></p><p>这个策略实际上并不一定能减少HTTP请求数，但是却能在某些条件下或者页面刚加载时减少HTTP请求数。对于图片而言，在页面刚加载时可以只加载第一屏，当用户继续往后滚屏时才加载后续的图片。以前的做法是在加载时把第一屏之后的图片地址缓存在<code>textarea</code>标签中，待用户往下滚屏时才<strong>惰性</strong>加载。百度图片和花瓣网也是用这种流行的瀑布流加载图片。</p><h2 id="2-将外部脚本置底"><a href="#2-将外部脚本置底" class="headerlink" title="2. 将外部脚本置底"></a>2. 将外部脚本置底</h2><p><strong>外链脚本在加载时会阻塞其他资源</strong>，例如在脚本加载完成之前，它后面的图片、样式以及其他脚本都处于阻塞状态，直到脚本加载完成后才会开始加载。如果把脚本放在比较靠前的位置，则会影响整个页面的加载速度从而影响用户体验。最简单可依赖的方法是将脚本尽可能往后挪，减少对并发下载的影响。如果时效性允许的话，可以考虑在<code>DOMLoaded</code>事件触发时加载，或者用<code>setTimeout</code>方式来灵活控制加载的时机。</p><h2 id="3-异步执行inline脚本"><a href="#3-异步执行inline脚本" class="headerlink" title="3. 异步执行inline脚本"></a>3. 异步执行inline脚本</h2><p><code>inline</code>脚本对性能的影响比外部脚本大很多。首先，与外部脚本一样，<code>inline</code>脚本在执行时也会阻塞并发请求，除此之外，由于浏览器在页面处理方面时单线程的，当<code>inline</code>脚本在页面渲染之前执行时，页面的渲染工作则会被推迟。简而言之，<code>inline</code>脚本在执行时页面处于空白状态。</p><p>鉴于以上两点，建议将<strong>执行时间较长的<code>inline</code>脚本异步执行</strong>。异步执行的方式有很多种，例如使用<code>script</code>元素的<code>defer</code>属性、使用<code>setTimeout</code>，此外，在HTML5中引入了<code>web workers</code>的机制，恰恰可以解决此类问题。</p><h2 id="4-lazy-load-JavaScript"><a href="#4-lazy-load-JavaScript" class="headerlink" title="4. lazy load JavaScript"></a>4. lazy load JavaScript</h2><p>目前的做法大概有两种，一种是为流量特别大的页面专门定制一个专用的<code>mini</code>版框架，另一种则是<code>lazy load</code>，最初只加载核心模块，其他模块可以等到需要使用的时候才加载，类似于<code>java</code>的<code>swing</code>，引入需要的组件库文件。</p><h2 id="5-将CSS放在head中"><a href="#5-将CSS放在head中" class="headerlink" title="5. 将CSS放在head中"></a>5. 将CSS放在head中</h2><h2 id="6-减少不必要的HTTP跳转"><a href="#6-减少不必要的HTTP跳转" class="headerlink" title="6. 减少不必要的HTTP跳转"></a>6. 减少不必要的HTTP跳转</h2><p>对于以目录形式访问的HTTP链接，很多人都会忽略链接最后是否带<code>/</code>，假如服务器对此区别对待，那么其中很可能隐藏了301跳转，增加了多余请求。</p><h1 id="代码级优化"><a href="#代码级优化" class="headerlink" title="代码级优化"></a>代码级优化</h1><h2 id="1-JavaScript"><a href="#1-JavaScript" class="headerlink" title="1. JavaScript"></a>1. JavaScript</h2><p>1、<code>DOM</code></p><p>DOM操作应该是脚本中最耗性能的一类操作，例如增、删、查、改DOM元素或者对DOM集合进行操作。如果脚本中包含了大量的DOM操作则需要注意<code>html collection</code>。</p><p>在脚本中<code>document.images</code>、<code>document.forms</code>、<code>getElementsByTagName()</code>返回的都是<code>HTMLCollection</code>类型的集合，在平时使用的时候大多将它作为数组来使用，因为它有<code>length</code>属性，也可以使用索引访问每一个元素。不过在访问性能上则比数组要差很多，原因这个集合并不是一个静态的结果，它表示的仅仅是一个特定的查询，每次访问该集合时都会重新执行这个查询从而更新查询结果。所谓的<strong>访问集合</strong>包括读取集合的<code>length</code>属性、访问集合中的元素。</p><p>因此，当你需要遍历<code>HTML collection</code>时，尽量将它<strong>转为数组后再访问</strong>，以提高性能。即使不转换为数组，也请尽可能少地访问它，例如在遍历的时候可以将<code>length</code>属性、成员保存到局部变量后再使用局部变量。</p><p>2、慎用<code>with</code></p><p><code>with(obj)&#123;p=1&#125;;</code>代码块的行为实际上是修改了代码块中的执行环境，将<code>obj</code>放在了其作用于的最前端，在<code>with</code>代码块中访问非局部变量都是先从<code>obj</code>上开始查找，如果没有再依次按作用域链向上查找，因此<strong>使用<code>with</code>相当于增加了作用域链长度</strong>。而每次查找作用域链都是要消耗时间的，过长的作用域链会导致查找性能下降。</p><p>因此，除非你能<strong>肯定在<code>with</code>代码中脂肪纹<code>obj</code>中的属性</strong>，否则慎用<code>with</code>，替代的可以使用局部变量缓存需要访问的属性。</p><p>3、避免使用<code>eval</code>和<code>Function</code></p><p>每次<code>eval</code>或<code>Function</code>构造函数作用于字符串表示的源代码时，脚本引擎都需要将源代码转换为可执行代码。这是很消耗资源的操作——通常比简单的函数调用慢100倍以上。</p><p><code>eval</code>函数效率特别低，由于事先无法知晓传给<code>eval</code>的字符串中的内容，<code>eval</code>在其上下文中解析要处理的代码，也就是说编译器无法优化上下文，因此只能有浏览器在运行时解析代码，这对性能影响很大。</p><p><code>Function</code>构造函数比<code>eval</code>略好，因为使用此代码不会影响周围代码，但其速度仍很慢。</p><p>此外，使用<code>eval</code>和<code>Function</code>不利于JavaScript压缩工具执行压缩。</p><p>4、减少作用域链查找</p><p>作用域链查找问题，这一点在循环中尤其需要注意。如果在循环中需要访问非本作用域下的变量时<strong>请在遍历之前用局部变量缓存该变量，并在遍历结束后再重复那个变量</strong>，这一点对全局变量尤其重要，因为全局变量处于作用域链的最顶端，访问时的查找次数是最多的。</p><p>此外，要减少作用域链查找还应该减少闭包的使用。闭包的变量可能保存到内存中，内存消耗很大，解决方法是在退出函数前，将不使用的局部变量删除。</p><p>5、数据访问</p><p>JavaScript中的数据访问包括直接量（字符串、正则表达式）、变量、对象属性以及数组，其中对直接量和局部变量的访问是最快的，对对象属性以及数组的访问需要更大的开销。当出现以下情况时，建议将数据放入局部变量：</p><ol><li>对任何<strong>对象属性</strong>的访问超过1次</li><li>对任何<strong>数组成员</strong>的访问次数超过1次</li></ol><p>另外，还应当尽可能的<strong>减少对对象以及数组深度查找</strong>。</p><p>6、字符串拼接</p><p>在JavaScript中使用<code>+</code>号来拼接字符串效率是比较低的，因为每次运行都会开辟新的内存并生成新的字符串变量，然后拼接结果赋值给新变量。之前使用jQuery+Ajax交互页面，很多时候都是将后台传输过来的数据和前端<code>HTML</code>结构拼接成字符串，然后呈现在页面HTML容器里。</p><p>与之相比更为高效的做法是<strong>使用数组的<code>join</code>方法</strong>，即将需要拼接的字符串放在数组中最后调用其<code>join</code>方法得到结果。不过由于使用数组也有一定的开销，因此当需要拼接的字符串较多时可以考虑使用此方法。</p><h2 id="2-CSS选择符"><a href="#2-CSS选择符" class="headerlink" title="2. CSS选择符"></a>2. CSS选择符</h2><p>在大多数人的观念中，都觉得浏览器对CSS选择符的解析是从左往右进行的。</p><p>如果是从右往左解析则效率会很高，因为第一个ID选择基本上就把查找的范围限定了，但实际上浏览器对选择符的解析是从右往左进行的。<code>#tag A &#123;color: &quot;#ccc&quot;;&#125;</code>，浏览器必须遍历查找每一个<code>A</code>标签的祖先节点，效率并不像之前想象的那么高。根据浏览器的这一行为特点，在写选择符的时候需要注意很多事项。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS团队协作规范</title>
      <link href="/2019/05/06/%E6%8A%80%E6%9C%AF/CSS/CSS%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C%E8%A7%84%E8%8C%83/"/>
      <url>/2019/05/06/%E6%8A%80%E6%9C%AF/CSS/CSS%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="命名禁止缩写"><a href="#命名禁止缩写" class="headerlink" title="命名禁止缩写"></a>命名禁止缩写</h1><ul><li>精简扼要地对<code>class</code>命名，请勿使用自定义缩写。</li><li><code>class name</code>的命名必须是行为、有语意的。</li></ul><span id="more"></span><h1 id="禁止在非特殊情况下写-important"><a href="#禁止在非特殊情况下写-important" class="headerlink" title="禁止在非特殊情况下写!important"></a>禁止在非特殊情况下写!important</h1><ul><li>CSS本身有权重设计，任意地使用<code>!important</code>会造成权重混乱而无法维护。</li></ul><h1 id="不可轻易限定宽高"><a href="#不可轻易限定宽高" class="headerlink" title="不可轻易限定宽高"></a>不可轻易限定宽高</h1><ul><li>用户可以自行设定自己的浏览器，例如<code>Android</code>手机可以设定显示字体大小，写死的高度会让字体相互重叠。</li></ul><h2 id="RWD失效"><a href="#RWD失效" class="headerlink" title="RWD失效"></a>RWD失效</h2><ul><li>移动设备的高度是无限的，宽度是有限的。</li><li>请不要把宽写死。</li></ul><h1 id="img请让它自动缩放"><a href="#img请让它自动缩放" class="headerlink" title="img请让它自动缩放"></a>img请让它自动缩放</h1><ul><li>请不要替<code>img</code>的容器设定宽或高，让它根据设备自行缩放。</li><li>请使用<code>bootstrap</code>的<code>img-responsive</code>。</li><li>如果确实要用：  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: auto;</span><br></pre></td></tr></table></figure></li><li>如果要给<code>img border-radius</code>设定样式，请使用父元素控制行为，保持<code>img</code>只载入图片，没有样式。</li></ul><h1 id="优先使用grid排版"><a href="#优先使用grid排版" class="headerlink" title="优先使用grid排版"></a>优先使用grid排版</h1><ul><li>请不要花很多时间在写<code>media query</code>，设定一堆<code>breakpoint</code>，自己写组件样式，自己控制每种设备上的容器宽度。</li><li>请使用<code>grid system</code>，这些都是已经成熟的框架，而且有些也已经帮你处理了浏览器相容问题。</li></ul><h1 id="不可直接over-write或在原本框架的class增加内容"><a href="#不可直接over-write或在原本框架的class增加内容" class="headerlink" title="不可直接over write或在原本框架的class增加内容"></a>不可直接over write或在原本框架的class增加内容</h1><ul><li>直接写一个新的<code>class</code>，不要覆盖原有的设计。</li><li>不要再已有的<code>class</code>上添加样式，请额外单独写一个。</li></ul><h1 id="设计RWD网站，请遵循移动设备优先原则"><a href="#设计RWD网站，请遵循移动设备优先原则" class="headerlink" title="设计RWD网站，请遵循移动设备优先原则"></a>设计RWD网站，请遵循移动设备优先原则</h1><ul><li>设计师的设计顺序，以桌面版优先，再设计手机版。</li><li>前端工程师拿到视觉图，开始写<code>HTML/CSS</code>时以手机版为第一优先。</li></ul><blockquote><p>手机开启网页很吃手机效能和网络状况，前端工程师一开始就以手机版为优先，可以让HTML一开始载入，使用最少的效能快速载入网页。当开始制作桌面版时，只会少许跑版，做适当微调即可。<br>相反，如果先制作桌面版，当手机版画面被切掉或是跑版，需要花更多时间去调整。</p></blockquote><blockquote><p>再来是iPhone手机的<code>retina</code>，会将图片放到手机上时自动做两倍缩小，在一开始制作时即可发现图片载入是否吃效能。为了让图片能在iPhone上有更好的体验，建议移动版优先。</p></blockquote><h1 id="不可使用html-tag-selector"><a href="#不可使用html-tag-selector" class="headerlink" title="不可使用html tag selector"></a>不可使用html tag selector</h1><ul><li>请直接定义<code>class</code>的样式，不需要指定<code>html tag</code>。</li></ul><h1 id="层级不可以超过三层"><a href="#层级不可以超过三层" class="headerlink" title="层级不可以超过三层"></a>层级不可以超过三层</h1><ul><li>超过三层表示耦合度太高，不具有弹性、可维护性。</li></ul><h1 id="用一样的element时不要把一堆东西全部写在里面，请把排版相关的独立出来"><a href="#用一样的element时不要把一堆东西全部写在里面，请把排版相关的独立出来" class="headerlink" title="用一样的element时不要把一堆东西全部写在里面，请把排版相关的独立出来"></a>用一样的element时不要把一堆东西全部写在里面，请把排版相关的独立出来</h1><ul><li>把<code>border-radius</code>写在<code>img</code>上面，请把<code>img</code>保持干净。定位，例如<code>position: absolute;</code></li></ul><h1 id="不要随意none掉画面上的tag或行为"><a href="#不要随意none掉画面上的tag或行为" class="headerlink" title="不要随意none掉画面上的tag或行为"></a>不要随意none掉画面上的tag或行为</h1><ul><li>请注意如果要<code>none</code>掉一些样式，请依照使用程度决定。</li><li>使用程度遍布整个网站，请直接使用<code>reset.css</code></li><li>使用程度中等以下，请定义一个<code>class</code></li></ul><h2 id="reset-css"><a href="#reset-css" class="headerlink" title="reset.css"></a>reset.css</h2><ul><li>常见的<code>a tag</code>不要有<code>underline</code></li><li><code>list</code>消除原有样式</li><li>请在<code>reset.css</code>上定义，并且设为第一载入次序</li></ul><h1 id="有JavaScript行为的class可以为命名加入name-space"><a href="#有JavaScript行为的class可以为命名加入name-space" class="headerlink" title="有JavaScript行为的class可以为命名加入name space"></a>有JavaScript行为的class可以为命名加入name space</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#js-project-show &#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="请勿任意使用br-hr-tag"><a href="#请勿任意使用br-hr-tag" class="headerlink" title="请勿任意使用br hr tag"></a>请勿任意使用br hr tag</h1><ul><li><code>br</code>是换行，请使用在<code>p tag</code>里面，当<code>p</code>里面文字过多时可以使用。</li><li><code>hr</code>是快速划线，但是即将被淘汰，请直接使用<code>border</code>写在<code>class</code>里面。</li><li><code>br</code>必须去思考父区块是不是<code>display: block;</code>，如果要换行，应该思考是不是下一段文字。</li><li>线条请都是用<code>border</code>去写。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React进阶训练</title>
      <link href="/2019/04/17/%E6%8A%80%E6%9C%AF/React/React%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83/"/>
      <url>/2019/04/17/%E6%8A%80%E6%9C%AF/React/React%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<h1 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h1><p><strong><code>Redux</code>就是给JavaScript应用程序一个可以预测<code>state</code>的容器。</strong></p><span id="more"></span><p>使用Redux的时候一定要记得以下三大原则：</p><ol><li><code>single source of truth</code>：应用程序的<code>state</code>，皆存储在唯一一个树状结构的<code>store</code>中；</li><li><code>state is read-only</code>：唯一改变<code>state</code>的方式，发送一个描述如何改变的<code>action</code>；</li><li><code>changes are made with pure functions</code>：为了描述<code>action</code>如何改变<code>state</code>，<code>reducer</code>必须改成<code>pure function</code>。</li></ol><p><strong>具体运行</strong></p><ol><li>当我们要改<code>state</code>时，必须**通过<code>dispatch</code>发送一个<code>action</code>对象到<code>store</code>**，这个<code>action</code>对象是用来描述发生了什么事。</li><li><code>store</code>基本上也不知道收到这个用来做什么，因为它是用来存储<code>state tree</code>的地方，所以<code>store</code>会<strong>把「自己目前的<code>state</code>」及「<code>action</code>」交给给<code>Reducer</code>处理</strong>。</li><li><code>reducer</code>是一个<code>pure function</code>，它会**根据我们<code>action</code>的要求去做<code>state</code>的更改，并将新的<code>state</code>回传给<code>store</code>**。</li><li>我们可以让<code>component</code>去做监听<code>redux</code>裡面的<code>storestate</code>，只要一旦发现<code>state</code>有发生变化，就会立即帮我们重新<code>Render</code>。</li></ol><h1 id="store"><a href="#store" class="headerlink" title="store"></a>store</h1><p><code>store</code>主要的功能就是掌管应用程式的状态，并且有这些任务：</p><ol><li>掌管应用程式的状态</li><li>用<code>getState()</code>读取<code>state</code></li><li>用<code>dispatch(action)</code>来更新<code>state</code></li><li>用<code>subscribe(listener)</code>注册<code>listener</code></li><li>利用<code>subscribe(listener)</code>回传的<code>function</code>注销<code>listener</code></li></ol><p>在<code>redux</code>的应用程式中，<code>store</code>只会有一个。</p><p>创建<code>state</code>的方法就是利用<code>createStore(reducer)</code>的方式创建它，而要发送<code>action</code>则利用<code>dispatch(action)</code>来达到，当<code>store</code>收到<code>action</code>时，则会调用<code>reducer</code>来帮忙更新<code>state</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用React Native构建App</title>
      <link href="/2019/04/11/%E6%8A%80%E6%9C%AF/React/%E4%BD%BF%E7%94%A8ReactNative%E6%9E%84%E5%BB%BAApp/"/>
      <url>/2019/04/11/%E6%8A%80%E6%9C%AF/React/%E4%BD%BF%E7%94%A8ReactNative%E6%9E%84%E5%BB%BAApp/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文重点记录使用<code>React Native</code>构建双平台<code>App</code>的过程，同时进一步掌握构建过程中运用的技术。</p></blockquote><span id="more"></span><h1 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h1><p>**安装<code>react-native-cli</code>**：<code>npm i -g react-native-cli</code></p><h2 id="Android-SDK"><a href="#Android-SDK" class="headerlink" title="Android SDK"></a>Android SDK</h2><p>安装Android SDK并启动进行配置：</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20161218/20103341gxBqKULWcN.jpg"></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20161218/201033416NmVA3263R.png"></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20161218/20103341NaRCcgwxHg.jpg"></p><p><strong>配置环境变量</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="variable constant_">ANDROID_HOME</span>=~<span class="regexp">/Library/</span><span class="title class_">Android</span>/sdk</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">PATH</span>=$&#123;<span class="variable constant_">PATH</span>&#125;:$&#123;<span class="variable constant_">ANDROID_HOME</span>&#125;/tools</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">PATH</span>=$&#123;<span class="variable constant_">PATH</span>&#125;:$&#123;<span class="variable constant_">ANDROID_HOME</span>&#125;/platform-tools</span><br></pre></td></tr></table></figure><h2 id="Android-虚拟机"><a href="#Android-虚拟机" class="headerlink" title="Android 虚拟机"></a>Android 虚拟机</h2><p>设定<a href="https://www.genymotion.com/download/">Genymotion</a>的Android SDK 位置（Android SDK 的路径可以在 SDK Manager 上找到）。</p><p>![](Android SDK 的路径可以在 SDK Manager 上找到)</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20161218/20103341ErBtdBNvuw.jpg"></p><h2 id="模拟器"><a href="#模拟器" class="headerlink" title="模拟器"></a>模拟器</h2><p>有多款模拟器可供选择，Android Studio自带，Genymotion和夜神模拟器，推荐选择夜神模拟器。</p><p><strong>配置方法：</strong></p><ol><li><p>在<code>Nox/bin</code>目录运行<code>nox_adb.exe connect 127.0.0.1:62001</code>，如果失败，使用<code>adb devices</code>查询，出现版本不一致的情况，可以把<code>Android/sdk</code>目录下的<code>adb.exe</code>拷贝到<code>Nox/bin</code>下，并改名为<code>nox_adb.exe</code>，反过来操作也是可以的。</p></li><li><p>分别打开Android Studio和夜神模拟器，此时运行命令<code>nox_adb.exe connect 127.0.0.1:62001</code>基本上都会成功。</p></li></ol><p><strong>验证<code>adb.exe</code>和<code>nox_adb.exe</code>版本</strong></p><ol><li>在cmd或git base中输入<code>adb version</code>查看版本信息；</li><li>在<code>Nox/bin</code>目录下输入<code>nox_adb.exe version</code>；</li><li>把夜神模拟器下的<code>nox_adb.exe</code>拷贝到Android SDK目录下，并更名为<code>adb.exe</code>；</li><li>运行<code>adb connect 127.0.0.1:62001</code>。</li></ol><h1 id="新建React-Native项目"><a href="#新建React-Native项目" class="headerlink" title="新建React Native项目"></a>新建React Native项目</h1><ol><li>运行<code>react-native init project-name</code>，进入<code>project-name</code>文件夹安装依赖<code>npm i</code>并运行<code>react-native run-android</code>或<code>react-native run-ios</code>构建<code>App</code>。</li><li>以Android App为例，在Android Studio打开<code>Android</code>文件夹（<strong>注意：此处是<code>Android</code>文件夹，不是<code>project-name</code>项目文件夹</strong>）。</li><li>在<code>C:\Users\user\.gradle\wrapper\dists</code>目录下放入对应文件，文件下载地址<a href="http://services.gradle.org/distributions/">Gradle</a></li></ol><p><img src="https://github.com/whjin/images-save/blob/master/react-native/gradle.jpg?raw=true"><br><img src="https://github.com/whjin/images-save/blob/master/react-native/gradle1.jpg?raw=true"><br><img src="https://github.com/whjin/images-save/blob/master/react-native/gradle2.jpg?raw=true"></p><h1 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h1><ol><li><strong>这一步很关键</strong>，配置java的环境变量，首先是<strong>JAVA_HOME</strong>和<strong>ANDROID_HOME</strong>：<ol><li><strong>JAVA_HOME</strong>，变量值为<code>D:\Android\sdk</code>；</li><li><strong>ANDROID_HOME</strong>，变量值为<code>D:\Android\sdk</code>；</li><li>然后在<code>Path</code>项中添加<code>jdk</code>和<code>jre</code>下的<code>bin</code>目录；</li><li>以上是用户变量配置，下面进行系统变量配置：<ul><li>在<code>Path</code>项中添加下图中变量：</li></ul></li></ol></li></ol><p><img src="https://github.com/whjin/images-save/blob/master/react-native/set-system-val.jpg?raw=true"></p><ol start="2"><li>同时打开Android Studio、Nox并在AS中打开项目中的<code>Android</code>文件夹。</li><li>运行<code>nox_adb.exe connect 127.0.0.1:62001</code>连接AS和Nox，然后再运行<code>react-native run-android</code>，此时就会构建Android App，<br><img src="https://github.com/whjin/images-save/blob/master/react-native/node-run-android.jpg?raw=true"></li></ol><blockquote><p>关闭端口冲突：<code>lsof -n -i4TCP:8081</code>，<code>kill -9 &lt;PID&gt;</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> RN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React项目详解</title>
      <link href="/2019/04/09/%E6%8A%80%E6%9C%AF/React/React%E9%A1%B9%E7%9B%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/04/09/%E6%8A%80%E6%9C%AF/React/React%E9%A1%B9%E7%9B%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="React项目指导"><a href="#React项目指导" class="headerlink" title="React项目指导"></a>React项目指导</h1><h2 id="使用webpack需要安装的依赖"><a href="#使用webpack需要安装的依赖" class="headerlink" title="使用webpack需要安装的依赖"></a>使用webpack需要安装的依赖</h2><span id="more"></span><ol><li><p><code>webpack</code>，<code>webpack-cli</code>，<code>react</code>，<code>react-dom</code></p></li><li><p><code>babel-loader</code>，<code>@babel/core</code>，<code>@babel/preset-env</code>，<code>@babel/preset-react</code></p></li><li><p>设置<code>.babelrc</code>，<code>&#123;&quot;presets&quot;: [&quot;@babel/preset-env&quot;,&quot;@babel/preset-react&quot;]&#125;</code></p></li><li><p>设置<code>scripts</code>：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack --mode development&quot;</span>,</span><br><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --mode production&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>设置<code>webpack-dev-server</code>：   </p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">  <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">9000</span>，</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;start&quot;</span>: <span class="string">&quot;webpack-dev-server --config webpack.config.js&quot;</span> </span><br></pre></td></tr></table></figure></li><li><p>设置<code>performance</code>：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">performance</span>: &#123;</span><br><span class="line">  <span class="attr">hints</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h2><ol><li><p>基本组件</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> title = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(title,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>动态组件</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">displayTime</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> nowTime = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>现在时间：&#123;new Date().toLocaleTimeString()&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(t</span><br><span class="line">    nowTime,</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(displayTime, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>class</code>组件构建器</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloTitle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">HelloTitle</span>/&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><code>props</code>属性</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloTitle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,&#123;this.props.name&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> titleDiv = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">HelloTitle</span> <span class="attr">name</span>=<span class="string">&quot;React&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">HelloTitle</span> <span class="attr">name</span>=<span class="string">&quot;World&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  titleDiv,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><code>props</code>多层使用</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloTitle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,&#123;this.props.name&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloDiv</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">HelloTitle</span> <span class="attr">name</span>=<span class="string">&#123;this.props.name&#125;/</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">HelloDiv</span> <span class="attr">name</span>=<span class="string">&quot;React&quot;</span>/&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>组件复用</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloTitle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;this.props.style&#125;</span>&gt;</span>&#123;this.props.content&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloDiv</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">HelloTitle</span> <span class="attr">content</span>=<span class="string">&quot;比较大的字&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&#x27;<span class="attr">fontSize</span>&#x27;<span class="attr">:</span> <span class="attr">18</span>&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">HelloTitle</span> <span class="attr">content</span>=<span class="string">&quot;比较小的字&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&#x27;<span class="attr">fontSize</span>&#x27;<span class="attr">:</span> <span class="attr">12</span>&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">HelloDiv</span>/&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><h2 id="Component的状态state和生命周期"><a href="#Component的状态state和生命周期" class="headerlink" title="Component的状态state和生命周期"></a>Component的状态state和生命周期</h2><h3 id="state属性"><a href="#state属性" class="headerlink" title="state属性"></a>state属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="variable language_">super</span>(props);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">    <span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleTimeString</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>现在时间是&#123;this.state.time&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件构建完成后先执行的动作，<code>componentDidMount()</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="title function_">upTime</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleTimeString</span>()&#125;)</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">setInterval</span>(upTime, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="setState-修改状态值"><a href="#setState-修改状态值" class="headerlink" title="setState()修改状态值"></a>setState()修改状态值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleTimeString</span>()&#125;)</span><br></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ol><li>在<code>constructor</code>中初始化组件内部的资料。</li><li>使用<code>render()</code>在网页上输出组件内容。</li><li>输出后会执行<code>componentDidMount()</code>进行一次调用。</li><li>当组件内部的<code>state</code>值被修改时执行<code>componentDidUpdate()</code>。</li><li>当组件被移除时会执行<code>componentWillUnmount()</code>的内容一次。</li></ol><p><strong><code>componentDidMount()</code></strong></p><ol><li>Component已经<code>render</code>到实体DOM阶段完成的时候触发；</li><li>此<code>method</code>只会被呼叫一次；</li><li>在这裡可以<code>setState()</code>，并会再次重新<code>render</code>、<code>component</code>一次；</li><li>可以放入具有<code>side effect</code>的<code>function</code>，如<code>setInterval</code>、呼叫API等等。</li></ol><p><strong><code>componentWillUnmount()</code></strong></p><ol><li>Component即将从实体DOM阶段移除「之前」的时候触发；</li><li>也是只会被呼叫一次；</li><li>不可以在这裡使用<code>setState()</code>；</li><li>也可以放入具有<code>side effect</code>的<code>function</code>。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">currentTime</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="variable language_">this</span>.<span class="property">updateTime</span>, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  updateTime = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">currentTime</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;currentTime&#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;clock&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;currentTime&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="component各阶段的生命周期方法"><a href="#component各阶段的生命周期方法" class="headerlink" title="component各阶段的生命周期方法"></a>component各阶段的生命周期方法</h3><ol><li>挂载（<code>Mounting</code>）：组件一开始呈现到真实网页的过程</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LifeCycle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="comment">//  建构式，推进组件初始state设定，绑定方法，接受父级props的地方</span></span><br><span class="line">    <span class="comment">//  只会被调用一次</span></span><br><span class="line">    <span class="comment">//  不适合使用具有side effect的工作，如AJAX调用</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getDerivedStateFromProps</span>(<span class="params">nextProps, prevState</span>) &#123;</span><br><span class="line">    <span class="comment">//  React V16.3新增的生命周期方法</span></span><br><span class="line">    <span class="comment">//  在组件建构之后,render()被调用之前</span></span><br><span class="line">    <span class="comment">//  每次接收新的props后回传object更新state；也可以回传null不做更新</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">UNSAFE_componentWillMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//  即将在React V17中移除，不可与static getDerivedStateFromProps同时出现</span></span><br><span class="line">    <span class="comment">//  在render()调用之后被调用，且之后被调用一次</span></span><br><span class="line">    <span class="comment">//  会用到的地方仅在于服务器端的应用</span></span><br><span class="line">    <span class="comment">//  适合设定初始化数据的地方，不适合做有side effect的工作</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//  在class component中「唯一」必要存在的方法</span></span><br><span class="line">    <span class="comment">//  尽量pure，不应该改变component的state</span></span><br><span class="line">    <span class="comment">//  如需要和browser有互动的话，将其放进componentDidMount()中</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//  在render()被调用后，组件已经在真实DOM呈现之后被调用执行</span></span><br><span class="line">    <span class="comment">//  只会被调用一次，适合执行AJAX、计时器设定、加入eventListener等有副作用的工作</span></span><br><span class="line">    <span class="comment">//  调用setState()可能会再执行一次render()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>更新（Updating）：使用者的操作中，组件的状态和属性被改变</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LifeCycle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">UNSAFE_componentWillReceiveProps</span>(<span class="params">nextProps</span>) &#123;</span><br><span class="line">    <span class="comment">//  即将在React V17中移除，不可与static getDerivedStateFromProps同时出现</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getDerivedStateFromProps</span>(<span class="params">nextProps, prevState</span>) &#123;</span><br><span class="line">    <span class="comment">//  React V16.3新增的新生命周期方法</span></span><br><span class="line">    <span class="comment">//  在组件构建之后，render()被调用之前</span></span><br><span class="line">    <span class="comment">//  每次接收新的props后回传object更新state；也可回传null不做更新</span></span><br><span class="line">    <span class="comment">//  搭配componentDidUpdate，可以达到与componentWillReceivedProps的效果</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">shouldComponentUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//  让使用者自定义是否进行component更新，预设都会默认更新</span></span><br><span class="line">    <span class="comment">//  只有少部分的情况才会使用此方法，如进行复杂耗时的计算</span></span><br><span class="line">    <span class="comment">//  尽量不要检查太过深层的值，也不适合执行具有side effect的工作</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">UNSAFE_componentWillUpdate</span>(<span class="params">nextProps, nextState</span>) &#123;</span><br><span class="line">    <span class="comment">//  即将在React V17中移除，不可与static getDerivedStateFromProps同时出现</span></span><br><span class="line">    <span class="comment">//  在组件即将更新「之前」调用</span></span><br><span class="line">    <span class="comment">//  不能在此使用setState方法，若要改变请用getDerivedStateFromProps</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getSnapshotBeforeUpdate</span>(<span class="params">prevProps, prevState</span>) &#123;</span><br><span class="line">    <span class="comment">//  在render之后，在最新的渲染前输出交给真实DOM前会立即执行</span></span><br><span class="line">    <span class="comment">//  返回的值作为componentDidUpdate的第三个值</span></span><br><span class="line">    <span class="comment">//  搭配componentDidUpdate，可以达到与componentWillUpdate的效果</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params">prevProps, prevState, snapshot</span>) &#123;</span><br><span class="line">    <span class="comment">//  会发生在更新「之后」被调用</span></span><br><span class="line">    <span class="comment">//  如果shouldComponentUpdate回传的是false，就不会调用此方法</span></span><br><span class="line">    <span class="comment">//  适合执行具有side effect的地方</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>卸载（Unmounting）：组件要移除真实DOM的阶段</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LifeCycle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">componentWillMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//  在组件即将要移除真实DOM时会执行</span></span><br><span class="line">    <span class="comment">//  可以在这里做中断网络连接、清楚计时器、移除事件监听器</span></span><br><span class="line">    <span class="comment">//  不适合使用setState方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="catch-error"><a href="#catch-error" class="headerlink" title="catch error"></a>catch error</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ErrorBoundary</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">hasError</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidCatch</span>(<span class="params">error, info</span>) &#123;</span><br><span class="line">    <span class="comment">//  是error handle的方法，与挂载和更新阶段有密切关系</span></span><br><span class="line">    <span class="comment">//  可以用来捕捉子组件的任何JavaScript的错误</span></span><br><span class="line">    <span class="comment">//  可以记录这些错误，或是呈现在目前反馈用的操作界面上</span></span><br><span class="line">    <span class="comment">//  不能在事件的callback上使用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  显示在反馈的UI上</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">hasError</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">    <span class="comment">//  也可以用额外的错误记录服务</span></span><br><span class="line">    <span class="title function_">logErrorMyService</span>(error, info);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">hasError</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Something went wrong...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">children</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面就是<code>component</code>可以使用的生命周期方法，最常用主要是这些：</p><ol><li><code>constructor()</code></li><li><code>render()</code></li><li><code>componentDidMount()</code></li><li><code>compoinentDidUpdate()</code></li><li><code>componentWillUnmount()</code></li></ol><h2 id="Component的事件处理"><a href="#Component的事件处理" class="headerlink" title="Component的事件处理"></a>Component的事件处理</h2><ol><li>取得触发事件的DOM</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InputGender</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">gender</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">changeGender</span> = <span class="variable language_">this</span>.<span class="property">changeGender</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">changeGender</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">gender</span>: event.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`已将state.gender变动为：<span class="subst">$&#123;<span class="variable language_">this</span>.state.gender&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">onChange</span>=<span class="string">&#123;this.changeGender&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;M&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;W&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HelloTitle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.props.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">gender</span> === <span class="string">&#x27;M&#x27;</span>) ? <span class="language-xml"><span class="tag">&lt;<span class="name">HelloTitle</span> <span class="attr">title</span>=<span class="string">&quot;先生&quot;</span>/&gt;</span></span> : <span class="language-xml"><span class="tag">&lt;<span class="name">HelloTitle</span> <span class="attr">title</span>=<span class="string">&quot;女士&quot;</span>/&gt;</span></span>&#125;</span><br></pre></td></tr></table></figure><h3 id="用绑定的state取得输入资料"><a href="#用绑定的state取得输入资料" class="headerlink" title="用绑定的state取得输入资料"></a>用绑定的state取得输入资料</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EasyForm</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">changeState</span> = <span class="variable language_">this</span>.<span class="property">changeState</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">submitForm</span> = <span class="variable language_">this</span>.<span class="property">submitForm</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">changeState</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: event.<span class="property">target</span>.<span class="property">value</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">submitForm</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">    element.<span class="property">innerHTML</span> = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.state.name&#125;</span>`</span>;</span><br><span class="line">    event.<span class="title function_">preventDefault</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.submitForm&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.changeState&#125;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.name&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&#x27;<span class="attr">marginLeft</span>&#x27;<span class="attr">:</span> <span class="attr">6</span>&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>现在输入的名字是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&#x27;<span class="attr">color</span>&#x27;<span class="attr">:</span> &#x27;#<span class="attr">FF7F24</span>&#x27;&#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EasyForm</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">lists</span>: [</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="string">&#x27;01&#x27;</span>, <span class="attr">listName</span>: <span class="string">&#x27;写文章&#x27;</span>, <span class="attr">check</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="string">&#x27;02&#x27;</span>, <span class="attr">listName</span>: <span class="string">&#x27;写代码&#x27;</span>, <span class="attr">check</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="string">&#x27;03&#x27;</span>, <span class="attr">listName</span>: <span class="string">&#x27;旅游&#x27;</span>, <span class="attr">check</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="string">&#x27;04&#x27;</span>, <span class="attr">listName</span>: <span class="string">&#x27;踢球&#x27;</span>, <span class="attr">check</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="string">&#x27;05&#x27;</span>, <span class="attr">listName</span>: <span class="string">&#x27;公益&#x27;</span>, <span class="attr">check</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">submitForm</span> = <span class="variable language_">this</span>.<span class="property">submitForm</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">changeState</span> = <span class="variable language_">this</span>.<span class="property">changeState</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">changeState</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arrLists = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">lists</span>;</span><br><span class="line">    arrLists[index].<span class="property">check</span> ? arrLists[index].<span class="property">check</span> = <span class="literal">false</span> : arrLists[index].<span class="property">check</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">lists</span>: arrLists,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">submitForm</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> status = <span class="string">&quot;目前做了：&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">lists</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">list</span>) =&gt;</span> list.<span class="property">check</span> ? status += <span class="string">`<span class="subst">$&#123;list.listName&#125;</span> `</span> : <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(status);</span><br><span class="line">    event.<span class="title function_">preventDefault</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> lists = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">lists</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">list, index</span>) =&gt;</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;list.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">               <span class="attr">checked</span>=<span class="string">&#123;list.check&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">               <span class="attr">onChange</span>=<span class="string">&#123;this.changeState.bind(this,</span> <span class="attr">index</span>)&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">               <span class="attr">key</span>=<span class="string">&#123;list.id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;list.listName&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    ));</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.submitForm&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>每日待办清单：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;lists&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送表单&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EasyForm</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">submitForm</span> = <span class="variable language_">this</span>.<span class="property">submitForm</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">filebox</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">submitForm</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`选择文档为：<span class="subst">$&#123;<span class="variable language_">this</span>.filebox.current.files[<span class="number">0</span>].name&#125;</span>`</span>)</span><br><span class="line">    event.<span class="title function_">preventDefault</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.submitForm&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>上传文档：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;this.filebox&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;送出表单&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="refs操作DOM"><a href="#refs操作DOM" class="headerlink" title="refs操作DOM"></a>refs操作DOM</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">itemList</span>: []</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">addFile</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addItem = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;itemList&#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">const</span> tempList = <span class="title class_">Object</span>.<span class="title function_">assign</span>([], itemList);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">addFile</span>.<span class="property">current</span>.<span class="property">value</span> !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">      tempList.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">addFile</span>.<span class="property">current</span>.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">itemList</span>: tempList</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">addFile</span>.<span class="property">current</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;itemList&#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;addFile&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;this.addFile&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addItem&#125;</span> <span class="attr">value</span>=<span class="string">&quot;ADD&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;itemList.map((item, index) =&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;</span>`<span class="attr">item_</span>$&#123;<span class="attr">index</span>&#125;`&#125;&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          )&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实例：TODOLIST"><a href="#实例：TODOLIST" class="headerlink" title="实例：TODOLIST"></a>实例：TODOLIST</h1><p><strong><code>TodoList.js</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TodoList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">list</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addItem = <span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;list&#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">if</span> (text !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> tempArr = list.<span class="title function_">concat</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: list.<span class="property">length</span> + <span class="number">1</span>,</span><br><span class="line">        text,</span><br><span class="line">        <span class="attr">status</span>: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">list</span>: tempArr&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  toggleStatus = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;list&#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">const</span> tempArr = list.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.<span class="property">id</span>.<span class="title function_">toString</span>() === id.<span class="title function_">toString</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> (&#123;</span><br><span class="line">          <span class="attr">id</span>: item.<span class="property">id</span>,</span><br><span class="line">          <span class="attr">text</span>: item.<span class="property">text</span>,</span><br><span class="line">          <span class="attr">status</span>: !item.<span class="property">status</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> item;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">list</span>: tempArr&#125;)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123;list&#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">const</span> divStyle = &#123;</span><br><span class="line">      <span class="attr">width</span>: <span class="string">&#x27;250px&#x27;</span>,</span><br><span class="line">      <span class="attr">margin</span>: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">      <span class="attr">textAlign</span>: <span class="string">&#x27;left&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;divStyle&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">TodoForm</span> <span class="attr">onAddItem</span>=<span class="string">&#123;this.addItem&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;list.map(item =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">TodoItem</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">id</span>=<span class="string">&#123;item.id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">status</span>=<span class="string">&#123;item.status&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onItemClick</span>=<span class="string">&#123;this.toggleStatus&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;item.text&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">TodoItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>TodoForm.js</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TodoForm</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">inputRef</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  formSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;onAddItem&#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="title function_">onAddItem</span>(<span class="variable language_">this</span>.<span class="property">inputRef</span>.<span class="property">current</span>.<span class="property">value</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">inputRef</span>.<span class="property">current</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.formSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;todoItem&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;this.inputRef&#125;</span> <span class="attr">autoComplete</span>=<span class="string">&quot;off&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>TodoItem.js</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TodoItem</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  handleItemClick = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;onItemClick&#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="title function_">onItemClick</span>(e.<span class="property">target</span>.<span class="property">id</span>)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;children, id, status&#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">id</span>=<span class="string">&#123;id&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;this.handleItemClick&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">data-status</span>=<span class="string">&#123;status&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">status</span> ?</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123;<span class="attr">textDecoration:</span> &#x27;<span class="attr">line-through</span>&#x27;&#125; <span class="attr">:</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123;<span class="attr">textDecoration:</span> &#x27;<span class="attr">none</span>&#x27;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页设计的垂直居中</title>
      <link href="/2019/03/20/%E6%8A%80%E6%9C%AF/CSS/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
      <url>/2019/03/20/%E6%8A%80%E6%9C%AF/CSS/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>此系列为网页设计中经常使用到的垂直居中解决方法，通过本文进行详细地总结。</p></blockquote><span id="more"></span><h1 id="使用line-height做垂直居中"><a href="#使用line-height做垂直居中" class="headerlink" title="使用line-height做垂直居中"></a>使用line-height做垂直居中</h1><p class="codepen" data-height="300" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="EMdevR" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用line-height做垂直居中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/EMdevR/">  使用line-height做垂直居中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用line-height-inline-block做多行文字的垂直居中"><a href="#使用line-height-inline-block做多行文字的垂直居中" class="headerlink" title="使用line-height + inline-block做多行文字的垂直居中"></a>使用line-height + inline-block做多行文字的垂直居中</h1><p class="codepen" data-height="300" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="oVaNra" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用CSS line-height + inline-block 做多行文字的垂直置中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/oVaNra/">  使用CSS line-height + inline-block 做多行文字的垂直置中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用-before-inline-block做垂直居中"><a href="#使用-before-inline-block做垂直居中" class="headerlink" title="使用:before + inline-block做垂直居中"></a>使用:before + inline-block做垂直居中</h1><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="mozebx" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用line-height+inline-block做多行文字的垂直居中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/mozebx/">  使用line-height+inline-block做多行文字的垂直居中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用padding做垂直居中"><a href="#使用padding做垂直居中" class="headerlink" title="使用padding做垂直居中"></a>使用padding做垂直居中</h1><p class="codepen" data-height="300" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="XGxPpV" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用padding做垂直居中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/XGxPpV/">  使用padding做垂直居中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用absolute-margin负值做垂直居中"><a href="#使用absolute-margin负值做垂直居中" class="headerlink" title="使用absolute + margin负值做垂直居中"></a>使用absolute + margin负值做垂直居中</h1><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="OqBypd" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用absolute+margin负值做垂直居中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/OqBypd/">  使用absolute+margin负值做垂直居中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用absolute-margin-auto做垂直居中"><a href="#使用absolute-margin-auto做垂直居中" class="headerlink" title="使用absolute + margin auto做垂直居中"></a>使用absolute + margin auto做垂直居中</h1><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="NJOGeP" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用absolute+margin auto做垂直居中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/NJOGeP/">  使用absolute+margin auto做垂直居中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用absolute-translate做垂直居中"><a href="#使用absolute-translate做垂直居中" class="headerlink" title="使用absolute + translate做垂直居中"></a>使用absolute + translate做垂直居中</h1><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="LagGPJ" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用absolute+translate做垂直居中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/LagGPJ/">  使用absolute+translate做垂直居中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用relative-translateY做垂直居中"><a href="#使用relative-translateY做垂直居中" class="headerlink" title="使用relative + translateY做垂直居中"></a>使用relative + translateY做垂直居中</h1><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="YgJOWB" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用relative+translateY做垂直居中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/YgJOWB/">  使用relative+translateY做垂直居中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用table做垂直居中"><a href="#使用table做垂直居中" class="headerlink" title="使用table做垂直居中"></a>使用table做垂直居中</h1><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="mozzJE" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用table做垂直居中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/mozzJE/">  使用table做垂直居中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用display-table-cell做垂直居中"><a href="#使用display-table-cell做垂直居中" class="headerlink" title="使用display: table-cell做垂直居中"></a>使用display: table-cell做垂直居中</h1><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="MxPERM" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用display: table-cell做垂直居中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/MxPERM/">  使用display: table-cell做垂直居中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用flex-align-items做垂直居中"><a href="#使用flex-align-items做垂直居中" class="headerlink" title="使用flex + align-items做垂直居中"></a>使用flex + align-items做垂直居中</h1><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="eXPZdX" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用flex+align-items做垂直居中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/eXPZdX/">  使用flex+align-items做垂直居中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用flex-before-flex-grow做垂直居中"><a href="#使用flex-before-flex-grow做垂直居中" class="headerlink" title="使用flex + :before + flex-grow做垂直居中"></a>使用flex + :before + flex-grow做垂直居中</h1><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="ZPqOxp" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用flex+:before+flex-grow做垂直居中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/ZPqOxp/">  使用flex+:before+flex-grow做垂直居中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用flex-margin-做垂直居中"><a href="#使用flex-margin-做垂直居中" class="headerlink" title="使用flex + margin 做垂直居中"></a>使用flex + margin 做垂直居中</h1><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="RdeGdr" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用flex+margin做垂直居中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/RdeGdr/">  使用flex+margin做垂直居中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用Flex-align-self做垂直置中"><a href="#使用Flex-align-self做垂直置中" class="headerlink" title="使用Flex + align-self做垂直置中"></a>使用Flex + align-self做垂直置中</h1><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="bZmBWL" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用Flex+align-self做垂直置中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/bZmBWL/">  使用Flex+align-self做垂直置中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用flex-align-content做垂直居中"><a href="#使用flex-align-content做垂直居中" class="headerlink" title="使用flex + align-content做垂直居中"></a>使用flex + align-content做垂直居中</h1><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="oVaewm" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用flex+align-content做垂直居中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/oVaewm/">  使用flex+align-content做垂直居中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用grid-template做垂直居中"><a href="#使用grid-template做垂直居中" class="headerlink" title="使用grid + template做垂直居中"></a>使用grid + template做垂直居中</h1><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="NJOvLp" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用grid+template做垂直居中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/NJOvLp/">  使用grid+template做垂直居中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用grid-align-items做垂直居中"><a href="#使用grid-align-items做垂直居中" class="headerlink" title="使用grid + align-items做垂直居中"></a>使用grid + align-items做垂直居中</h1><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="KEGvJZ" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用grid+align-items做垂直居中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/KEGvJZ/">  使用grid+align-items做垂直居中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用grid-align-content做垂直居中"><a href="#使用grid-align-content做垂直居中" class="headerlink" title="使用grid + align-content做垂直居中"></a>使用grid + align-content做垂直居中</h1><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="gEBxVw" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用grid+align-content做垂直居中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/gEBxVw/">  使用grid+align-content做垂直居中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用grid-align-self做垂直居中"><a href="#使用grid-align-self做垂直居中" class="headerlink" title="使用grid + align-self做垂直居中"></a>使用grid + align-self做垂直居中</h1><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="VREMYL" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用grid+align-self做垂直居中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/VREMYL/">  使用grid+align-self做垂直居中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用grid-place-items做垂直居中"><a href="#使用grid-place-items做垂直居中" class="headerlink" title="使用grid + place-items做垂直居中"></a>使用grid + place-items做垂直居中</h1><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="PLyJmK" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用grid+place-items做垂直居中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/PLyJmK/">  使用grid+place-items做垂直居中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用grid-place-content做垂直居中"><a href="#使用grid-place-content做垂直居中" class="headerlink" title="使用grid + place-content做垂直居中"></a>使用grid + place-content做垂直居中</h1><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="RdeLxp" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用grid+place-content做垂直居中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/RdeLxp/">  使用grid+place-content做垂直居中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用grid-margin做垂直居中"><a href="#使用grid-margin做垂直居中" class="headerlink" title="使用grid + margin做垂直居中"></a>使用grid + margin做垂直居中</h1><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="oVaGdL" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用grid+margin做垂直居中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/oVaGdL/">  使用grid+margin做垂直居中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用calc做垂直居中"><a href="#使用calc做垂直居中" class="headerlink" title="使用calc做垂直居中"></a>使用calc做垂直居中</h1><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="pYxOJN" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用calc做垂直居中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/pYxOJN/">  使用calc做垂直居中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="使用writing-mode做垂直居中"><a href="#使用writing-mode做垂直居中" class="headerlink" title="使用writing-mode做垂直居中"></a>使用writing-mode做垂直居中</h1><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="WmagLj" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="使用writing-mode做垂直居中">  <span>See the Pen <a href="https://codepen.io/whjin/pen/WmagLj/">  使用writing-mode做垂直居中</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="左图右文版面，文字做垂直居中"><a href="#左图右文版面，文字做垂直居中" class="headerlink" title="左图右文版面，文字做垂直居中"></a>左图右文版面，文字做垂直居中</h1><p class="codepen" data-height="400" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="zbmMgd" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="左图右文版面，文字做垂直居中-1">  <span>See the Pen <a href="https://codepen.io/whjin/pen/zbmMgd/">  左图右文版面，文字做垂直居中-1</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p class="codepen" data-height="400" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="vPVvNb" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="左图右文版面，文字做垂直居中-2">  <span>See the Pen <a href="https://codepen.io/whjin/pen/vPVvNb/">  左图右文版面，文字做垂直居中-2</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS-编程技巧</title>
      <link href="/2019/03/13/%E6%8A%80%E6%9C%AF/CSS/CSS%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
      <url>/2019/03/13/%E6%8A%80%E6%9C%AF/CSS/CSS%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="自动分配宽高"><a href="#自动分配宽高" class="headerlink" title="自动分配宽高"></a>自动分配宽高</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">justify-content</span>: space-between;</span><br><span class="line"><span class="attribute">display</span>: grid;</span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="number">96px</span>);</span><br></pre></td></tr></table></figure><h1 id="CSS-编程技巧"><a href="#CSS-编程技巧" class="headerlink" title="CSS-编程技巧"></a>CSS-编程技巧</h1><ul><li>使用百分比而不是固定的宽度。或者使用相对的宽度：<code>vw</code>, <code>vh</code>, <code>vmin</code>, <code>vmax</code></li><li>在大屏幕上要有一个固定宽度的元素时，使用 <code>max-width</code>，让其不用<code>media query</code>就能自适应小屏幕</li><li>在 <code>img</code>, <code>object</code>, <code>video</code>, <code>iframe</code> 加上 <code>max-width: 100%</code></li><li>当需要填充元素的背景图片时，使用 <code>background-size: cover</code> 让图片能保持原始比例。在移动设备上使用高解析图片不是明智的做法</li><li>制作 <code>grid</code> 页面时让 <code>viewport width</code> 来决定每一列的数量。<code>Flexbox</code> 或者 <code>display: inline-block</code> 就可以做到</li><li>当制作多栏的的文字区块时，设定 <code>column-width</code> 而不是 <code>column-count</code>，让你在小屏幕上会得到一个栏位</li></ul><span id="more"></span><p><strong>减少重复代码</strong>原则：</p><h2 id="半透明的边界"><a href="#半透明的边界" class="headerlink" title="半透明的边界"></a>半透明的边界</h2><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="QoaWPX" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="Secret 1: 半透明的边界">  <span>See the Pen <a href="https://codepen.io/whjin/pen/QoaWPX/">  Secret 1: 半透明的边界</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="内部圆角"><a href="#内部圆角" class="headerlink" title="内部圆角"></a>内部圆角</h2><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="JzMJRY" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="内部圆角">  <span>See the Pen <a href="https://codepen.io/whjin/pen/JzMJRY/">  内部圆角</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="背景图案"><a href="#背景图案" class="headerlink" title="背景图案"></a>背景图案</h2><p class="codepen" data-height="465" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="BbYaGV" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="背景图案">  <span>See the Pen <a href="https://codepen.io/whjin/pen/BbYaGV/">  背景图案</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="（伪）随机背景图案"><a href="#（伪）随机背景图案" class="headerlink" title="（伪）随机背景图案"></a>（伪）随机背景图案</h2><p class="codepen" data-height="465" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="qvxEjP" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="（伪）随机背景图案">  <span>See the Pen <a href="https://codepen.io/whjin/pen/qvxEjP/">  （伪）随机背景图案</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="不间断的图片边界"><a href="#不间断的图片边界" class="headerlink" title="不间断的图片边界"></a>不间断的图片边界</h2><p class="codepen" data-height="465" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="EMQKvp" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="不间断的图片边界">  <span>See the Pen <a href="https://codepen.io/whjin/pen/EMQKvp/">  不间断的图片边界</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="灵活的椭圆形"><a href="#灵活的椭圆形" class="headerlink" title="灵活的椭圆形"></a>灵活的椭圆形</h2><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="eXVzzx" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="灵活的椭圆形">  <span>See the Pen <a href="https://codepen.io/whjin/pen/eXVzzx/">  灵活的椭圆形</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="平行四边形"><a href="#平行四边形" class="headerlink" title="平行四边形"></a>平行四边形</h2><p class="codepen" data-height="465" data-theme-id="0" data-default-tab="result" data-user="whjin" data-slug-hash="qvoqbo" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="平行四边形">  <span>See the Pen <a href="https://codepen.io/whjin/pen/qvoqbo/">  平行四边形</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Quasar设计Material和IOS风格的响应式网站</title>
      <link href="/2019/02/23/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE/%E4%BD%BF%E7%94%A8Quasar%E8%AE%BE%E8%AE%A1Material%E5%92%8CIOS%E9%A3%8E%E6%A0%BC%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E7%AB%99/"/>
      <url>/2019/02/23/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE/%E4%BD%BF%E7%94%A8Quasar%E8%AE%BE%E8%AE%A1Material%E5%92%8CIOS%E9%A3%8E%E6%A0%BC%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h1 id="Quasar"><a href="#Quasar" class="headerlink" title="Quasar"></a>Quasar</h1><p><code>Quasar</code>是一款基于<code>Vue.js</code>开发的<code>UI</code>框架，可以让你轻松构建网站简洁明快的界面，更重要的是它还能让你轻松做好<code>RWD</code>（响应式网站设计），除此之外还能帮助你加上<code>PWA</code>，使你的网页变成手机上的<code>App</code>。</p><span id="more"></span><p>以下内容来自官网<a href="http://www.quasarchs.com/">Quasar Framework</a>，概括了<code>Quasar</code>的主要特点。</p><p><code>Quasar</code>是<code>MIT</code>许可的开源框架（基于<a href="https://cn.vuejs.org/">Vue</a>），可帮助<code>Web</code>开发人员创建：</p><ul><li>响应式网站</li><li><code>PWA</code></li><li>通过<code>Apache Cordova</code>构建移动<code>App</code></li><li>多平台桌面应用程序（使用<code>Electron</code>）</li></ul><h2 id="选择Quasar的5个理由"><a href="#选择Quasar的5个理由" class="headerlink" title="选择Quasar的5个理由"></a>选择Quasar的5个理由</h2><ol><li>内建了<code>Material</code>及<code>IOS</code>两种主题</li><li>组件均内建<code>RWD</code>快速响应</li><li>多样的基础<code>UI</code>组件库</li><li>自带了<code>Vuex</code>、<code>VueRouter</code>、<code>Vuei18n</code>（多国语系）</li><li>强大的部署工具</li></ol><h2 id="安装指南"><a href="#安装指南" class="headerlink" title="安装指南"></a>安装指南</h2><p>首先安装<code>Node.js</code>和<code>vue-cli</code>，具体安装方法查看官网资料。</p><p>然后安装<code>Quasar</code>，<code>npm install -g quasar-cli</code>。</p><p>最后搭建项目：<code>quasar init &lt;folder name&gt;</code></p><p>取代<code>main.js</code>的<code>quasar.config.js</code>设置文件：</p><ul><li>引用Quasar内建的组件，可以不用在每个地方<code>import components</code></li><li><code>i18n</code>设置多国语系</li><li><code>icons</code>移除注释即可使用</li><li><code>开发模式</code>下的HTTPS以及<code>port</code>设置</li><li><code>CSS</code>动画设置</li><li>其他外部插件的设置</li><li><code>PWA</code>、<code>manifest</code>等设置</li></ul><h3 id="quasar-config-js"><a href="#quasar-config-js" class="headerlink" title="quasar.config.js"></a>quasar.config.js</h3><ul><li><code>plugins</code></li></ul><p>以前在<code>Vue</code>安装其他的<code>plugin</code>会在<code>main.js</code>里引入，而在<code>Quasar</code>就会取代<code>main.js</code>成为全部配置文件。</p><ul><li><code>css</code></li></ul><p>CSS的引入都会放在这个文件，默认的位置<code>/src/css</code>，所需的CSS库已经准备好，可以直接使用。</p><ul><li><code>extra</code></li></ul><p>这里是设置是否引入<a href="https://github.com/quasarframework/quasar-extras">quasar-extras</a>的内容。</p><table><thead><tr><th>Package</th><th>name</th><th>说明</th></tr></thead><tbody><tr><td>Roboto Font</td><td><code>roboto-font</code></td><td>Material主题的建议字体</td></tr><tr><td>Roboto Font Latin Extended</td><td><code>roboto-font-latin-ext</code></td><td>Material主题的建议字体</td></tr><tr><td><a href="https://material.io/tools/icons/?style=baseline">Material Icons</a></td><td><code>material-icons</code></td><td>Material风格的<code>icon</code></td></tr><tr><td>MDI (Material Design Icons)</td><td><code>mdi</code></td><td>Material风格的<code>icon</code>扩展</td></tr><tr><td>Font Awesome</td><td><code>fontawesome</code></td><td>自由选择<code>icon</code></td></tr><tr><td><a href="https://ionicons.com/">Ionicons</a></td><td><code>ionicons</code></td><td><code>ionicons</code>的<code>icon</code></td></tr><tr><td>Animate.css</td><td><code>animations</code></td><td>网页组件动画</td></tr></tbody></table><ul><li><code>scopeHoiting</code></li></ul><p>默认<code>true</code>，用来提升<code>webpack</code>运行时的性能</p><ul><li><code>VueRouterMode</code></li></ul><p>设置<code>Vue Router</code>的模式，有<code>history</code>、<code>hash</code>两种值。</p><ul><li><code>vueCompiler</code></li></ul><p>包含两种Vue的编译模式<code>vue runtime</code>+<code>compiler</code>，默认只有<code>runtime-only</code>运行时编译</p><ul><li><code>gzip</code></li></ul><p>使网站支持<code>gzip</code>的格式。</p><ul><li><code>analyze</code></li></ul><p>在<code>build</code>时会运行<code>webpack-bundle-analyzer</code>工具。</p><p><img src="https://d1dwq032kyr03c.cloudfront.net/upload/images/20181017/20111805z6Qs0mgwUv.png"></p><ul><li><code>extractCSS</code></li></ul><p>提取CSS到文件中。<a href="https://vue-loader-v14.vuejs.org/zh-cn/configurations/extract-css.html">VueLoader</a></p><ul><li><code>extendWebpack</code></li></ul><p>在<code>dev</code>模式中服务器的设置。</p><ul><li><p><code>https</code></p></li><li><p><code>port</code></p></li></ul><p>设置成指定的<code>port</code>，当quasar在运行<code>dev</code>模式时，遇到相同的<code>port</code>时会自己再<code>+1</code>。</p><ul><li><code>open</code></li></ul><p>是否在<code>dev</code>指令执行完成后，自动开启此网站的分页在浏览器上。</p><h3 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h3><p><code>quasar dev</code>打开初始页面，页面的<code>header</code>和<code>drawer</code>都是在<code>layout/MyLayout.vue</code>里。</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20181018/20111805omoWvkNkQj.png"></p><p>一些常用的属性：</p><table><thead><tr><th>属性</th><th>取值</th><th>说明</th></tr></thead><tbody><tr><td><code>side</code></td><td><code>String</code></td><td>有两个值<code>left</code>，<code>right</code>，决定要出现在左边还是右边</td></tr><tr><td><code>overlay</code></td><td><code>Boolean</code></td><td>设置侧边栏弹出时是挤压<code>q-page-container</code>还是直接盖在上面</td></tr><tr><td><code>content-style</code></td><td><code>Object</code></td><td>设置侧边栏的CSS</td></tr><tr><td><code>content-class</code></td><td><code>String/Object/Array</code></td><td>设置侧边栏的<code>class</code></td></tr><tr><td><code>mini</code></td><td><code>Boolean</code></td><td>把侧边栏缩小到只有<code>icon</code></td></tr></tbody></table><blockquote><p>这里的CSS要用<code>Object</code>的方式传入。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:content-style=&quot;&#123;color: &#x27;red&#x27;&#125;&quot;</span><br></pre></td></tr></table></figure><h2 id="旅游网站-Header"><a href="#旅游网站-Header" class="headerlink" title="旅游网站-Header"></a>旅游网站-Header</h2><p><strong>演示项目：</strong></p><ul><li>Toolbar</li><li>ToolbarTitle</li><li>Button</li></ul><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html" data-user="whjin" data-slug-hash="MLNxZN" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="旅游网站-Header">  <span>See the Pen <a href="https://codepen.io/whjin/pen/MLNxZN/">  旅游网站-Header</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h3 id="Toolbar"><a href="#Toolbar" class="headerlink" title="Toolbar"></a>Toolbar</h3><ul><li><code>color</code></li></ul><p>Quasar内建色：<a href="http://www.quasarchs.com/components/color-palette.html">color-palette</a></p><p>在<code>/src/css/themes/common.variables.styl</code>里面增加调色板的颜色。</p><ul><li><code>inverted</code></li></ul><p>让<strong>背景色</strong>变成<strong>白色</strong>，然后使原来白色的文字变成设置的<strong>背景色</strong>。</p><ul><li><code>glossy</code></li></ul><p>加上玻璃效果</p><h3 id="QToolbarTitle"><a href="#QToolbarTitle" class="headerlink" title="QToolbarTitle"></a>QToolbarTitle</h3><ul><li><code>gt-xs</code></li></ul><p>用来设置显示像素高于<code>576px</code>的页面样式。</p><ul><li><code>q-mr-md</code></li></ul><p><code>mr</code>等于<code>margin-right</code><br><code>sm</code>就是<code>size</code>的值为<code>small</code></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20181019/20111805O7e642RHjY.png"></p><p><strong>其他非外观的功能属性：</strong></p><ul><li><code>disable</code>，<code>:disable=&quot;true&quot;</code>时按钮禁用</li><li><code>label</code>设置按钮的文字</li><li><code>type</code>可以是<code>button</code>、<code>submit</code>、<code>reset</code>其中一种</li><li><code>loading</code>，值为<code>true</code>显示读取中</li><li><code>percentage</code>显示读取的圆圈，要跟<code>loading</code>一起使用</li><li><code>dark-percentage</code>用在亮色系的按钮上</li></ul><h3 id="List-ListItem"><a href="#List-ListItem" class="headerlink" title="List&amp;ListItem"></a>List&amp;ListItem</h3><p><strong>修改Drawer</strong></p><ul><li><code>v-model=&quot;rightDrawerOpen&quot;</code>控制弹出侧边栏的位置</li><li><code>content-class=&quot;bg-grey-10&quot;</code>背景色</li><li><code>side=&quot;right&quot;</code>按钮设置在多边</li></ul><p>设置了<code>rightDrawerOpen</code>需要加到<code>data</code>里。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;MyLayout&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">rightDrawerOpen</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手机端按钮"><a href="#手机端按钮" class="headerlink" title="手机端按钮"></a>手机端按钮</h3><p>控制显示的<code>class</code>用<code>lt-sm</code>只要像素小于<code>sm(768px)</code>就会显示该区域。</p><h3 id="设置List和ListItem"><a href="#设置List和ListItem" class="headerlink" title="设置List和ListItem"></a>设置List和ListItem</h3><p><strong>使用Dark属性使得组件内容在暗色背景下更好显示</strong></p><p>List中可用组件，这些组件需要自己去配置文件中自行引入。</p><ul><li><code>QListHeader</code>List上的标题</li><li><code>QItemSeparator</code>分割线</li><li><code>QItem</code></li><li><code>QItemSide</code>可分成左右两侧的区块</li><li><code>QItemMain</code>中间的区块</li><li><code>QItemTitle</code>区块中的标题</li></ul><h2 id="旅游网站-Carousel页面轮播"><a href="#旅游网站-Carousel页面轮播" class="headerlink" title="旅游网站-Carousel页面轮播"></a>旅游网站-Carousel页面轮播</h2><h3 id="建立新的首页"><a href="#建立新的首页" class="headerlink" title="建立新的首页"></a>建立新的首页</h3><p>在<code>src/pages/</code>下新建<code>Index</code>文件夹，并在此文件夹下新建<code>Index.vue</code>作为首页，删除原来的<code>Index.vue</code>文件。</p><h3 id="修改Vue-Router"><a href="#修改Vue-Router" class="headerlink" title="修改Vue Router"></a>修改Vue Router</h3><p>在<code>src/router/routers.js</code>修改<code>Index.vue</code>的路径。</p><h3 id="建立轮播的区块"><a href="#建立轮播的区块" class="headerlink" title="建立轮播的区块"></a>建立轮播的区块</h3><p>在<code>src/pages/Index</code>下新建<code>SectionCarousel.vue</code>，并在<code>Index.vue</code>中引入。</p><p>然后再<code>template</code>下的<code>q-page</code>中加入<code>section-carousel</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section-carousel</span>&gt;</span><span class="tag">&lt;/<span class="name">section-carousel</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="开始写轮播"><a href="#开始写轮播" class="headerlink" title="开始写轮播"></a>开始写轮播</h3><p><a href="http://www.quasarchs.com/components/carousel.html">官方Carousel</a></p><p>在设置文件<code>quasa.config.js</code>中引入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">framework</span>: &#123;</span><br><span class="line">  <span class="attr">components</span>: [</span><br><span class="line">    <span class="string">&#x27;QCarousel&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;QCarouselSlide&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;QCarouselControl&#x27;</span></span><br><span class="line">    ...</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加入轮播的图片-页面"><a href="#加入轮播的图片-页面" class="headerlink" title="加入轮播的图片&#x2F;页面"></a>加入轮播的图片&#x2F;页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-carousel</span></span></span><br><span class="line"><span class="tag">    <span class="attr">color</span>=<span class="string">&quot;white&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">infinite</span></span></span><br><span class="line"><span class="tag">    <span class="attr">arrows</span></span></span><br><span class="line"><span class="tag">    <span class="attr">autoplay</span></span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">&quot;400px&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-carousel-slide</span> <span class="attr">img-src</span>=<span class="string">&quot;statics/images/papercut1.jpg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-carousel-slide</span> <span class="attr">img-src</span>=<span class="string">&quot;statics/images/papercut2.jpg&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-carousel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="加入文字区块"><a href="#加入文字区块" class="headerlink" title="加入文字区块"></a>加入文字区块</h3><p>Quasar在<code>carousel</code>中有个子组件<code>QCarouselControl</code>用来自定义按钮在页面上。</p><p>根据官方文档的范例，<code>QCarouselControl</code>要放在<code>QCarousel</code>的最后面，也就是<code>QCarouselSlide</code>的后面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-carousel-control</span></span></span><br><span class="line"><span class="tag">  <span class="attr">position</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">slot</span>=<span class="string">&quot;control-nav&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">slot-scope</span>=<span class="string">&quot;carousel&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;carouselInput&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-carousel-control</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>q-carousel-control</code>中加入内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h6</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>新锐旅游网站<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;subtitle&quot;</span>&gt;</span>您身边的好玩专家<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>发现周边好玩的地方，玩得快乐，玩得精彩。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="加上CSS"><a href="#加上CSS" class="headerlink" title="加上CSS"></a>加上CSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;stylus&quot; scoped&gt;</span><br><span class="line">  <span class="selector-class">.carouselInput</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">90%</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.carouselInput</span> <span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span> center</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f50057</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.carouselInput</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span> <span class="number">48px</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.carouselInput</span> <span class="selector-class">.subtitle</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span> <span class="number">24px</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="调整手机版CSS"><a href="#调整手机版CSS" class="headerlink" title="调整手机版CSS"></a>调整手机版CSS</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.carouselInput</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span> <span class="number">48px</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.carouselInput</span> <span class="selector-class">.subtitle</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span> <span class="number">24px</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.carouselInput</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span> <span class="number">24px</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.carouselInput</span> <span class="selector-class">.subtitle</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span> <span class="number">16px</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="旅游网站-搜索框"><a href="#旅游网站-搜索框" class="headerlink" title="旅游网站-搜索框"></a>旅游网站-搜索框</h2><h3 id="加入搜索框"><a href="#加入搜索框" class="headerlink" title="加入搜索框"></a>加入搜索框</h3><p><strong><code>input</code></strong></p><p>首先到<code>quasar.config.js</code>中引入<code>QInput</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">framework</span>: &#123;</span><br><span class="line">  <span class="attr">components</span>: [<span class="string">&#x27;QInput&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>&lt;div class=&quot;main&quot;&gt;</code>后面加入<code>q-input</code>内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">inverted-light</span></span></span><br><span class="line"><span class="tag">  <span class="attr">color</span>=<span class="string">&quot;white&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">placeholder</span>=<span class="string">&quot;输入城市/景点 或是想去的地方&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:after</span>=<span class="string">&quot;[&#123;icon:&#x27;fas fa-search-location&#x27;&#125;]&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-input</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>inverted</code>显示<strong>背景</strong></li><li><code>color</code>主题颜色</li><li><code>after</code>用来显示输入框前后<code>icon</code></li></ul><p>最后绑定<code>v-model=&quot;search&quot;</code>，此时需要在<code>data</code>中添加<code>value</code>值，否则会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">search</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调整排版"><a href="#调整排版" class="headerlink" title="调整排版"></a>调整排版</h3><blockquote><p>使用<a href="http://www.quasarchs.com/components/flex-css.html">Flex CSS</a>调整组件长度。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-xs-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8 col-xs-10&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">...</span>&gt;</span><span class="tag">&lt;/<span class="name">q-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-xs-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自动填入autocomplete"><a href="#自动填入autocomplete" class="headerlink" title="自动填入autocomplete"></a>自动填入<code>autocomplete</code></h3><p>引入<code>QAutocomplete</code>组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">framework</span>: &#123;</span><br><span class="line">  <span class="attr">components</span>: [<span class="string">&#x27;QAutocomplete&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加入<code>q-autocomplete</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-autocomplete</span> <span class="attr">:static-data</span>=<span class="string">&quot;&#123;field: &#x27;label&#x27;, list: countries&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-input</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>static-data</code><ul><li><code>field</code>用于搜索数据的栏位</li><li><code>list</code>搜索的数据来源</li></ul></li></ul><h3 id="设置静态数据"><a href="#设置静态数据" class="headerlink" title="设置静态数据"></a>设置静态数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">countries</span>: [</span><br><span class="line">  &#123;<span class="attr">label</span>: <span class="string">&#x27;广州市&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;fas fa-map-marker-alt&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">label</span>: <span class="string">&#x27;深圳市&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;fas fa-map-marker-alt&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">label</span>: <span class="string">&#x27;珠海市&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;fas fa-map-marker-alt&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">label</span>: <span class="string">&#x27;[网美景点]香山公园，秋季赏枫胜地&#x27;</span>, <span class="attr">stamp</span>: <span class="string">&#x27;北京市&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">label</span>: <span class="string">&#x27;珠海长隆[海豚剧场]精彩不容错过！精彩变身演出抢先看&#x27;</span>, </span><br><span class="line">   <span class="attr">stamp</span>: <span class="string">&#x27;珠海，长隆&#x27;</span>, <span class="attr">rightTextColor</span>: <span class="string">&#x27;pink-13&#x27;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="自定义过滤器filter"><a href="#自定义过滤器filter" class="headerlink" title="自定义过滤器filter"></a>自定义过滤器filter</h3><p>在<code>q-autocomplete</code>中加入<code>filter</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-autocomplete</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:static-data</span>=<span class="string">&quot;&#123;field: &#x27;label&#x27;, list: countries&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:filter</span>=<span class="string">&quot;advFilter&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><p>引入<code>lodash</code>处理<code>filter</code>。</p><h2 id="旅游网站-Popover弹出框"><a href="#旅游网站-Popover弹出框" class="headerlink" title="旅游网站-Popover弹出框"></a>旅游网站-Popover弹出框</h2><h3 id="加入Popover组件"><a href="#加入Popover组件" class="headerlink" title="加入Popover组件"></a>加入Popover组件</h3><p>在<code>quasar.config.js</code>中引入<code>QPopover</code>。<a href="http://www.quasarchs.com/components/popover.html">Popover</a></p><ul><li><code>no-focus</code>不设焦点</li><li><code>fit</code>弹出框跟输入框等长</li><li><code>v-show=&quot;!search&quot;</code>弹框和候选框不同时出现</li></ul><h3 id="内容排版"><a href="#内容排版" class="headerlink" title="内容排版"></a>内容排版</h3><p>使用<code>FlexCSS</code>来进行排版。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row viewList&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-4 col-xs-12&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-4 col-xs-12&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-4 col-xs-12&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设配手机端，在CSS底部加入：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">576px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.viewList</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">280px</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决在手机像素下原来<code>Popover</code>不能自动<code>fix</code>的问。这里应该是小于Popover的<code>fix</code>的<strong>最小宽度</strong>。</p><h3 id="设置内容-List-Item"><a href="#设置内容-List-Item" class="headerlink" title="设置内容(List&amp;Item)"></a>设置内容(List&amp;Item)</h3><p>列表类直接用<code>list</code>做最快。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-4 col-xs-12&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>热门目的地<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span>珠海<span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="加入右侧Icon及文字"><a href="#加入右侧Icon及文字" class="headerlink" title="加入右侧Icon及文字"></a>加入右侧Icon及文字</h3><p>在<code>src/components</code>下新建<code>LIcon.vue</code>，提升组件复用。</p><p>主要使用了<code>q-icon</code>来引入<a href="http://www.fontawesome.com.cn/">Font Awesome</a>的<code>icon</code>。</p><h3 id="在原来的页面引入子组件"><a href="#在原来的页面引入子组件" class="headerlink" title="在原来的页面引入子组件"></a>在原来的页面引入子组件</h3><blockquote><p>具体代码：<br><a href="https://github.com/whjin/make-quasar/blob/master/src/pages/Index/SectionCarousel.vue">SectionCarousel.vue</a><br><a href="https://github.com/whjin/make-quasar/blob/master/src/components/LIcon.vue">src&#x2F;components&#x2F;LIcon.vue</a></p></blockquote><h2 id="旅游网站-Cards卡片"><a href="#旅游网站-Cards卡片" class="headerlink" title="旅游网站-Cards卡片"></a>旅游网站-Cards卡片</h2><h3 id="建立并引入第二个区块"><a href="#建立并引入第二个区块" class="headerlink" title="建立并引入第二个区块"></a>建立并引入第二个区块</h3><p>在<code>src/pages/Index</code>下新建<code>SectionCards.vue</code>组件，用来作为卡片区块。</p><p>在<code>Index.vue</code>中引入<code>SectionCards.vue</code>。</p><h3 id="区块内版面规划"><a href="#区块内版面规划" class="headerlink" title="区块内版面规划"></a>区块内版面规划</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-12&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>本月最精选<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3 col-sm-6 col-xs-12&quot;</span>&gt;</span>卡片一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3 col-sm-6 col-xs-12&quot;</span>&gt;</span>卡片二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3 col-sm-6 col-xs-12&quot;</span>&gt;</span>卡片三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3 col-sm-6 col-xs-12&quot;</span>&gt;</span>卡片四<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="制作卡片"><a href="#制作卡片" class="headerlink" title="制作卡片"></a>制作卡片</h3><p>卡片内的内容都会大量重复，所以直接把卡片独立成一个组件。</p><p>在<code>src/components/</code>下新建一个<code>LCard.vue</code>。</p><blockquote><p>在<code>quasar.config.js</code>中引入卡片组件<a href="http://www.quasarchs.com/components/card.html">Cards</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">framework</span>: &#123;</span><br><span class="line">  <span class="attr">components</span>: [</span><br><span class="line">    <span class="string">&#x27;QCard&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;QCardTitle&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;QCardMain&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;QCardMedia&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;QCardSeparator&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;QCardActions&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>卡片主要分成三个部分：</p><ul><li><code>q-card-media</code>放照片影片的区块</li><li><code>q-card-title</code>卡片的标题</li><li><code>q-card-main</code>卡片的主内容</li><li><code>q-card-actions</code>用来放按钮等操作的区块</li><li><code>q-card-separator</code>分隔线</li></ul><p>在<code>SectionCards.vue</code>中引入<code>LCard.vue</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3 col-sm-6 col-xs-12&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">l-card</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">LCard</span> <span class="keyword">from</span> <span class="string">&#x27;src/components/LCard.vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="title class_">LCard</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加上Icon"><a href="#加上Icon" class="headerlink" title="加上Icon"></a>加上Icon</h3><p>继续补上<strong>评分</strong>和<strong>地标</strong>的<code>Icon</code>。</p><h3 id="让LCard的文字能从父组件引入"><a href="#让LCard的文字能从父组件引入" class="headerlink" title="让LCard的文字能从父组件引入"></a>让LCard的文字能从父组件引入</h3><p>让<code>LCard.vue</code>能够动态获取数据：</p><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="html" data-user="whjin" data-slug-hash="OqJpKq" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="Quasar-LCard.vue">  <span>See the Pen <a href="https://codepen.io/whjin/pen/OqJpKq/">  Quasar-LCard.vue</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h3 id="在SectionCards设置数据"><a href="#在SectionCards设置数据" class="headerlink" title="在SectionCards设置数据"></a>在SectionCards设置数据</h3><p>新增一个<code>data</code>数据<code>monthBestList</code>，然后在<code>template</code>模板中使用<code>v-for</code>获取数据并显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;(data,index) in monthBestList&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-3 col-sm-6 col-xs-12 q-pa-sm&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">l-card</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:title</span>=<span class="string">&quot;data.title&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:rate</span>=<span class="string">&quot;data.rate&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:comment</span>=<span class="string">&quot;data.comment&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:view</span>=<span class="string">&quot;data.view&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:locate</span>=<span class="string">&quot;data.locate&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:image</span>=<span class="string">&quot;data.image&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="调整CSS及layout"><a href="#调整CSS及layout" class="headerlink" title="调整CSS及layout"></a>调整CSS及layout</h3><h2 id="旅游网站-制作景点详情页"><a href="#旅游网站-制作景点详情页" class="headerlink" title="旅游网站-制作景点详情页"></a>旅游网站-制作景点详情页</h2><p>在<code>src/pages</code>下新建<code>place</code>文件夹，并在此文件夹下新建<code>Index.vue</code>作为文章的主要页面。</p><h3 id="设置Vue-Router"><a href="#设置Vue-Router" class="headerlink" title="设置Vue Router"></a>设置Vue Router</h3><p>要进行页面导航&#x2F;切换需要用到Vue Router。</p><p>在<code>router/routes.js</code>中加入导航：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;layouts/MyLayout.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;<span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;pages/Index&#x27;</span>)&#125;,</span><br><span class="line">      &#123;<span class="attr">path</span>: <span class="string">&#x27;Place&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;pages/Place&#x27;</span>)&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>在<code>http://localhost:8080/#/place</code>中查看效果。</p><h3 id="加入视差-Parallax-组件"><a href="#加入视差-Parallax-组件" class="headerlink" title="加入视差(Parallax)组件"></a>加入视差(Parallax)组件</h3><blockquote><p><a href="http://www.quasarchs.com/components/parallax.html">视差(Parallax)</a></p></blockquote><p>在<code>quasar.config.js</code>中引入<code>QParallax</code>组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-parallax</span> <span class="attr">:src</span>=<span class="string">&quot;localData.image&quot;</span> <span class="attr">:height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; localData.title &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">q-parallax</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">q-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="主题部分的页面排版"><a href="#主题部分的页面排版" class="headerlink" title="主题部分的页面排版"></a>主题部分的页面排版</h3><p>按照8格+4格进行排版：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row place-main&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS补上左右<code>margin 5%</code>让页面看起来不会太满。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.place-main</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span> <span class="number">5%</span></span><br><span class="line">  <span class="attribute">margin-right</span> <span class="number">5%</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置左边画面"><a href="#设置左边画面" class="headerlink" title="设置左边画面"></a>设置左边画面</h3><p>这里要用Quasar的面包屑<a href="http://www.quasarchs.com/components/breadcrumbs.html">BreadCrumbs</a>组件。</p><p>在<code>quasar.config.js</code>中引入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;QBreadcrumbs&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;QBreadcrumbsEl&#x27;</span>,</span><br></pre></td></tr></table></figure><h3 id="加上景点信息及评分的排版"><a href="#加上景点信息及评分的排版" class="headerlink" title="加上景点信息及评分的排版"></a>加上景点信息及评分的排版</h3><p>这里按照<code>8格+4格</code>设定，左侧栏要设为文字靠右对齐。</p><h3 id="加上景点信息"><a href="#加上景点信息" class="headerlink" title="加上景点信息"></a>加上景点信息</h3><p>引入<code>LIcon.vue</code>图标组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-8 info-left&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">l-icon</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;q-mt-sm&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:text</span>=<span class="string">&quot;&#x27;景点编号：&#x27; + localData.id&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:icon</span>=<span class="string">&quot;&#x27;fas fa-tag&#x27;&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:color</span>=<span class="string">&quot;&#x27;grey&#x27;&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="加上评分"><a href="#加上评分" class="headerlink" title="加上评分"></a>加上评分</h3><p>评分组件<a href="http://www.quasarchs.com/components/rating.html">Rating</a></p><h2 id="表单组件-Field"><a href="#表单组件-Field" class="headerlink" title="表单组件-Field"></a>表单组件-Field</h2><blockquote><p><a href="http://www.quasarchs.com/components/field.html">表单字段(Field)</a></p></blockquote><p>Field的组件有<code>QInput</code>、<code>QSeclet</code>、<code>QDatetime</code>、<code>QChipsInput</code></p><h3 id="引入组件"><a href="#引入组件" class="headerlink" title="引入组件"></a>引入组件</h3><p>在<code>quasar.config.js</code>中引入组件</p><h3 id="基本范例"><a href="#基本范例" class="headerlink" title="基本范例"></a>基本范例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-field</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">&quot;信箱&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">suffix</span>=<span class="string">&quot;@gmail.com&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;model&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>label</code>设置标题文字</li><li><code>icon</code>设置标题的<code>icon</code></li><li><code>icon-color</code>设置标题<code>icon</code>的颜色</li><li><code>helper</code>组件地下的辅助文字</li><li><code>error</code>控制组件在错误时会变成红色警示</li><li><code>error-label</code>错误时会显示的文字</li><li><code>warning</code>控制组件是否为警告状态</li><li><code>warning-label</code>同<code>error-label</code></li><li><code>count</code>显示目前输入多少文字</li><li><code>inset</code>用来为没有<code>icon/label</code>的栏位留空</li><li><code>orientation</code>组件的排列方向（水平<code>horizontal</code>&#x2F;垂直<code>vertical</code>）</li><li><code>label-width</code>文字区块的宽度（以<code>12</code>格宽度划分）假设文字的宽度要和输入一样长，则设定为<code>6</code></li><li><code>dark</code>是文字反白，适用在暗色背景下</li></ul><h2 id="表单组件-Chips-Input"><a href="#表单组件-Chips-Input" class="headerlink" title="表单组件-Chips Input"></a>表单组件-Chips Input</h2><blockquote><p><a href="http://www.quasarchs.com/components/chips-input.html">Chips Input</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-chips-input</span> <span class="attr">float-label</span>=<span class="string">&quot;兴趣&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;model&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      model: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="外观属性"><a href="#外观属性" class="headerlink" title="外观属性"></a>外观属性</h3><ul><li><code>chips-color</code>改变<code>chips</code>的颜色</li><li><code>chips-bg-color</code>改变<code>chips</code>的背景颜色</li><li><code>add-icon</code>替换输入时显示在右边的<code>enter</code>按钮<code>icon</code></li></ul><h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><ul><li><code>prefix</code>加入前缀文字（不影响<code>array</code>内的值）</li><li><code>suffix</code>加入后缀文字，可以跟前缀一起用</li><li><code>hide-underline</code>移除原本输入框的底线</li><li><code>no-parent-field</code>如果外面套有QField，可以避免跟QField的效果连结</li><li><code>upper-case</code>自动转大写</li><li><code>lower-case</code>自动转小写</li></ul><p><strong>大部分组件都会重复的基本属性</strong></p><ul><li><code>float-label</code>悬浮标题</li><li><code>stack-label</code>固定式标题</li><li><code>color</code>组件颜色</li><li><code>inverted</code>是否有背景色</li><li><code>inverted-light</code>改善亮色背景下组件的显示</li><li><code>dark</code>改善暗色背景下组件的显示</li><li><code>error</code>错误</li><li><code>warning</code>警告</li><li><code>disable</code>跟<code>readonly</code>类似，但是会有灰键效果</li></ul><h3 id="事件属性"><a href="#事件属性" class="headerlink" title="事件属性"></a>事件属性</h3><ul><li><code>@input(newVal)</code>输入文字的同事就会触发</li><li><code>@change(newVal)</code>数组数值改变触发</li><li><code>@clear(clearVal)</code>数组被清空时触发</li><li><code>@duplicate(val)</code>输入重复的值时触发</li><li><code>@add(val)</code>输入时触发</li><li><code>@remove(&#123;index, value&#125;)</code>其中一个组件被删除时触发</li></ul><h3 id="方法属性-Vue-Methods"><a href="#方法属性-Vue-Methods" class="headerlink" title="方法属性(Vue Methods)"></a>方法属性(Vue Methods)</h3><p>这里的用法通常都是在组件中加入<code>red</code>属性，然后再其他地方使用<code>this.$refs</code>来对这些组件进行操作。</p><ul><li><code>add(value)</code>加入值到组件的数组中</li><li><code>remove(index)</code>删除指定索引的值</li><li><code>focus()</code>聚焦在组件上</li><li><code>select()</code>选择组件</li><li><code>clear()</code>清除组件中数组的值</li></ul><h2 id="表单组件-Radio"><a href="#表单组件-Radio" class="headerlink" title="表单组件-Radio"></a>表单组件-Radio</h2><blockquote><p>引入组件<code>QRadio</code>，<a href="http://www.quasarchs.com/components/radio.html">单选框(Radio)</a></p></blockquote><h3 id="与QField一起使用"><a href="#与QField一起使用" class="headerlink" title="与QField一起使用"></a>与QField一起使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-field</span></span></span><br><span class="line"><span class="tag">        <span class="attr">label</span>=<span class="string">&quot;黄金周去哪玩？&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;model&quot;</span> <span class="attr">label</span>=<span class="string">&quot;去杭州&quot;</span> <span class="attr">val</span>=<span class="string">&quot;hangzhou&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;model&quot;</span> <span class="attr">label</span>=<span class="string">&quot;去北京&quot;</span> <span class="attr">val</span>=<span class="string">&quot;beijing&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;model&quot;</span> <span class="attr">label</span>=<span class="string">&quot;去成都&quot;</span> <span class="attr">val</span>=<span class="string">&quot;chengdu&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基本属性-1"><a href="#基本属性-1" class="headerlink" title="基本属性"></a>基本属性</h3><ul><li><code>val</code>存储绑定变量的值</li><li><code>label</code>组件上的文字</li><li><code>left-label</code>设定为<code>true</code>时，文字会改变显示在选项的左边</li><li><code>checked-icon</code>改变选取时的icon</li><li><code>unchecked-icon</code>改变未选取时的icon</li><li><code>color</code>改变组件的颜色</li><li><code>keep-color</code>没选取时也会有颜色（默认是灰色）</li><li><code>readonly</code>只读属性</li><li><code>disable</code>禁用</li><li><code>dark</code>在暗色背景时，凸显组件文字</li><li><code>no-focus</code>不会触发聚焦事件</li></ul><h3 id="基本事件"><a href="#基本事件" class="headerlink" title="基本事件"></a>基本事件</h3><ul><li><code>@input</code>选取时触发</li><li><code>@blur</code>失去焦点（点到其他地方）时触发</li><li><code>@focus</code>聚焦（点选该组件）时触发</li></ul><h2 id="表单组件-Checkbox"><a href="#表单组件-Checkbox" class="headerlink" title="表单组件-Checkbox"></a>表单组件-Checkbox</h2><blockquote><p><a href="http://www.quasarchs.com/components/checkbox.html">复选框(Checkbox)</a></p></blockquote><h3 id="引入组件-1"><a href="#引入组件-1" class="headerlink" title="引入组件"></a>引入组件</h3><p>在<code>quasai.config.js</code>中引入<code>QCheckbox</code>。</p><p>复选框需要绑定数据类型为<code>Array</code>，也需要和<code>QField</code>一起使用。</p><h3 id="基本属性-2"><a href="#基本属性-2" class="headerlink" title="基本属性"></a>基本属性</h3><ul><li><code>val</code>数值，加入到<code>v-model</code>绑定的变量中</li><li><code>true-value</code>如果<code>model</code>不是数组，在选取时会给<code>model</code>值<code>true</code>，用来取代<code>true</code></li><li><code>false-value</code>同上解析</li><li><code>indeterminate-value</code>用来替换<code>null</code></li><li><code>toggle-indeterminate</code>使点击可以让状态在以上三个中转换</li></ul><h2 id="表单组件-Toggle"><a href="#表单组件-Toggle" class="headerlink" title="表单组件-Toggle"></a>表单组件-Toggle</h2><blockquote><p><a href="http://www.quasarchs.com/components/toggle.html">切换键Toggle</a></p></blockquote><h3 id="引入组件-2"><a href="#引入组件-2" class="headerlink" title="引入组件"></a>引入组件</h3><p>在<code>quasar.config.js</code>中引入<code>QToggle</code></p><h3 id="基本属性-3"><a href="#基本属性-3" class="headerlink" title="基本属性"></a>基本属性</h3><ul><li><code>val</code>，<code>v-model</code>是<code>Array</code>，会加在<code>Array</code>内</li><li><code>icon</code>如果底下两个（<code>checke-icon</code>、<code>unchecked-icon</code>）icon 会被覆盖掉</li></ul><h2 id="表单组件-Option-Group"><a href="#表单组件-Option-Group" class="headerlink" title="表单组件-Option Group"></a>表单组件-Option Group</h2><blockquote><p><a href="http://www.quasarchs.com/components/option-group.html">选项组option-group</a></p></blockquote><p>把选项写进一个<code>Array</code>中，然后直接用<code>v-for</code>全部渲染出来。</p><h3 id="引入组件-3"><a href="#引入组件-3" class="headerlink" title="引入组件"></a>引入组件</h3><p>每一步都是一样的，在<code>quasar.config.js</code>中引入<code>QOptionGroup</code>。</p><h3 id="基本范例-1"><a href="#基本范例-1" class="headerlink" title="基本范例"></a>基本范例</h3><p><strong>CheckBox</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-field</span> <span class="attr">orientation</span>=<span class="string">&quot;vertical&quot;</span> <span class="attr">label</span>=<span class="string">&quot;要选购的商品&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">q-option-group</span></span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">v-model</span>=<span class="string">&quot;model&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:options</span>=<span class="string">&quot;optionList&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    &lt;/q-field</span><br><span class="line">    &gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;index&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">model</span>: [],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">optionList</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">label</span>: <span class="string">&#x27;鸡蛋&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;egg&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">label</span>: <span class="string">&#x27;海带&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;seaweed&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">label</span>: <span class="string">&#x27;鸡腿&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;lag&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">label</span>: <span class="string">&#x27;牛肉&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;beef&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>toggle</code>、<code>radio</code>和<code>checkbox</code>类似，只需要修改<code>type</code>属性值即可</strong></p><h2 id="表单组件-Datetime"><a href="#表单组件-Datetime" class="headerlink" title="表单组件-Datetime"></a>表单组件-Datetime</h2><p>时间日期输入框Datetime，有Material和IOS两种风格。</p><h3 id="引入组件-4"><a href="#引入组件-4" class="headerlink" title="引入组件"></a>引入组件</h3><p>有两个组件需要引入，一个是输入时显示，一个是默认就是显示的。分别为：</p><p>日期时间输入<a href="http://www.quasarchs.com/components/datetime-input.html">Datetime Input</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">framework</span>: &#123;</span><br><span class="line">  <span class="attr">components</span>: [<span class="string">&#x27;QDatetime&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日期时间选择器<a href="http://www.quasarchs.com/components/datetime-picker.html">Datetime Picker</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">framework</span>: &#123;</span><br><span class="line">  <span class="attr">components</span>: [<span class="string">&#x27;QDatetimePicker&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Datetime Input</span><br><span class="line"><span class="tag">&lt;<span class="name">q-datetime</span> <span class="attr">v-model</span>=<span class="string">&quot;model&quot;</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">// Datetime Picker</span><br><span class="line"><span class="tag">&lt;<span class="name">q-datetime-picker</span> <span class="attr">v-model</span>=<span class="string">&quot;model&quot;</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基本属性-4"><a href="#基本属性-4" class="headerlink" title="基本属性"></a>基本属性</h3><ul><li><p><code>type</code>，一共有三个值，默认是<code>date</code></p><ol><li><code>date</code>单纯日期</li><li><code>time</code>单纯时间</li><li><code>datetime</code>时间+日期</li></ol></li><li><p><code>minimal</code>，不显示标题</p></li><li><p><code>min max</code>，设置能够选择的日期时间范围</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-datetime</span> <span class="attr">v-model</span>=<span class="string">&quot;model&quot;</span> <span class="attr">type</span>=<span class="string">&quot;datetime&quot;</span> <span class="attr">max</span>=<span class="string">&quot;2019/02/27 2:30&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>format-model</code>存储的时间格式，有四种选择：</p><ol><li><code>auto</code>2019-02-27T12:01:00.000+08:00</li><li><code>date</code>“2019-02-27T04:00:00.000Z”</li><li><code>number</code>1541044860000</li><li><code>string</code>2019-02-27T12:01:00.000+08:00</li></ol></li><li><p><code>format24h</code>设为24时制的时钟</p></li></ul><h3 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h3><p><strong>Input</strong></p><ul><li><code>show()</code>显示输入</li><li><code>hide()</code>隐藏输入</li><li><code>toggle()</code>切换输入</li><li><code>clear()</code>清空model</li></ul><p><strong>Picker</strong></p><ul><li><code>setYear(val)</code>设置年</li><li><code>setMonth(val)</code>设置月</li><li><code>setDay(val)</code>设置日</li><li><code>setHour(val)</code>设置时</li><li><code>setMinute(val)</code>设置分</li><li><code>setView(val)</code>设置要显示的模式</li><li><code>clear()</code>清空model</li></ul><h2 id="表单组件-Editor"><a href="#表单组件-Editor" class="headerlink" title="表单组件-Editor"></a>表单组件-Editor</h2><h3 id="内建的文章编辑器Editor"><a href="#内建的文章编辑器Editor" class="headerlink" title="内建的文章编辑器Editor"></a>内建的文章编辑器Editor</h3><blockquote><p><a href="http://www.quasarchs.com/components/editor---wysiwyg.html">编辑器（WYSIWYG）</a></p></blockquote><p>在<code>quasar.config.js</code>中引入<code>QEditor</code>组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-editor</span> <span class="attr">v-model</span>=<span class="string">&quot;model&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>主要设置页面的属性有三个：</p><ul><li><p><code>Toolbar</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-editor</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;model&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:toolbar</span>=<span class="string">&quot;[</span></span></span><br><span class="line"><span class="string"><span class="tag">      [&#x27;bold&#x27;,&#x27;italic&#x27;,&#x27;strike&#x27;,&#x27;underline&#x27;],</span></span></span><br><span class="line"><span class="string"><span class="tag">      [&#x27;hr&#x27;,&#x27;link&#x27;],</span></span></span><br><span class="line"><span class="string"><span class="tag">      [&#x27;fullscreen&#x27;],</span></span></span><br><span class="line"><span class="string"><span class="tag">      [&#x27;print&#x27;]</span></span></span><br><span class="line"><span class="string"><span class="tag">    ]&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>Definitions</code></p><ul><li><code>label</code>要显示的文字</li><li><code>icon</code>要显示的icon</li><li><code>tip</code>小提示</li><li><code>cmd</code>如果不想用默认的功能名称，可以用这个绑回你要的功能</li><li><code>handler</code>自定义<code>methods</code>的<code>function</code>名称  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">save</span>: &#123;</span><br><span class="line">  <span class="attr">label</span>:<span class="string">&#x27;保存&#x27;</span>,</span><br><span class="line">  <span class="attr">handler</span>: functionName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>disable</code>禁用</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-editor</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">&quot;model&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:toolbar</span>=<span class="string">&quot;[</span></span></span><br><span class="line"><span class="string"><span class="tag">        [&#x27;bold&#x27;,&#x27;italic&#x27;,&#x27;strike&#x27;,&#x27;underline&#x27;],</span></span></span><br><span class="line"><span class="string"><span class="tag">        [&#x27;hr&#x27;,&#x27;link&#x27;],</span></span></span><br><span class="line"><span class="string"><span class="tag">        [&#x27;fullscreen&#x27;],</span></span></span><br><span class="line"><span class="string"><span class="tag">        [&#x27;print&#x27;]</span></span></span><br><span class="line"><span class="string"><span class="tag">    ]&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:definitions</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">            bold:&#123;label:&#x27;粗体&#x27;,icon:null,tip:&#x27;这是粗体&#x27;&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">            &#125;&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Font</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-editor</span> <span class="attr">v-model</span>=<span class="string">&quot;model&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:toolbar</span>=<span class="string">&quot;[</span></span></span><br><span class="line"><span class="string"><span class="tag">        [&#x27;arial&#x27;,&#x27;arial_black&#x27;,&#x27;comic_sans&#x27;],</span></span></span><br><span class="line"><span class="string"><span class="tag">    ]&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:fonts</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">              arial:&#x27;Arial&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">              arial_black:&#x27;Arial Black&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">              comic_sans:&#x27;Comic Sans MS&#x27;</span></span></span><br><span class="line"><span class="string"><span class="tag">              &#125;&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基本事件-1"><a href="#基本事件-1" class="headerlink" title="基本事件"></a>基本事件</h3><ul><li><code>@input</code>输入时触发</li><li><code>@fullscreen(true/false)</code>切换全屏时触发</li></ul><h2 id="表单组件-Knob旋转按钮"><a href="#表单组件-Knob旋转按钮" class="headerlink" title="表单组件-Knob旋转按钮"></a>表单组件-Knob旋转按钮</h2><blockquote><p><a href="http://www.quasarchs.com/components/knob.html">旋转按钮（Knob)</a></p></blockquote><p>在<code>quasar.config.js</code>中引入<code>QKnob</code>组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-knob</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">&quot;model&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:min</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:max</span>=<span class="string">&quot;25&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">class</span>=<span class="string">&quot;q-mr-xs&quot;</span> <span class="attr">name</span>=<span class="string">&quot;volume_up&quot;</span>/&gt;</span></span><br><span class="line">    &#123;&#123;model&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">q-knob</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性</strong></p><ul><li><code>size</code>调整组件的大小，默认<code>120px</code></li><li><code>step</code>数值的间距</li><li><code>decimals</code>小数点显示的位数</li><li><code>min max</code>最小值和最大值</li><li><code>color</code>、<code>track-color</code>颜色、未到达的旋转轴颜色</li><li><code>line-width</code>线条的宽度，默认<code>6px</code></li></ul><p><strong>事件</strong></p><ul><li><code>@input(val)</code>改变时立即触发</li><li><code>@change(val)</code>改变时触发</li><li><code>@drag-value(val)</code>拖动时就会触发</li></ul><h2 id="弹窗-Action-Sheet"><a href="#弹窗-Action-Sheet" class="headerlink" title="弹窗-Action Sheet"></a>弹窗-Action Sheet</h2><blockquote><p><a href="http://www.quasarchs.com/components/action-sheet.html">操作表(ActionSheet)</a></p></blockquote><p>在<code>quasar.config.js</code>中引入<code>ActionSheet</code>组件，有Material和IOS两种风格。</p><p><strong><code>pluginS</code>形式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">framework</span>: &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;ActionSheet&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>components</code>形式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">framework</span>: &#123;</span><br><span class="line">  <span class="attr">components</span>: [<span class="string">&#x27;QActionSheet&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="作为Plugins的使用方法"><a href="#作为Plugins的使用方法" class="headerlink" title="作为Plugins的使用方法"></a>作为Plugins的使用方法</h3><p><strong>Vue内</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$q</span>.<span class="title function_">actionSheet</span>(configObj)</span><br></pre></td></tr></table></figure><p><strong>Vue外</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ActionSheet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;quasar&#x27;</span>;</span><br><span class="line"><span class="title class_">ActionSheet</span>.<span class="title function_">create</span>(configObj)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$q</span>.<span class="title function_">actionSheet</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;操作选择&#x27;</span>,</span><br><span class="line">    <span class="attr">grid</span>: <span class="literal">true</span>, <span class="comment">//使用格状排版（一排三个）</span></span><br><span class="line">    <span class="attr">dismissLabel</span>: <span class="string">&#x27;取消&#x27;</span>, <span class="comment">//取消按钮的文字 只有IOS主题下可用 默认是cancel</span></span><br><span class="line">    <span class="attr">actions</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;抓虫&#x27;</span>,</span><br><span class="line">            <span class="attr">color</span>: <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">            <span class="attr">icon</span>: <span class="string">&#x27;fas fa-bug&#x27;</span>,</span><br><span class="line">            <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;抓虫大师&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;分享到微博&#x27;</span>,</span><br><span class="line">            <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">            <span class="attr">icon</span>: <span class="string">&#x27;fas fa-weibo&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;请人帮忙&#x27;</span>,</span><br><span class="line">            <span class="attr">color</span>: <span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">            <span class="attr">icon</span>: <span class="string">&#x27;fas fa-alipay&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">action</span> =&gt;</span> &#123;&#125;).<span class="title function_">watch</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><h3 id="作为Component的使用方法"><a href="#作为Component的使用方法" class="headerlink" title="作为Component的使用方法"></a>作为Component的使用方法</h3><p>跟上面的操作基本上一样，只是能够多监听<code>@show</code>和<code>@hide</code>时间。</p><p><strong>事件</strong></p><ul><li><code>@ok</code>点选选项时触发</li><li><code>@cancel</code>取消时触发</li><li><code>@show</code>显示时触发</li><li><code>@hide</code>隐藏时触发</li><li><code>@escape-key</code>按Esc时触发</li></ul><h2 id="弹窗-Dialog"><a href="#弹窗-Dialog" class="headerlink" title="弹窗-Dialog"></a>弹窗-Dialog</h2><p>基本跟上面的Action Sheet一样的操作方法。</p><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="js" data-user="whjin" data-slug-hash="GegPVd" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="弹出窗口-Dialog">  <span>See the Pen <a href="https://codepen.io/whjin/pen/GegPVd/">  弹出窗口-Dialog</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h3 id="作为Component的使用方法-1"><a href="#作为Component的使用方法-1" class="headerlink" title="作为Component的使用方法"></a>作为Component的使用方法</h3><p>在配置文件中引入<code>QDialog</code>组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-dialog</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;message&quot;</span>&gt;</span>正文<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;body&quot;</span>&gt;</span>主体<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="弹窗-Modal"><a href="#弹窗-Modal" class="headerlink" title="弹窗-Modal"></a>弹窗-Modal</h2><blockquote><p><a href="http://www.quasarchs.com/components/modal.html">模态框(Modal)</a></p></blockquote><p>引入<code>QModal</code>组件，另外加入<code>directives</code>的<code>CloseOverlay</code>。</p><p>使用按钮或是<code>method</code>将<code>modal</code>设为<code>true</code>才能打开<code>modal</code>。</p><p><strong>全页显示</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> @<span class="attr">click</span>=<span class="string">&quot;model=true&quot;</span>&gt;</span>Open<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q-modal</span> <span class="attr">v-model</span>=<span class="string">&quot;model&quot;</span> <span class="attr">content-css</span>=<span class="string">&quot;padding: 50px&quot;</span> <span class="attr">maximized</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>想去哪里玩？<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>自由行·出国度假<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>泰国、首尔、珠海、九寨沟<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">q-btn</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;q-mt-lg&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">click</span>=<span class="string">&quot;model=false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">label</span>=<span class="string">&quot;订购行程&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-modal</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>最小窗口</strong><code>minimized</code></p><p>设置<code>position</code>后会自动清除<code>content-css</code>定义的<code>css</code>，所以要在里面多一个<code>div</code>来做<code>padding</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-modal</span> <span class="attr">v-model</span>=<span class="string">&quot;model&quot;</span> <span class="attr">minimized</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding: 20px&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">q-modal</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基本属性-5"><a href="#基本属性-5" class="headerlink" title="基本属性"></a>基本属性</h3><ul><li><code>minimized</code>，<code>maximized</code>设置窗口最小化或是最大化</li><li><code>no-route-dismiss</code>、<code>no-esc-dismiss</code>、<code>no-backdrop-dismiss</code>分别为控制换页、按下Esc、按黑色背景是否会触发开闭事件</li><li><code>content-css</code>，<code>content-classes</code>，Modal内的CSS及class，在设置了<code>position</code>后会无效</li><li><code>position</code>设置弹窗出来的位置</li><li><code>position-classes</code>设置<code>position</code>后就要用这个来设<code>class</code>，默认是<code>items-center</code>，<code>justify-center</code></li><li><code>transition</code>，<code>enter-class</code>，<code>leave-class</code>可以用自定义的CSS来做出场的动画</li><li><code>no-refocus</code>是否让关闭窗口时聚焦回到打开窗口前的最后一个组件</li></ul><h3 id="Vue方法"><a href="#Vue方法" class="headerlink" title="Vue方法"></a>Vue方法</h3><p>控制打开关闭窗口的一些方法，要搭配<code>this.$refs.窗口名称</code>来使用。</p><ul><li><code>show</code></li><li><code>hide</code></li><li><code>toggle</code></li></ul><h2 id="弹窗-Notify"><a href="#弹窗-Notify" class="headerlink" title="弹窗-Notify"></a>弹窗-Notify</h2><blockquote><p><a href="http://www.quasarchs.com/components/notify.html">通知框（Notify）</a></p></blockquote><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="js" data-user="whjin" data-slug-hash="wOaGJO" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="弹窗-Notify">  <span>See the Pen <a href="https://codepen.io/whjin/pen/wOaGJO/">  弹窗-Notify</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h3 id="在Vue外使用"><a href="#在Vue外使用" class="headerlink" title="在Vue外使用"></a>在Vue外使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Notify</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;quasar&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Notify</span>.<span class="title function_">create</span>(<span class="string">&#x27;已保存&#x27;</span>);</span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="title class_">Notify</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;已保存&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="进度条-Ajax-Bar-Loading-Bar"><a href="#进度条-Ajax-Bar-Loading-Bar" class="headerlink" title="进度条-Ajax Bar&amp;Loading Bar"></a>进度条-Ajax Bar&amp;Loading Bar</h2><blockquote><p><a href="http://www.quasarchs.com/components/ajax-bar.html">Ajax栏(Ajax Bar)</a></p></blockquote><p>在<code>quasar.config.js</code>中引入<code>QAjaxBar</code>组件。</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h3 id="Ajax-Bar"><a href="#Ajax-Bar" class="headerlink" title="Ajax Bar"></a>Ajax Bar</h3><p>因为在每个页面都会用到，所以放在最上层<code>App.vue</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;q-app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-ajax-bar</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>position</code>设置组件位置</li><li><code>size</code>载入条的宽度，默认<code>4px</code></li><li><code>color</code>默认<code>red</code></li><li><code>reverse</code>使进度方向相反</li></ul><h4 id="基本事件-2"><a href="#基本事件-2" class="headerlink" title="基本事件"></a>基本事件</h4><ul><li><code>@start</code>开始动作时触发</li><li><code>@stop</code>结束动作时触发</li></ul><h4 id="基本方法-1"><a href="#基本方法-1" class="headerlink" title="基本方法"></a>基本方法</h4><ul><li><code>start()</code></li><li><code>stop()</code></li></ul><h3 id="Loading-Bar"><a href="#Loading-Bar" class="headerlink" title="Loading Bar"></a>Loading Bar</h3><h2 id="进度条-Inner-Loading"><a href="#进度条-Inner-Loading" class="headerlink" title="进度条-Inner Loading"></a>进度条-Inner Loading</h2><blockquote><p><a href="http://www.quasarchs.com/components/inner-loading.html">内部加载(Inner Loading)</a></p></blockquote><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>使用InnerLoading时会作用在<code>relative-position</code>这个<code>class</code>下，如果没有添加这个会变成整页。</p><h3 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h3><p><strong>index.vue</strong></p><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html" data-user="whjin" data-slug-hash="rRVJYL" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="Quasar-InnerLoading-Index.vue">  <span>See the Pen <a href="https://codepen.io/whjin/pen/rRVJYL/">  Quasar-InnerLoading-Index.vue</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p><strong>MyField.vue</strong></p><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html" data-user="whjin" data-slug-hash="XGbZEN" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="Quasar-InnerLoading-MyField.vue">  <span>See the Pen <a href="https://codepen.io/whjin/pen/XGbZEN/">  Quasar-InnerLoading-MyField.vue</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p><strong>效果</strong></p><p><img src="https://i.imgur.com/d5QwW8f.jpg"></p><p><img src="https://i.imgur.com/0nMNKFM.jpg"></p><h2 id="CSS-Helpers"><a href="#CSS-Helpers" class="headerlink" title="CSS Helpers"></a>CSS Helpers</h2><h3 id="空间排版CSS-Spacing-Classes"><a href="#空间排版CSS-Spacing-Classes" class="headerlink" title="空间排版CSS Spacing Classes"></a>空间排版CSS Spacing Classes</h3><blockquote><p><a href="http://www.quasarchs.com/components/spacing.html">CSS间距类CSS Spacing Classes</a></p></blockquote><h3 id="基本范例-2"><a href="#基本范例-2" class="headerlink" title="基本范例"></a>基本范例</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">q</span>-ma-xs</span><br></pre></td></tr></table></figure><ul><li><code>q</code>作为前缀</li><li><code>ma</code>：<ul><li><code>m</code>类型，<code>margin</code></li><li><code>a</code>方向，<code>all</code></li></ul></li><li><code>xs</code>范围的大小跟<code>flex css</code>一致</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q-[类型][方向]-[大小]</span><br></pre></td></tr></table></figure><ul><li><p>类型</p><ul><li><code>m</code>（<code>margin</code>向外扩）</li><li><code>p</code>（<code>padding</code>向内扩）</li></ul></li><li><p>方法</p></li></ul><p>总共有7种选择，除了基本的<code>t(top)</code>，<code>r(right)</code>，<code>l(left)</code>、<code>b(bottom)</code>，<code>a(all)</code>之外，还有两种<code>x(left+right)</code>，<code>y(top+bottom)</code>。</p><ul><li>大小</li></ul><p>有<code>none</code>，<code>auto</code>(只能用在<code>margin</code>),<code>xs</code>，<code>sm</code>，<code>md</code>，<code>lg</code>，<code>xl</code>。</p><h3 id="阴影CSS-Shadows"><a href="#阴影CSS-Shadows" class="headerlink" title="阴影CSS Shadows"></a>阴影CSS Shadows</h3><blockquote><p><a href="http://www.quasarchs.com/components/shadows.html">CSS阴影（立面图）CSS Shadows</a></p></blockquote><h3 id="可视范围CSS-Visibility"><a href="#可视范围CSS-Visibility" class="headerlink" title="可视范围CSS Visibility"></a>可视范围CSS Visibility</h3><blockquote><p><a href="http://www.quasarchs.com/components/visibility.html">可视范围CSS Visibility</a></p></blockquote><h3 id="位置排版CSS-Positioning-Classes"><a href="#位置排版CSS-Positioning-Classes" class="headerlink" title="位置排版CSS Positioning Classes"></a>位置排版CSS Positioning Classes</h3><blockquote><p><a href="http://www.quasarchs.com/components/positioning.html">CSS定位类CSS Positioning Classes</a></p></blockquote><h2 id="自定义颜色"><a href="#自定义颜色" class="headerlink" title="自定义颜色"></a>自定义颜色</h2><blockquote><p><a href="http://www.quasarchs.com/components/color-palette.html">调色板(Color Palette)</a></p></blockquote><p>在<code>src/css/app.styl</code>文件中自定义全局CSS</p><h3 id="新增颜色"><a href="#新增颜色" class="headerlink" title="新增颜色"></a>新增颜色</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text-redsp</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#D03F38</span></span><br><span class="line">.bg-redsp</span><br><span class="line">  background: <span class="number">#D03F38</span>  </span><br></pre></td></tr></table></figure><p>这里<code>text</code>和<code>bg</code>需要同时设定。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">&quot;redsp&quot;</span>&gt;</span>Open<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多国语系I18n"><a href="#多国语系I18n" class="headerlink" title="多国语系I18n"></a>多国语系I18n</h2><h3 id="Quasar的I18n"><a href="#Quasar的I18n" class="headerlink" title="Quasar的I18n"></a>Quasar的I18n</h3><blockquote><p><a href="http://www.quasarchs.com/components/internationalization.html">多国语系(I18n)</a></p></blockquote><p>在<code>quasar.config.js</code>中设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">framework</span>: &#123;</span><br><span class="line">  <span class="attr">i18n</span>: <span class="string">&#x27;zh-hans&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取当前语系"><a href="#读取当前语系" class="headerlink" title="读取当前语系"></a>读取当前语系</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lang = <span class="variable language_">this</span>.#q.<span class="property">i18n</span>.<span class="title function_">getLocal</span>()</span><br></pre></td></tr></table></figure><h3 id="动态设置"><a href="#动态设置" class="headerlink" title="动态设置"></a>动态设置</h3><p>Quasar的切换语系不像是传统的<code>vue-i18n</code>直接换就能用，必须重新载入新语系的语系档。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">q-btn</span> @<span class="attr">click</span>=<span class="string">&quot;setLang(&#x27;zh-hans&#x27;)&quot;</span>&gt;</span>简体中文<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&quot;I18n&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">setLang</span>(<span class="params">lang</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">import</span>(<span class="string">&#x27;quasar-framework/i18n/$&#123;lang&#125;&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">lang</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">$q</span>.<span class="property">i18n</span>.<span class="title function_">set</span>(lang.<span class="property">default</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue-I18n"><a href="#Vue-I18n" class="headerlink" title="Vue-I18n"></a>Vue-I18n</h3><p>Vue-I18n在<code>src/i18n</code>里面，参照已经设定的内容添加自己想要的语系。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;$t(&#x27;apple&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q-btn</span> @<span class="attr">click</span>=<span class="string">&quot;setLang()&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;$t(&#x27;setting&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动态切换语系"><a href="#动态切换语系" class="headerlink" title="动态切换语系"></a>动态切换语系</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">setLang</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$i18m</span>.<span class="property">local</span> = <span class="string">&#x27;zh-CN&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>GITHUB：<a href="https://github.com/whjin/make-quasar">使用Quasar设计旅游网站</a><br>文章链接：<a href="https://whjin.github.io/blog/2019/02/23/%E4%BD%BF%E7%94%A8Quasar%E8%AE%BE%E8%AE%A1Material%E5%92%8CIOS%E9%A3%8E%E6%A0%BC%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E7%AB%99/">使用Quasar设计Material和IOS风格的响应式网站</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Quasar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记-Web安全一</title>
      <link href="/2019/02/23/%E6%8A%80%E6%9C%AF/Web%E5%AE%89%E5%85%A8/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0Web%E5%AE%89%E5%85%A8%E4%B8%80/"/>
      <url>/2019/02/23/%E6%8A%80%E6%9C%AF/Web%E5%AE%89%E5%85%A8/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0Web%E5%AE%89%E5%85%A8%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>这是一个系列笔记，来自<strong>《Web前端黑客技术揭秘》</strong>这本书，属于进阶内容，可以进一步提高Web开发的能力。</p><span id="more"></span><h1 id="Web安全的关键点"><a href="#Web安全的关键点" class="headerlink" title="Web安全的关键点"></a>Web安全的关键点</h1><h2 id="数据和指令"><a href="#数据和指令" class="headerlink" title="数据和指令"></a>数据和指令</h2><ol><li>SQL注入攻击</li></ol><p><code>selct username,email,desc from users where id=1</code></p><p>攻击者提交：</p><p><code>union select password,1,1 from users</code></p><p>最终SQL查询语句：</p><p><code>selct username,email,desc from users where id=1 union select password,1,1 from users</code></p><p>组成的SQL语句合法，通过一个经典的<code>union</code>查询，此时注入的指令内容就会被当做合法指令执行。这样的攻击会导致<code>users</code>表中的<code>password</code>泄露。</p><ol start="2"><li>XSS跨站脚本攻击</li></ol><p><code>eval</code>函数能够动态执行<code>url</code>返回的特定信息，比如<code>eval(location.hash.substr(1))</code>即是截取<code>#</code>后的<code>callback</code>内容，提供给<code>eval</code>进行动态执行。</p><p>如果攻击者对<code>#</code>后的<code>url</code>中的<code>#</code>后的内容进行改造，就可以截取到访问者的<code>cookies</code>会话信息，其中可能包含访问者的账号、密码等重要信息。</p><blockquote><p>SQL注入攻击针对的对象是数据库，大多发生在服务端，或者说是存储端，因为HTML5技术中有客户端存储技术。<br>跨站攻击主要发生在浏览器客户端。</p></blockquote><h2 id="浏览器的同源策略"><a href="#浏览器的同源策略" class="headerlink" title="浏览器的同源策略"></a>浏览器的同源策略</h2><ol><li>不同域或同域名</li></ol><p>同域要求两个站点同协议、同域名、同端口。</p><ol start="2"><li><p>客户端脚本</p></li><li><p>授权</p></li></ol><p>HTML5标准中默认不允许跨域访问，只有目标站点明确返回HTTP响应头。此时，站点上的客户端就有权通过Ajax技术对目标站点上的数据进行读写操作。</p><ol start="4"><li><p>读写权限</p></li><li><p>资源</p></li></ol><p>一般来说，资源包括：HTTP消息头、DOM树、浏览器存储。</p><h1 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h1><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>URL有个重点就是编码方式，有三类：<code>escape</code>、<code>encodeURI</code>、<code>encodeURIComponent</code>，对应的解码函数是：<code>unescape</code>、<code>decodeURI</code>、<code>decodeURIComponent</code>。</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>URL的请求协议几乎都是HTTP，它是一种无状态的请求相应，即每次的请求相应之后，连接会立即断开或延时断开（保持一定的连接有效期），断开后，下一次请求再重新建立。</p><p>HTTP是无状态的，每次在连接时，服务端通过<code>cookies</code>进行会话跟踪，第一次响应时设置的<code>cookies</code>在随后的每次请求中都会发送出去。<code>cookies</code>还可以包含登录认证后的身份信息。</p><p>每个<code>Set-Cookie</code>都设置一个<code>Cookie</code>（<code>key=value</code>）。</p><ul><li><code>expires</code>：过期时间。</li><li><code>path</code>：相对路径，只有在这个路径下的资源可以访问这个<code>cookie</code>。</li><li><code>domain</code>：域名，有权限设置为更高一级的域名。</li><li><code>HTTPOnly</code>：标志（默认无，如果有，表明<code>cookie</code>存在于HTTP层面，不能被客户端脚本读取）。</li><li><code>Secure</code>：标志（默认无，如果有，表明<code>cookie</code>仅通过HTTPS协议进行安全传输）。</li></ul><h2 id="JavaScript跨站"><a href="#JavaScript跨站" class="headerlink" title="JavaScript跨站"></a>JavaScript跨站</h2><h3 id="DOM树操作"><a href="#DOM树操作" class="headerlink" title="DOM树操作"></a>DOM树操作</h3><ol><li><p>获取HTML内容中的隐私数据</p></li><li><p>获取浏览器的<code>cookies</code>数据</p></li><li><p>获取URL地址中的数据</p></li></ol><h3 id="AJAX风险"><a href="#AJAX风险" class="headerlink" title="AJAX风险"></a>AJAX风险</h3><p>Ajax严格遵守同源策略，既不能从另一个域读取数据，也不能发送数据到另一个域。</p><p><strong>CORS方案</strong></p><p>来源域的Ajax向目标域发起了请求，浏览器会自动带上Origin头，然后目标域要判断这个Origin值，如果是预期的，就返回：</p><p><code>Access-Control-Allow-Origin: http://www.foo.com</code></p><p>表示同意跨域。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无人点餐收银系统-项目初始化</title>
      <link href="/2019/02/22/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE/%E6%97%A0%E4%BA%BA%E7%82%B9%E9%A4%90%E6%94%B6%E9%93%B6%E7%B3%BB%E7%BB%9F-%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2019/02/22/%E6%8A%80%E6%9C%AF/%E9%A1%B9%E7%9B%AE/%E6%97%A0%E4%BA%BA%E7%82%B9%E9%A4%90%E6%94%B6%E9%93%B6%E7%B3%BB%E7%BB%9F-%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p><strong>主要功能介绍：</strong></p><ol><li>支持微信、支付宝、浏览器多种扫码工具扫码点餐。</li><li>支持多人扫码点餐，点餐信息通过<code>WebSocket</code>同步。</li><li>下单无线打印小票，后厨、服务员同时收到订单信息。</li><li>微信、支付宝在线支付，自动收银。</li></ol><span id="more"></span><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>Vue中<code>v-bind</code>是一个非常重要的绑定属性的指令，这里要讲解一下绑定<code>class</code>样式设置的方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,key) in dinner&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;red&#x27;:key==0,&#x27;blue&#x27;:key==1&#125;&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-model</code>双向绑定，多用于表单控制的交互操作。</p><p><code>ref</code>用于获取<code>DOM</code>节点元素。</p><p>绑定事件对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;eventFn($event)&quot;</span>&gt;</span>事件对象<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">eventFn</span>(<span class="params">e</span>) &#123;</span><br><span class="line">e.<span class="property">srcElement</span>.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TODOList实例"><a href="#TODOList实例" class="headerlink" title="TODOList实例"></a>TODOList实例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;todo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getAdd()&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;marginLeft:10+&#x27;px&#x27;&#125;&quot;</span>&gt;</span>+增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,key) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;key&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;marginBottom:10+&#x27;px&#x27;&#125;&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getDel(key)&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;marginLeft:10+&#x27;px&#x27;&#125;&quot;</span>&gt;</span>-删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">todo</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">list</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">getAdd</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">todo</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">todo</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">getDel</span>(<span class="params">key</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">splice</span>(key, <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js基础教程</title>
      <link href="/2019/02/18/%E6%8A%80%E6%9C%AF/Vue/Vuejs%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
      <url>/2019/02/18/%E6%8A%80%E6%9C%AF/Vue/Vuejs%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>开发工具准备：</p><ol><li>根据个人喜欢选择<code>IDE</code>，我使用的是<code>WebStorm</code>，推荐使用<code>Atom</code>和<code>VSCode</code>；</li><li>安装<code>git base</code>和<code>node.js</code>；</li><li>安装<code>vue-cli</code>，命令<code>npm i -g @vue/cli</code>；</li><li>新建<code>vue-cli</code>项目：<ol><li>方法一：通过图形界面进行安装<code>vue ui</code>；</li><li>方法二：通过命令行安装<code>vue create project-name</code></li></ol></li><li>运行项目<code>npm run serve</code>，端口<code>8080</code>。</li></ol><span id="more"></span><h2 id="双向绑定v-model"><a href="#双向绑定v-model" class="headerlink" title="双向绑定v-model"></a>双向绑定v-model</h2><p>双向绑定大多用于表单事件，通过监听使用者输入的事件来更新内容。</p><p>现阶段大部分工作在<code>App.vue</code>上，<code>template</code>与普通写法一致，<code>js</code>写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;vue.js&#x27;</span>,</span><br><span class="line">            <span class="attr">myname</span>: <span class="string">&#x27;请输入名字&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="去掉空白符-trim"><a href="#去掉空白符-trim" class="headerlink" title="去掉空白符.trim"></a>去掉空白符.trim</h2><p>直接在<code>v-model</code>后加上<code>.trim</code>即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="懒加载-lazy"><a href="#懒加载-lazy" class="headerlink" title="懒加载.lazy"></a>懒加载.lazy</h2><p>在离开<code>input</code>时才更新输入的内容，在<code>v-model</code>后加上<code>.lazy</code>即可。</p><h2 id="限定输入数字-number"><a href="#限定输入数字-number" class="headerlink" title="限定输入数字.number"></a>限定输入数字.number</h2><p>在<code>v-model</code>后加上<code>.number</code>即可。</p><h2 id="遍历v-for"><a href="#遍历v-for" class="headerlink" title="遍历v-for"></a>遍历v-for</h2><p>遍历有一个基本的模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in member&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件component"><a href="#组件component" class="headerlink" title="组件component"></a>组件component</h2><p>在<code>App.vue</code>中引入<code>components</code>中的组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Card</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> <span class="title class_">Card</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Card&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Card</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="数据传递props"><a href="#数据传递props" class="headerlink" title="数据传递props"></a>数据传递props</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Card</span> <span class="attr">:cardData</span>=<span class="string">&quot;cardData&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>:cardData=&quot;cardData&quot;</code>是这个组件的核心，用于绑定属性<code>cardData</code>。其他数据展示工作放在<code>Card.vue</code>组件中进行。</p><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="js" data-user="whjin" data-slug-hash="darQdg" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="props接收数据">  <span>See the Pen <a href="https://codepen.io/whjin/pen/darQdg/">  props接收数据</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p>这里解析一下<code>&lt;div class=&quot;card_wall&quot;&gt;&lt;/div&gt;</code>包裹<code>&lt;div class=&quot;card&quot;&gt;&lt;/div&gt;</code>主要是方便后期应用扩展，以及让应用整体更稳定。</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>我不喜欢用官网的生命流程图来讲解这个内容，使用文字表达更加让思维清晰。</p><ol><li><strong>初始化</strong>：设置数据监听，编译模板，挂载到<code>DOM</code>并在数据变化时更新<code>DOM</code>等；</li><li>生命周期钩子：其实就是一个过程处理，类似于服务站。</li></ol><p><strong>生命周期钩子简介</strong></p><ol><li><code>beforeCreate</code>：实例初始化</li><li><code>created</code>：实例建立完成（可以取得<code>$data</code>）</li><li><code>beforeMount</code>：模板挂载之前（还没有生成<code>html</code>）</li><li><code>mounted</code>：模板挂载完成</li><li><code>beforeUpdate</code>：如果<code>data</code>发生变化，触发组件更新，重新渲染</li><li><code>updated</code>：更新完成</li><li><code>beforeDestroy</code>：实例销毁之前（实例还可以使用）</li><li><code>destroyed</code>：实例已销毁（所有绑定被解除、所有事件监听器被移除、所有子实例被移除）</li></ol><p>生命周期钩子用得最多的是<code>mounted</code>，主要用在调用属性、方法的时候，</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="v-once指令"><a href="#v-once指令" class="headerlink" title="v-once指令"></a>v-once指令</h3><p>第一次渲染完成后变为静态内容，其下的所有子元素都是这样的效果。</p><h3 id="v-pre指令"><a href="#v-pre指令" class="headerlink" title="v-pre指令"></a>v-pre指令</h3><p><code>v-pre</code>指令会让指定元素被忽略。</p><h3 id="v-cloak指令"><a href="#v-cloak指令" class="headerlink" title="v-cloak指令"></a>v-cloak指令</h3><p><code>v-cloak</code>指令用于去除页面渲染数据时出现闪现的情况，使用方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span>&gt;</span>$&#123; item.title &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-html指令"><a href="#v-html指令" class="headerlink" title="v-html指令"></a>v-html指令</h3><p><code>v-html</code>指令会把<code>html</code>标签渲染成<code>DOM</code>显示在页面上。</p><p><code>v-html</code>指令只能对可信任的用户使用，否则容易受到<code>XSS</code>攻击。</p><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p><strong>Vue</strong>动画一般在真正需要使用的情况下才加入页面，推荐在<strong>CSS</strong>中使用动画。</p><h3 id="加入渐变的时机"><a href="#加入渐变的时机" class="headerlink" title="加入渐变的时机"></a>加入渐变的时机</h3><ol><li><code>v-if</code>条件渲染</li><li><code>v-show</code>条件显示</li><li>动态组件</li><li>组件的根节点</li></ol><h3 id="渐变的分类"><a href="#渐变的分类" class="headerlink" title="渐变的分类"></a>渐变的分类</h3><ol><li><code>v-enter</code>定义<strong>进入渐变</strong>时<strong>开始</strong>的样式。<ul><li>只存在组件插入前，组件插入后就移除。</li></ul></li><li><code>v-enter-active</code>定义<strong>进入渐变</strong>的<strong>过程</strong>效果，可以设定渐变过程的时间（<code>duration</code>）和速度曲线（<code>easing curve</code>）。<ul><li>在组件被插入前生效，在完成动画时移除。</li></ul></li><li><code>v-enter-to</code>定义<strong>进入渐变</strong>后<strong>结束</strong>的样式。<ul><li>在组件被插入后生效，同时<code>v-enter</code>被移除，并在完成<strong>进入渐变</strong>动画时移除。</li></ul></li><li><code>v-leave</code>定义<strong>离开渐变</strong>时<strong>开始</strong>的样式。<ul><li>在触发组件<strong>离开渐变</strong>时生效，接着马上移除。</li></ul></li><li><code>v-leave-active</code>定义<strong>离开渐变</strong>的<strong>过程</strong>效果，可以设定渐变过程的时间（<code>duration</code>）和速度曲线（<code>easing curve</code>）。<ul><li>在触发组件<strong>离开渐变</strong>时生效，在完成动画时移除。</li></ul></li><li><code>v-leave-to</code>定义<strong>离开渐变</strong>后<strong>结束</strong>的样式。<ul><li>在触发组件<strong>离开渐变</strong>时生效，同时<code>v-enter</code>被移除，并在完成<strong>离开渐变</strong>动画时移除。</li></ul></li></ol><p><img src="https://vuejs.org/images/transition.png"></p><h3 id="transition自定义名称"><a href="#transition自定义名称" class="headerlink" title="transition自定义名称"></a>transition自定义名称</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change = !change&quot;</span>&gt;</span>縮放控制器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;zoom&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;change&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ant_man_style&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.zoom-enter</span>, <span class="selector-class">.zoom-leave-to</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.zoom-enter-active</span>, <span class="selector-class">.zoom-leave-active</span> &#123;</span><br><span class="line"><span class="attribute">transition</span>: width <span class="number">1s</span>, height <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h3><p>可以使用CSS中的<code>animation</code>动画设计更为华丽的效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.zoom-leave-active</span> &#123;</span><br><span class="line"><span class="attribute">animation</span>: special_effects <span class="number">1.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.zoom-enter-active</span> &#123;</span><br><span class="line"><span class="attribute">animation</span>: special_effects <span class="number">1.5s</span> reverse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> special_effects &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="transition自定义动画类别"><a href="#transition自定义动画类别" class="headerlink" title="transition自定义动画类别"></a>transition自定义动画类别</h3><p>除了在<code>&lt;transition&gt;</code>中设定<code>name</code>自定义前缀（属性），还可以预设动画类别。</p><ul><li><code>enter-class</code>定义进入动画时<strong>开始</strong>的样式。</li><li><code>enter-active-class</code>定义进入动画的<strong>过程</strong>效果。</li><li><code>enter-to-class</code>定义进入动画后<strong>结束</strong>的样式。</li><li><code>leave-class</code>定义离开动画时<strong>开始</strong>的样式。</li><li><code>leave-active-class</code>定义离开动画的<strong>过程</strong>效果。</li><li><code>leave-to-class</code>定义离开动画后<strong>结束</strong>的样式。</li></ul><p>以上六个自定义属性<strong>优先级别</strong>高于一般渐变类别。</p><blockquote><p>CSS动画库：<a href="https://daneden.github.io/animate.css/">Animation.css</a></p></blockquote><h3 id="JavaScript钩子"><a href="#JavaScript钩子" class="headerlink" title="JavaScript钩子"></a>JavaScript钩子</h3><p><code>&lt;transition&gt;</code>还可以绑定JavaScriptHooks，除了单独使用，也能结合CSS <code>transition</code>和<code>animations</code>一起使用。</p><ul><li><code>beforeEnter(el)</code>在<strong>进入渐变或动画</strong>前生效。</li><li><code>enter(el,callback)</code>在<strong>进入渐变或动画</strong>的组件插入时生效。</li><li><code>afterEnter(el)</code>在<strong>进入渐变或动画</strong>结束时生效。</li><li><code>enterCanceled(el)</code>在<strong>未完成渐变或动画</strong>时取消。</li><li><code>beforeLeave(el)</code>在<strong>离开渐变或动画</strong>前生效。</li><li><code>leaveCancelled(el)</code>在<strong>未完成渐变或动画</strong>时取消。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">before-enter</span>=<span class="string">&quot;beforeEnter&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">enter</span>=<span class="string">&quot;enter&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">after-enter</span>=<span class="string">&quot;afterEnter&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">enter-cancelled</span>=<span class="string">&quot;enterCancelled&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">before-leave</span>=<span class="string">&quot;beforeLeave&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">leave</span>=<span class="string">&quot;leave&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">after-leave</span>=<span class="string">&quot;afterLeave&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">leave-cancelled</span>=<span class="string">&quot;leaveCancelled&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;change&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ant_man_style&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>enter</code>和<code>leave</code>中必须使用<code>done</code>，不然它们会同时生效，动画也会瞬间完成。</p><h3 id="设定初始载入时的渐变"><a href="#设定初始载入时的渐变" class="headerlink" title="设定初始载入时的渐变"></a>设定初始载入时的渐变</h3><p>如果想要设定一开始载入画面时组件的渐变效果，可以通过设定<code>appear</code>属性来实现。</p><ul><li><code>appear-class</code>载入时<strong>开始</strong>的样式。</li><li><code>appear-to-class</code>载入<strong>过程</strong>的样式。</li><li><code>appear-active-class</code>载入<strong>结束</strong>时样式。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">        <span class="attr">appear</span></span></span><br><span class="line"><span class="tag">        <span class="attr">appear-class</span>=<span class="string">&quot;show-appear-class&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">appear-to-class</span>=<span class="string">&quot;show-appear-to-class&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">appear-active-class</span>=<span class="string">&quot;show-appear-active-class&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先在<code>&lt;transition&gt;</code>标签内加入<code>appear</code>，接着类似自定义动画可以给<code>class name</code>命名。</p><h3 id="初始载入JavaScript-Hooks"><a href="#初始载入JavaScript-Hooks" class="headerlink" title="初始载入JavaScript Hooks"></a>初始载入JavaScript Hooks</h3><ul><li><code>beforeAppear</code>载入前</li><li><code>appear</code>载入时</li><li><code>afterAppear</code>载入后</li><li><code>appearCancelled</code>取消载入（载入开始后）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">    <span class="attr">appear</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">before-appear</span>=<span class="string">&quot;beforeAppear&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">appear</span>=<span class="string">&quot;appear&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">after-appear</span>=<span class="string">&quot;afterAppear&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">appear-cancelled</span>=<span class="string">&quot;appearCancelled&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;change&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ant_man_style&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>对相同的标签元素使用<code>key</code>进行区分。</p><h3 id="渐变模式in-out和out-in"><a href="#渐变模式in-out和out-in" class="headerlink" title="渐变模式in-out和out-in"></a>渐变模式in-out和out-in</h3><h4 id="in-out模式"><a href="#in-out模式" class="headerlink" title="in-out模式"></a>in-out模式</h4><ol><li>新加入的元素做渐变进入。</li><li>渐变进入结束后，原存在的元素再渐变离开。</li></ol><h4 id="out-in模式"><a href="#out-in模式" class="headerlink" title="out-in模式"></a>out-in模式</h4><ol><li>原存在的元素渐变离开。</li><li>渐变离开结束后，新元素再渐变进入。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">&quot;in-out&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="列表过渡"><a href="#列表过渡" class="headerlink" title="列表过渡"></a>列表过渡</h3><ul><li><code>&lt;transition-group&gt;</code>会渲染出一个<code>html</code>标签，预设是<code>&lt;span&gt;</code>，也可以选择自定义<code>tag</code>为其他标签。</li><li>无法使用（渐变模式<code>in-out</code>和<code>out-in</code>），因为不再是元素之间来回切换。</li><li>每个元素需要设定一个<code>key</code>值，不能重复。</li></ul><h3 id="列表乱数排序"><a href="#列表乱数排序" class="headerlink" title="列表乱数排序"></a>列表乱数排序</h3><p><code>&lt;transition-group&gt;</code>能够改变数组的排序，使用前需要先安装<code>shuffle</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i --save lodash.<span class="property">shuffle</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> shuffle = <span class="built_in">require</span>(<span class="string">&#x27;lodash.shuffle&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="过滤器filter"><a href="#过滤器filter" class="headerlink" title="过滤器filter"></a>过滤器filter</h2><h3 id="filters串联"><a href="#filters串联" class="headerlink" title="filters串联"></a>filters串联</h3><p><code>filter</code>可以同时串联多个<code>filter</code>函数。</p><h3 id="filters参数"><a href="#filters参数" class="headerlink" title="filters参数"></a>filters参数</h3><h2 id="emit"><a href="#emit" class="headerlink" title="$emit"></a>$emit</h2><ol><li>父组件可以使用<code>props</code>把数据传递给子组件。</li><li>子组件可以使用<code>$emit</code>触发父组件的自定义事件。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础教程</title>
      <link href="/2019/02/18/%E6%8A%80%E6%9C%AF/Vue/Vue%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
      <url>/2019/02/18/%E6%8A%80%E6%9C%AF/Vue/Vue%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>开发工具准备：</p><ol><li>根据个人喜欢选择<code>IDE</code>，我使用的是<code>WebStorm</code>，推荐使用<code>Atom</code>和<code>VSCode</code>；</li><li>安装<code>git base</code>和<code>node.js</code>；</li><li>安装<code>vue-cli</code>，命令<code>npm i -g @vue/cli</code>；</li><li>新建<code>vue-cli</code>项目：<ol><li>方法一：通过图形界面进行安装<code>vue ui</code>；</li><li>方法二：通过命令行安装<code>vue create project-name</code></li></ol></li><li>运行项目<code>npm run serve</code>，端口<code>8080</code>。</li></ol><span id="more"></span><h2 id="双向绑定v-model"><a href="#双向绑定v-model" class="headerlink" title="双向绑定v-model"></a>双向绑定v-model</h2><p>双向绑定大多用于表单事件，通过监听使用者输入的事件来更新内容。</p><p>现阶段大部分工作在<code>App.vue</code>上，<code>template</code>与普通写法一致，<code>js</code>写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;vue.js&#x27;</span>,</span><br><span class="line">            <span class="attr">myname</span>: <span class="string">&#x27;请输入名字&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="去掉空白符-trim"><a href="#去掉空白符-trim" class="headerlink" title="去掉空白符.trim"></a>去掉空白符.trim</h2><p>直接在<code>v-model</code>后加上<code>.trim</code>即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="懒加载-lazy"><a href="#懒加载-lazy" class="headerlink" title="懒加载.lazy"></a>懒加载.lazy</h2><p>在离开<code>input</code>时才更新输入的内容，在<code>v-model</code>后加上<code>.lazy</code>即可。</p><h2 id="限定输入数字-number"><a href="#限定输入数字-number" class="headerlink" title="限定输入数字.number"></a>限定输入数字.number</h2><p>在<code>v-model</code>后加上<code>.number</code>即可。</p><h2 id="遍历v-for"><a href="#遍历v-for" class="headerlink" title="遍历v-for"></a>遍历v-for</h2><p>遍历有一个基本的模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in member&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件component"><a href="#组件component" class="headerlink" title="组件component"></a>组件component</h2><p>在<code>App.vue</code>中引入<code>components</code>中的组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Card</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> <span class="title class_">Card</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Card&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Card</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="数据传递props"><a href="#数据传递props" class="headerlink" title="数据传递props"></a>数据传递props</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Card</span> <span class="attr">:cardData</span>=<span class="string">&quot;cardData&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>:cardData=&quot;cardData&quot;</code>是这个组件的核心，用于绑定属性<code>cardData</code>。其他数据展示工作放在<code>Card.vue</code>组件中进行。</p><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="js" data-user="whjin" data-slug-hash="darQdg" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="props接收数据">  <span>See the Pen <a href="https://codepen.io/whjin/pen/darQdg/">  props接收数据</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p>这里解析一下<code>&lt;div class=&quot;card_wall&quot;&gt;&lt;/div&gt;</code>包裹<code>&lt;div class=&quot;card&quot;&gt;&lt;/div&gt;</code>主要是方便后期应用扩展，以及让应用整体更稳定。</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>我不喜欢用官网的生命流程图来讲解这个内容，使用文字表达更加让思维清晰。</p><ol><li><strong>初始化</strong>：设置数据监听，编译模板，挂载到<code>DOM</code>并在数据变化时更新<code>DOM</code>等；</li><li>生命周期钩子：其实就是一个过程处理，类似于服务站。</li></ol><p><strong>生命周期钩子简介</strong></p><ol><li><code>beforeCreate</code>：实例初始化</li><li><code>created</code>：实例建立完成（可以取得<code>$data</code>）</li><li><code>beforeMount</code>：模板挂载之前（还没有生成<code>html</code>）</li><li><code>mounted</code>：模板挂载完成</li><li><code>beforeUpdate</code>：如果<code>data</code>发生变化，触发组件更新，重新渲染</li><li><code>updated</code>：更新完成</li><li><code>beforeDestroy</code>：实例销毁之前（实例还可以使用）</li><li><code>destroyed</code>：实例已销毁（所有绑定被解除、所有事件监听器被移除、所有子实例被移除）</li></ol><p>生命周期钩子用得最多的是<code>mounted</code>，主要用在调用属性、方法的时候，</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="v-once指令"><a href="#v-once指令" class="headerlink" title="v-once指令"></a>v-once指令</h3><p>第一次渲染完成后变为静态内容，其下的所有子元素都是这样的效果。</p><h3 id="v-pre指令"><a href="#v-pre指令" class="headerlink" title="v-pre指令"></a>v-pre指令</h3><p><code>v-pre</code>指令会让指定元素被忽略。</p><h3 id="v-cloak指令"><a href="#v-cloak指令" class="headerlink" title="v-cloak指令"></a>v-cloak指令</h3><p><code>v-cloak</code>指令用于去除页面渲染数据时出现闪现的情况，使用方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span>&gt;</span>$&#123; item.title &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-html指令"><a href="#v-html指令" class="headerlink" title="v-html指令"></a>v-html指令</h3><p><code>v-html</code>指令会把<code>html</code>标签渲染成<code>DOM</code>显示在页面上。</p><p><code>v-html</code>指令只能对可信任的用户使用，否则容易受到<code>XSS</code>攻击。</p><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p><strong>Vue</strong>动画一般在真正需要使用的情况下才加入页面，推荐在<strong>CSS</strong>中使用动画。</p><h3 id="加入渐变的时机"><a href="#加入渐变的时机" class="headerlink" title="加入渐变的时机"></a>加入渐变的时机</h3><ol><li><code>v-if</code>条件渲染</li><li><code>v-show</code>条件显示</li><li>动态组件</li><li>组件的根节点</li></ol><h3 id="渐变的分类"><a href="#渐变的分类" class="headerlink" title="渐变的分类"></a>渐变的分类</h3><ol><li><code>v-enter</code>定义<strong>进入渐变</strong>时<strong>开始</strong>的样式。<ul><li>只存在组件插入前，组件插入后就移除。</li></ul></li><li><code>v-enter-active</code>定义<strong>进入渐变</strong>的<strong>过程</strong>效果，可以设定渐变过程的时间（<code>duration</code>）和速度曲线（<code>easing curve</code>）。<ul><li>在组件被插入前生效，在完成动画时移除。</li></ul></li><li><code>v-enter-to</code>定义<strong>进入渐变</strong>后<strong>结束</strong>的样式。<ul><li>在组件被插入后生效，同时<code>v-enter</code>被移除，并在完成<strong>进入渐变</strong>动画时移除。</li></ul></li><li><code>v-leave</code>定义<strong>离开渐变</strong>时<strong>开始</strong>的样式。<ul><li>在触发组件<strong>离开渐变</strong>时生效，接着马上移除。</li></ul></li><li><code>v-leave-active</code>定义<strong>离开渐变</strong>的<strong>过程</strong>效果，可以设定渐变过程的时间（<code>duration</code>）和速度曲线（<code>easing curve</code>）。<ul><li>在触发组件<strong>离开渐变</strong>时生效，在完成动画时移除。</li></ul></li><li><code>v-leave-to</code>定义<strong>离开渐变</strong>后<strong>结束</strong>的样式。<ul><li>在触发组件<strong>离开渐变</strong>时生效，同时<code>v-enter</code>被移除，并在完成<strong>离开渐变</strong>动画时移除。</li></ul></li></ol><p><img src="https://vuejs.org/images/transition.png"></p><h3 id="transition自定义名称"><a href="#transition自定义名称" class="headerlink" title="transition自定义名称"></a>transition自定义名称</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change = !change&quot;</span>&gt;</span>縮放控制器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;zoom&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;change&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ant_man_style&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.zoom-enter</span>, <span class="selector-class">.zoom-leave-to</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.zoom-enter-active</span>, <span class="selector-class">.zoom-leave-active</span> &#123;</span><br><span class="line"><span class="attribute">transition</span>: width <span class="number">1s</span>, height <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h3><p>可以使用CSS中的<code>animation</code>动画设计更为华丽的效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.zoom-leave-active</span> &#123;</span><br><span class="line"><span class="attribute">animation</span>: special_effects <span class="number">1.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.zoom-enter-active</span> &#123;</span><br><span class="line"><span class="attribute">animation</span>: special_effects <span class="number">1.5s</span> reverse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> special_effects &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="transition自定义动画类别"><a href="#transition自定义动画类别" class="headerlink" title="transition自定义动画类别"></a>transition自定义动画类别</h3><p>除了在<code>&lt;transition&gt;</code>中设定<code>name</code>自定义前缀（属性），还可以预设动画类别。</p><ul><li><code>enter-class</code>定义进入动画时<strong>开始</strong>的样式。</li><li><code>enter-active-class</code>定义进入动画的<strong>过程</strong>效果。</li><li><code>enter-to-class</code>定义进入动画后<strong>结束</strong>的样式。</li><li><code>leave-class</code>定义离开动画时<strong>开始</strong>的样式。</li><li><code>leave-active-class</code>定义离开动画的<strong>过程</strong>效果。</li><li><code>leave-to-class</code>定义离开动画后<strong>结束</strong>的样式。</li></ul><p>以上六个自定义属性<strong>优先级别</strong>高于一般渐变类别。</p><blockquote><p>CSS动画库：<a href="https://daneden.github.io/animate.css/">Animation.css</a></p></blockquote><h3 id="JavaScript钩子"><a href="#JavaScript钩子" class="headerlink" title="JavaScript钩子"></a>JavaScript钩子</h3><p><code>&lt;transition&gt;</code>还可以绑定JavaScriptHooks，除了单独使用，也能结合CSS <code>transition</code>和<code>animations</code>一起使用。</p><ul><li><code>beforeEnter(el)</code>在<strong>进入渐变或动画</strong>前生效。</li><li><code>enter(el,callback)</code>在<strong>进入渐变或动画</strong>的组件插入时生效。</li><li><code>afterEnter(el)</code>在<strong>进入渐变或动画</strong>结束时生效。</li><li><code>enterCanceled(el)</code>在<strong>未完成渐变或动画</strong>时取消。</li><li><code>beforeLeave(el)</code>在<strong>离开渐变或动画</strong>前生效。</li><li><code>leaveCancelled(el)</code>在<strong>未完成渐变或动画</strong>时取消。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">before-enter</span>=<span class="string">&quot;beforeEnter&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">enter</span>=<span class="string">&quot;enter&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">after-enter</span>=<span class="string">&quot;afterEnter&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">enter-cancelled</span>=<span class="string">&quot;enterCancelled&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">before-leave</span>=<span class="string">&quot;beforeLeave&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">leave</span>=<span class="string">&quot;leave&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">after-leave</span>=<span class="string">&quot;afterLeave&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">leave-cancelled</span>=<span class="string">&quot;leaveCancelled&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;change&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ant_man_style&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>enter</code>和<code>leave</code>中必须使用<code>done</code>，不然它们会同时生效，动画也会瞬间完成。</p><h3 id="设定初始载入时的渐变"><a href="#设定初始载入时的渐变" class="headerlink" title="设定初始载入时的渐变"></a>设定初始载入时的渐变</h3><p>如果想要设定一开始载入画面时组件的渐变效果，可以通过设定<code>appear</code>属性来实现。</p><ul><li><code>appear-class</code>载入时<strong>开始</strong>的样式。</li><li><code>appear-to-class</code>载入<strong>过程</strong>的样式。</li><li><code>appear-active-class</code>载入<strong>结束</strong>时样式。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">        <span class="attr">appear</span></span></span><br><span class="line"><span class="tag">        <span class="attr">appear-class</span>=<span class="string">&quot;show-appear-class&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">appear-to-class</span>=<span class="string">&quot;show-appear-to-class&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">appear-active-class</span>=<span class="string">&quot;show-appear-active-class&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先在<code>&lt;transition&gt;</code>标签内加入<code>appear</code>，接着类似自定义动画可以给<code>class name</code>命名。</p><h3 id="初始载入JavaScript-Hooks"><a href="#初始载入JavaScript-Hooks" class="headerlink" title="初始载入JavaScript Hooks"></a>初始载入JavaScript Hooks</h3><ul><li><code>beforeAppear</code>载入前</li><li><code>appear</code>载入时</li><li><code>afterAppear</code>载入后</li><li><code>appearCancelled</code>取消载入（载入开始后）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">    <span class="attr">appear</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">before-appear</span>=<span class="string">&quot;beforeAppear&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">appear</span>=<span class="string">&quot;appear&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">after-appear</span>=<span class="string">&quot;afterAppear&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">appear-cancelled</span>=<span class="string">&quot;appearCancelled&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;change&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ant_man_style&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>对相同的标签元素使用<code>key</code>进行区分。</p><h3 id="渐变模式in-out和out-in"><a href="#渐变模式in-out和out-in" class="headerlink" title="渐变模式in-out和out-in"></a>渐变模式in-out和out-in</h3><h4 id="in-out模式"><a href="#in-out模式" class="headerlink" title="in-out模式"></a>in-out模式</h4><ol><li>新加入的元素做渐变进入。</li><li>渐变进入结束后，原存在的元素再渐变离开。</li></ol><h4 id="out-in模式"><a href="#out-in模式" class="headerlink" title="out-in模式"></a>out-in模式</h4><ol><li>原存在的元素渐变离开。</li><li>渐变离开结束后，新元素再渐变进入。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">&quot;in-out&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="列表过渡"><a href="#列表过渡" class="headerlink" title="列表过渡"></a>列表过渡</h3><ul><li><code>&lt;transition-group&gt;</code>会渲染出一个<code>html</code>标签，预设是<code>&lt;span&gt;</code>，也可以选择自定义<code>tag</code>为其他标签。</li><li>无法使用（渐变模式<code>in-out</code>和<code>out-in</code>），因为不再是元素之间来回切换。</li><li>每个元素需要设定一个<code>key</code>值，不能重复。</li></ul><h3 id="列表乱数排序"><a href="#列表乱数排序" class="headerlink" title="列表乱数排序"></a>列表乱数排序</h3><p><code>&lt;transition-group&gt;</code>能够改变数组的排序，使用前需要先安装<code>shuffle</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i --save lodash.<span class="property">shuffle</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> shuffle = <span class="built_in">require</span>(<span class="string">&#x27;lodash.shuffle&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="过滤器filter"><a href="#过滤器filter" class="headerlink" title="过滤器filter"></a>过滤器filter</h2><h3 id="filters串联"><a href="#filters串联" class="headerlink" title="filters串联"></a>filters串联</h3><p><code>filter</code>可以同时串联多个<code>filter</code>函数。</p><h3 id="filters参数"><a href="#filters参数" class="headerlink" title="filters参数"></a>filters参数</h3><h2 id="emit"><a href="#emit" class="headerlink" title="$emit"></a>$emit</h2><ol><li>父组件可以使用<code>props</code>把数据传递给子组件。</li><li>子组件可以使用<code>$emit</code>触发父组件的自定义事件。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6深入研究</title>
      <link href="/2018/11/13/%E6%8A%80%E6%9C%AF/ECMAScript/ES6%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6/"/>
      <url>/2018/11/13/%E6%8A%80%E6%9C%AF/ECMAScript/ES6%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前过了一遍<code>ES6</code>，在实际使用中发现只是用到了一些很简单的特性，很多精华的内容没有研究透，最近看了《<code>ES6-in-depth</code>》觉得不错，希望总阅读的知识点进行总结，提高学习效率。</p></blockquote><span id="more"></span><h1 id="迭代器和for-of循环"><a href="#迭代器和for-of循环" class="headerlink" title="迭代器和for-of循环"></a>迭代器和for-of循环</h1><ul><li>最简洁、最直接的遍历数组元素的语法</li><li>这个方法避开<code>for-in</code>循环的所有缺陷</li><li>可以正确响应<code>break</code>、<code>continue</code>和<code>return</code>语句</li><li><code>for-in</code>循环用来遍历对象属性</li><li><code>for-of</code>循环用来遍历数据</li><li><code>for-of</code>循环不仅支持数组，还支持大多数类数组对象</li><li><code>for-of</code>循环也支持字符串遍历，它将字符串视为一系列的<code>Unicode</code>字符来进行遍历</li><li>支持<code>Map</code>和<code>Set</code>对象遍历</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络知识面面观</title>
      <link href="/2018/11/13/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E9%9D%A2%E9%9D%A2%E8%A7%82/"/>
      <url>/2018/11/13/%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E9%9D%A2%E9%9D%A2%E8%A7%82/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP响应常见状态码"><a href="#HTTP响应常见状态码" class="headerlink" title="HTTP响应常见状态码"></a>HTTP响应常见状态码</h1><span id="more"></span><table><thead><tr><th>状态码</th><th>描述</th></tr></thead><tbody><tr><td><code>100-199</code></td><td>成功接收请求, 要求客户端继续提交下一次请求才能完成整个处理过程</td></tr><tr><td><code>200-299</code></td><td>成功接收请求并已完成整个处理过程，常用<code>200</code></td></tr><tr><td><code>300-399</code></td><td>为完成请求, 需进一步细化需求: 例如: 请求的资源已经移动一个新地址，常用<code>302</code>(重定向)，<code>307</code> 和<code>304</code>(拿缓存)</td></tr><tr><td><code>400-499</code></td><td>客户端的请求有错误, 包含语法错误或者不能正确执行。 常用<code>404</code>(请求的资源在<code>web</code>服务器中没有)，<code>403</code>(服务器拒绝访问, 权限不够)</td></tr><tr><td><code>500-599</code></td><td>服务器端出现错误</td></tr><tr><td><code>200</code></td><td>表示一切正常, 返回的是正常请求结果</td></tr><tr><td><code>302/307</code></td><td>临时重定向，指出请求的文档已被临时移动到别处, 此文档的新的<code>url</code>在<code>location</code>响应头中给出</td></tr><tr><td><code>304</code></td><td>未修改，表示客户端缓存的版本是最新的, 客户端应该继续使用它</td></tr><tr><td><code>403</code></td><td>禁止，服务器理解客户端请求，但拒绝处理它，通常用于服务器上文件或目录的权限设置所致</td></tr><tr><td><code>404</code></td><td>找不到，服务器上不存在客户端所请求的资源</td></tr><tr><td><code>500</code></td><td>服务器内部错误，服务器端的<code>cgi</code>，<code>asp</code>，<code>jsp</code>等程序发生错误</td></tr></tbody></table><h1 id="TCP三次握手和四次挥手"><a href="#TCP三次握手和四次挥手" class="headerlink" title="TCP三次握手和四次挥手"></a>TCP三次握手和四次挥手</h1><ul><li><p>建立<code>TCP</code>连接需要<strong>三次握手</strong>：首先<code>Client</code>端发送连接请求报文，<code>Server</code>端接收连接后回复<code>ACK</code>报文，并为这次连接分配资源。<code>Client</code>端接收到 <code>ACK</code>报文后也向<code>Server</code>端发发送<code>ACK</code>报文，并分配资源，这样<code>TCP</code>连接就建立了。</p><ul><li>第一步：客户端的<code>TCP</code>先向服务器的<code>TCP</code>发送一个连接请求报文。这个特殊的报文中不含应用层数据，其首部中的<code>SYN</code>标志位被置<code>1</code>。另外， 客户端会随机选择一个起始序号<code>seq=x</code>(连接请求报文不携带数据，但要消耗掉一个序号)。</li><li>第二步：服务器端的<code>TCP</code>收到连接请求报文后，若同意建立连接，就向客户端发送请求，并为该<code>TCP</code>连接分配<code>TCP</code>缓存和变量。在确认报文中，<code>SYN</code>和<code>ACK</code>位都被置为<code>1</code>, 确认好字段的值为<code>x+1</code>，并且服务器随机产生起始序号<code>seq=y</code>(确认报文不携带数据, 但也要消耗掉一个序号)。确认报文同样不包含应用层数据。</li><li>第三步：当客户端收到确认报文后，还要向服务器给出确认，并且也要给该连接分配缓存和变量。这个报文的<code>ACK</code>标志位被置为<code>1</code>，序号字段为<code>x+1</code>，确认号字段为<code>y+1</code>。</li></ul></li><li><p><strong>四次挥手</strong></p><ul><li>第一步：客户端打算关闭连接，就向其<code>TCP</code>发送一个连接释放报文，并停止再发送数据，主动关闭<code>TCP</code>连接，该报文的<code>FIN</code>标志位被置<code>1</code>，<code>seq=u</code>，它等于前面已经传送过的数据的最后一个字节的序号加<code>1</code>(<code>FIN</code>报文即使不携带数据，也要消耗掉一个序号)。</li><li>第二步：服务器接收连接释放报文后即发出确认，确认号是<code>ack=u+1</code>，这个报文自己的序号是<code>v</code>，等于它前面已传送过的数据的最后一个自己的序号加<code>1</code>。此时，从客户端到服务器这个方向的连接就释放了，<code>TCP</code>连接处于半关闭状态。但服务器若发送数据，客户端仍要接收，即从服务器到客户机的连接仍未关闭。</li><li>第三步：若服务器已经没有了要向客户端发送的数据，就通知<code>TCP</code>释放连接，此时其发出<code>FIN=1</code>的连接释放报文。</li><li>第四步: 客户端收到连接释放报文后，必须发出确认。在确认报文中，<code>ACK</code>字段被置为<code>1</code>，确认号<code>ack=w+1</code>，序号<code>seq=u+1</code>。此时，<code>TCP</code>连接还没有释放掉，必须经过等待计时器设置的时间<code>2MSL</code>后, <code>A</code>才进入到连接关闭状态。</li></ul></li></ul><h1 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h1><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><blockquote><p>应用层(<code>application-layer</code>）的任务是通过应用进程间的交互来完成特定网络应用。应用层协议定义的是应用进程（进程：主机中正在运行的程序）间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如域名系统 <code>DNS</code>，支持万维网应用的 <code>HTTP</code> 协议，支持电子邮件的 <code>SMTP</code> 协议等等。我们把应用层交互的数据单元称为报文。</p></blockquote><p><strong>域名系统</strong></p><blockquote><p>域名系统(<code>Domain Name System</code> 缩写<code>DNS</code>，<code>Domain Name</code>被译为域名)是因特网的一项核心服务，它作为可以将域名和<code>IP</code>地址相互映射的一个分布式数据库，能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的<code>IP</code>数串。</p></blockquote><p><strong><code>http</code>协议</strong></p><blockquote><p>超文本传输协议（<code>HTTP</code>，<code>HyperText Transfer Protocol</code>)是互联网上应用最为广泛的一种网络协议。所有的 <code>WWW</code>（万维网） 文件都必须遵守这个标准。</p></blockquote><h2 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h2><blockquote><p>运输层(<code>transport layer</code>)的主要任务就是负责向两台主机进程之间的通信提供通用的数据传输服务。应用进程利用该服务传送应用层报文。“通用的”是指并不针对某一个特定的网络应用，而是多种应用可以使用同一个运输层服务。由于一台主机可同时运行多个线程，因此运输层有复用和分用的功能。所谓复用就是指多个应用层进程可同时使用下面运输层的服务，分用和复用相反，是运输层把收到的信息分别交付上面应用层中的相应进程。</p></blockquote><h3 id="运输层常用的两种协议TCP、UDP"><a href="#运输层常用的两种协议TCP、UDP" class="headerlink" title="运输层常用的两种协议TCP、UDP"></a>运输层常用的两种协议TCP、UDP</h3><ul><li>传输控制协议<code>TCP</code>（<code>Transmisson Control Protocol</code>）–提供面向连接的，可靠的数据传输服务。</li><li>用户数据协议<code>UDP</code>（<code>User Datagram Protocol</code>）–提供无连接的，尽最大努力的数据传输服务（不保证数据传输的可靠性）。</li></ul><p><strong><code>TCP</code>的主要特点</strong></p><ul><li><code>TCP</code>是面向连接的。（就好像打电话一样，通话前需要先拨号建立连接，通话结束后要挂机释放连接）；</li><li>每一条<code>TCP</code>连接只能有两个端点，每一条<code>TCP</code>连接只能是点对点的（一对一）；</li><li><code>TCP</code>提供可靠交付的服务。通过<code>TCP</code>连接传送的数据，无差错、不丢失、不重复、并且按序到达；</li><li><code>TCP</code>提供全双工通信。<code>TCP</code>允许通信双方的应用进程在任何时候都能发送数据。<code>TCP</code>连接的两端都设有发送缓存和接收缓存，用来临时存放双方通信的数据；</li><li>面向字节流。<code>TCP</code>中的“流”（<code>Stream</code>）指的是流入进程或从进程流出的字节序列。“面向字节流”的含义是：虽然应用程序和<code>TCP</code>的交互是一次一个数据块（大小不等），但<code>TCP</code>把应用程序接下来的数据仅仅看成是一连串的无结构的字节流。</li></ul><p><strong><code>UDP</code>的主要特点</strong></p><ul><li><code>UDP</code>是无连接的；</li><li><code>UDP</code>使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态（这里面有许多参数）；</li><li><code>UDP</code>是面向报文的；</li><li><code>UDP</code>没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如直播，实时视频会议等）；</li><li><code>UDP</code>支持一对一、一对多、多对一和多对多的交互通信；</li><li><code>UDP</code>的首部开销小，只有<code>8</code>个字节，比<code>TCP</code>的<code>20</code>个字节的首部要短。</li></ul><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><ul><li><p>在计算机网络中进行通信的两个计算机之间可能会经过很多个数据链路，也可能还要经过很多通信子网。网络层的任务就是选择合适的网间路由和交换结点， 确保数据及时传送。在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送。在<code>TCP/IP</code>体系结构中，由于网络层使用<code>IP</code>协议，因此分组也叫<code>IP</code>数据报 ，简称<strong>数据报</strong>。</p></li><li><p>互联网是由大量的异构（<code>heterogeneous</code>）网络通过路由器（<code>router</code>）相互连接起来的。互联网使用的网络层协议是无连接的网际协议（<code>Intert Prococol</code>）和许多路由选择协议，因此互联网的网络层也叫做网际层或<code>IP</code>层。</p></li></ul><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><ul><li><p>数据链路层(<code>data link layer</code>)通常简称为链路层。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专门的链路层的协议。 在两个相邻节点之间传送数据时，数据链路层将网络层接下来的<code>IP</code>数据报组装成帧，在两个相邻节点间的链路上传送帧。每一帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。</p></li><li><p>在接收数据时，控制信息使接收端能够知道一个帧从哪个比特开始和到哪个比特结束。这样，数据链路层在收到一个帧后，就可从中提取数据部分，上交给网络层。控制信息还使接收端能够检测到所收到的帧中有无差错。如果发现差错，数据链路层就简单地丢弃这个出了差错的帧，以避免继续在网络中传送下去，浪费网络资源。如果需要改正数据在链路层传输时出现差错（这就是说，数据链路层不仅要检错，而且还要纠错），那么就要采用可靠性传输协议来纠正出现的差错。这种方法会使链路层的协议复杂些。</p></li></ul><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><ul><li><p>在物理层上所传送的数据单位是比特。 物理层(<code>physical layer</code>)的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。使其上面的数据链路层不必考虑网络的具体传输介质是什么。“透明传送比特流”表示经实际电路传送后的比特流没有发生变化，对传送的比特流来说，这个电路好像是看不见的。</p></li><li><p>在互联网使用的各种协中最重要和最著名的就是<code>TCP/IP</code>两个协议。</p></li></ul><h1 id="HTTP与HTTPS的区别"><a href="#HTTP与HTTPS的区别" class="headerlink" title="HTTP与HTTPS的区别"></a>HTTP与HTTPS的区别</h1><p><code>HTTP</code>协议运行在<code>TCP</code>之上，明文传输，客户端与服务器端都无法验证对方的身份；<code>HTTPS</code>是身披<code>SSL</code>(<code>Secure Socket Layer</code>)外壳的<code>HTTP</code>，运行于<code>SSL</code>上，<code>SSL</code>运行于<code>TCP</code>之上，是添加了加密和认证机制的<code>HTTP</code>。二者之间存在如下不同：</p><ul><li>端口不同：<code>HTTPS</code>与<code>HTTP</code>使用不同的连接方式，用的端口也不一样，前者是<code>80</code>，后者是<code>443</code>；</li><li>资源消耗：和<code>HTTP</code>通信相比，<code>HTTPS</code>通信会由于加减密处理消耗更多的<code>CPU</code>和内存资源；</li><li>开销：<code>HTTPS</code>通信需要证书，而证书一般需要向认证机构购买；</li><li><code>HTTPS</code>的加密机制是一种共享密钥加密和公开密钥加密并用的混合加密机制。</li></ul><h2 id="对称加密与非对称加密"><a href="#对称加密与非对称加密" class="headerlink" title="对称加密与非对称加密"></a>对称加密与非对称加密</h2><ul><li><p>对称密钥加密是指加密和解密使用同一个密钥的方式，这种方式存在的最大问题就是密钥发送问题，即如何安全地将密钥发给对方；而非对称加密是指使用一对非对称密钥，即公钥和私钥，公钥可以随意发布，但私钥只有自己知道。发送密文的一方使用对方的公钥进行加密处理，对方接收到加密信息后，使用自己的私钥进行解密。</p></li><li><p>由于非对称加密的方式不需要发送用来解密的私钥，所以可以保证安全性；但是和对称加密比起来，它非常的慢，所以我们还是要用对称加密来传送消息，但对称加密所使用的密钥我们可以通过非对称加密的方式发送出去。</p></li></ul><h2 id="TCP协议如何保持传输的可靠性"><a href="#TCP协议如何保持传输的可靠性" class="headerlink" title="TCP协议如何保持传输的可靠性"></a>TCP协议如何保持传输的可靠性</h2><blockquote><p><code>TCP</code>提供一种面向连接的、可靠的字节流服务。其中，面向连接意味着两个使用<code>TCP</code>的应用（通常是一个客户和一个服务器）在彼此交换数据之前必须先建立一个<code>TCP</code>连接。在一个<code>TCP</code>连接中，仅有两方进行彼此通信；而字节流服务意味着两个应用程序通过<code>TCP</code>链接交换<code>8bit</code>字节构成的字节流，<code>TCP</code>不在字节流中插入记录标识符。</p></blockquote><p><strong>对于可靠性，<code>TCP</code>通过以下方式进行保证：</strong></p><ul><li><strong>数据包校验</strong>：目的是检测数据在传输过程中的任何变化，若校验出包有错，则丢弃报文段并且不给出响应，这时<code>TCP</code>发送数据端超时后会重发数据；</li><li><strong>对失序数据包重排序</strong>：既然<code>TCP</code>报文段作为<code>IP</code>数据报来传输，而<code>IP</code>数据报的到达可能会失序，因此<code>TCP</code>报文段的到达也可能会失序。<code>TCP</code>将对失序数据进行重新排序，然后才交给应用层；</li><li><strong>丢弃重复数据</strong>：对于重复数据，能够丢弃重复数据；</li><li><strong>应答机制</strong>：当<code>TCP</code>收到发自<code>TCP</code>连接另一端的数据，它将发送一个确认。这个确认不是立即发送，通常将推迟几分之一秒；</li><li><strong>超时重发</strong>：当<code>TCP</code>发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段；</li><li><strong>流量控制</strong>：<code>TCP</code>连接的每一方都有固定大小的缓冲空间。<code>TCP</code>的接收端只允许另一端发送接收端缓冲区所能接纳的数据，这可以防止较快主机致使较慢主机的缓冲区溢出，这就是流量控制。<code>TCP</code>使用的流量控制协议是可变大小的滑动窗口协议。</li></ul><h1 id="查找域名对应的IP地址"><a href="#查找域名对应的IP地址" class="headerlink" title="查找域名对应的IP地址"></a>查找域名对应的IP地址</h1><blockquote><p>这一步包括<code>DNS</code>具体的查找过程，包括：浏览器缓存-&gt;系统缓存-&gt;路由器缓存…</p></blockquote><ul><li>浏览器搜索自己的<code>DNS</code>缓存（维护一张域名与<code>IP</code>地址的对应表）；</li><li>搜索操作系统中的<code>DNS</code>缓存（维护一张域名与<code>IP</code>地址的对应表）；</li><li>搜索操作系统的<code>hosts</code>文件（ <code>Windows</code>环境下，维护一张域名与<code>IP</code>地址的对应表）；</li><li>操作系统将域名发送至<code>LDNS</code>（本地区域名服务器），<code>LDNS</code>查询自己的<code>DNS</code>缓存（一般查找成功率在<code>80%</code>左右），查找成功则返回结果，失败则发起一个迭代<code>DNS</code>解析请求：<ul><li><code>LDNS</code>向 <code>Root Name Server</code>（根域名服务器，如<code>com</code>、<code>net</code>、<code>org</code>等的解析的顶级域名服务器的地址）发起请求，此处，<code>Root Name Server</code>返回<code>com</code>域的顶级域名服务器的地址；</li><li><code>LDNS</code>向<code>com</code>域的顶级域名服务器发起请求，返回<code>baidu.com</code>域名服务器地址；</li><li><code>LDNS</code>向<code>baidu.com</code>域名服务器发起请求，得到<code>www.baidu.com</code>的<code>IP</code>地址；</li></ul></li><li><code>LDNS</code>将得到的<code>IP</code>地址返回给操作系统，同时自己也将<code>IP</code>地址缓存起来；</li><li>操作系统将<code>IP</code>地址返回给浏览器，同时自己也将<code>IP</code>地址缓存起来。</li></ul><h1 id="从输入URL到页面加载发生了什么"><a href="#从输入URL到页面加载发生了什么" class="headerlink" title="从输入URL到页面加载发生了什么"></a>从输入URL到页面加载发生了什么</h1><p><strong>总体来说分为以下几个过程:</strong></p><ul><li><code>DNS</code>解析</li><li><code>TCP</code>连接</li><li>发送<code>HTTP</code>请求</li><li>服务器处理请求并返回<code>HTTP</code>报文</li><li>浏览器解析渲染页面</li><li>连接结束</li></ul><h1 id="HTTP的几种请求方法的用途"><a href="#HTTP的几种请求方法的用途" class="headerlink" title="HTTP的几种请求方法的用途"></a>HTTP的几种请求方法的用途</h1><ul><li><code>GET</code>方法：发送一个请求来取得服务器上的某一资源</li><li><code>POST</code>方法：向<code>URL</code>指定的资源提交数据或附加新的数据</li><li><code>PUT</code>方法：跟<code>POST</code>方法很像，也是向服务器提交数据。但是，它们之间有不同。<code>PUT</code>指定了资源在服务器上的位置，而<code>POST</code>没有</li><li><code>HEAD</code>方法：只请求页面的首部</li><li><code>DELETE</code>方法：删除服务器上的某资源</li><li><code>OPTIONS</code>方法：它用于获取当前<code>URL</code>所支持的方法。如果请求成功，会有一个<code>Allow</code>的头包含类似“<code>GET</code>,<code>POST</code>”这样的信息</li><li><code>TRACE</code>方法：<code>TRACE</code>方法被用于激发一个远程的，应用层的请求消息回路</li><li><code>CONNECT</code>方法：把请求连接转换到透明的<code>TCP/IP</code>通道</li></ul><h1 id="五类IP地址的范围"><a href="#五类IP地址的范围" class="headerlink" title="五类IP地址的范围"></a>五类IP地址的范围</h1><p><code>IP</code>地址分为<code>A</code>,<code>B</code>,<code>C</code>,<code>D</code>,<code>E</code>五类。</p><ul><li>网络号：用于识别主机所在的网络； </li><li>主机号：用于识别该网络中的主机。</li></ul><p>其中<code>A</code>类分配给政府机关使用，<code>B</code>类地址给大中型企业使用，<code>C</code>类地址给个人使用。这三种是主要的。</p><p><code>IP</code>地址分为五类，<code>A</code>类保留给政府机构，<code>B</code>类分配给中等规模的公司，<code>C</code>类分配给任何需要的人，<code>D</code>类用于组播，<code>E</code>类用于实验，各类可容纳的地址数目不同。</p><p>其中<code>A</code>类、<code>B</code>类、和<code>C</code>类这三类地址用于<code>TCP/IP</code>节点，其它两类<code>D</code>类和<code>E</code>类被用于特殊用途。<code>A</code>、<code>B</code>、<code>C</code>三类<code>IP</code>地址的特征：当把<code>IP</code>地址写成二进制形式时，<code>A</code>类地址的第一位总是<code>0</code>，<code>B</code>类地址的前两位总是<code>10</code>，<code>C</code>类地址的前三位总是<code>110</code>。</p><p><strong><code>A</code>类地址</strong></p><ol><li><code>A</code>类地址第<code>1</code>字节为网络地址，其它<code>3</code>个字节为主机地址。</li><li><code>A</code>类地址范围：<code>1.0.0.1</code>—<code>126.155.255.254</code></li><li><code>A</code>类地址中的私有地址和保留地址：<ul><li><code>10.X.X.X</code>是私有地址（所谓的私有地址就是在互联网上不使用，而被用在局域网络中的地址）</li><li><code>127.X.X.X</code>是保留地址，用做循环测试用的</li></ul></li></ol><p><strong><code>B</code>类地址</strong></p><ol><li><code>B</code>类地址第<code>1</code>字节和第<code>2</code>字节为网络地址，其它<code>2</code>个字节为主机地址。</li><li><code>B</code>类地址范围：<code>128.0.0.1</code>—<code>191.255.255.254</code>。</li><li><code>B</code>类地址的私有地址和保留地址：<ul><li><code>172.16.0.0</code>—<code>172.31.255.255</code>是私有地址</li><li><code>169.254.X.X</code>是保留地址。如果你的<code>IP</code>地址是自动获取<code>IP</code>地址，而你在网络上又没有找到可用的<code>DHCP</code>服务器。就会得到其中一个<code>IP</code></li></ul></li></ol><p><strong><code>C</code>类地址</strong></p><ol><li><code>C</code>类地址第<code>1</code>字节、第<code>2</code>字节和第<code>3</code>个字节为网络地址，第<code>4</code>个个字节为主机地址。另外第<code>1</code>个字节的前三位固定为<code>110</code>。</li><li><code>C</code>类地址范围：<code>192.0.0.1</code>—<code>223.255.255.254</code>。</li><li><code>C</code>类地址中的私有地址：<ul><li><code>192.168.X.X</code> 是私有地址。</li></ul></li></ol><p><strong><code>D</code>类地址</strong></p><ol><li><code>D</code>类地址不分网络地址和主机地址，它的第<code>1</code>个字节的前四位固定为<code>1110</code>。</li><li><code>D</code>类地址范围：<code>224.0.0.1</code>—<code>239.255.255.254</code></li></ol><p><strong><code>E</code>类地址</strong></p><ol><li><code>E</code>类地址也不分网络地址和主机地址，它的第<code>1</code>个字节的前五位固定为<code>11110</code>。</li><li><code>E</code>类地址范围：<code>240.0.0.1</code>—<code>255.255.255.254</code></li></ol><h1 id="HTTP长连接、短连接"><a href="#HTTP长连接、短连接" class="headerlink" title="HTTP长连接、短连接"></a>HTTP长连接、短连接</h1><ul><li><p>在<code>HTTP/1.0</code>中默认使用短连接。也就是说，客户端和服务器每进行一次<code>HTTP</code>操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个<code>HTML</code>或其他类型的<code>Web</code>页中包含有其他的<code>Web</code>资源（如<code>JavaScript</code>文件、图像文件、<code>CSS</code>文件等），每遇到这样一个<code>Web</code>资源，浏览器就会重新建立一个<code>HTTP</code>会话。</p></li><li><p>而从<code>HTTP/1.1</code>起，默认使用长连接，用以保持连接特性。使用长连接的<code>HTTP</code>协议，会在响应头加入这行代码：<code>Connection:keep-alive</code></p></li><li><p>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输<code>HTTP</code>数据的<code>TCP</code>连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。<code>Keep-Alive</code>不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如<code>Apache</code>）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。</p></li><li><p><code>HTTP</code>协议的长连接和短连接，实质上是<code>TCP</code>协议的长连接和短连接。</p></li></ul><h1 id="如何理解HTTP协议是无状态的"><a href="#如何理解HTTP协议是无状态的" class="headerlink" title="如何理解HTTP协议是无状态的"></a>如何理解HTTP协议是无状态的</h1><blockquote><p><code>HTTP</code>协议是无状态的，指的是协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。也就是说，打开一个服务器上的网页和上一次打开这个服务器上的网页之间没有任何联系。<code>HTTP</code>是一个无状态的面向连接的协议，无状态不代表<code>HTTP</code>不能保持<code>TCP</code>连接，更不能代表<code>HTTP</code>使用的是<code>UDP</code>协议（无连接）。</p></blockquote><h1 id="Socket连接与HTTP连接的联系与区别"><a href="#Socket连接与HTTP连接的联系与区别" class="headerlink" title="Socket连接与HTTP连接的联系与区别"></a>Socket连接与HTTP连接的联系与区别</h1><ul><li><p>通常情况下<code>Socket</code>连接就是<code>TCP</code>连接，因此<code>Socket</code>连接一旦建立，通信双方即可开始相互发送数据内容，直到双方连接断开。但在实际网络应用中，客户端到服务器之间的通信往往需要穿越多个中间节点，例如路由器、网关、防火墙等，大部分防火墙默认会关闭长时间处于非活跃状态的连接而导致<code>Socket</code>连接断连，因此需要通过轮询告诉网络，该连接处于活跃状态。</p></li><li><p>而<code>HTTP</code>连接使用的是“<strong>请求—响应</strong>”的方式，不仅在请求时需要先建立连接，而且需要客户端向服务器发出请求后，服务器端才能回复数据。</p></li><li><p>很多情况下，需要服务器端主动向客户端推送数据，保持客户端与服务器数据的实时与同步。此时若双方建立的是<code>Socket</code>连接，服务器就可以直接将数据传送给客户端；若双方建立的是<code>HTTP</code>连接，则服务器需要等到客户端发送一次请求后才能将数据传回给客户端，因此，客户端定时向服务器端发送连接请求，不仅可以保持在线，同时也是在“询问”服务器是否有新的数据，如果有就将数据传给客户端。</p></li></ul><h1 id="HTTP-TCP-报文结构"><a href="#HTTP-TCP-报文结构" class="headerlink" title="HTTP(TCP) 报文结构"></a>HTTP(TCP) 报文结构</h1><blockquote><p>例如一个<code>100kb</code>的<code>HTML</code>文档需要传送到另外一台计算机，并不会整个文档直接传送过去，可能会切割成几个部分，比如四个分别为<code>25kb</code>的数据段。而每个数据段再加上一个<code>TCP</code>首部，就组成了<code>TCP</code>报文。<code>TCP</code>报文 (<code>Segment</code>)，包括首部和数据部分。</p></blockquote><p><strong>首部：</strong></p><ul><li>源端口 <code>source port</code></li><li>目的端口 <code>destination port</code></li><li>序号 <code>sequence number</code></li><li>确认号 <code>acknowledgment number</code></li><li>数据偏移 <code>offset</code></li><li>保留 <code>reserved</code></li><li>标志位 <code>tcp flags</code></li><li>窗口大小 <code>window size</code></li><li>检验和 <code>checksum</code></li><li>紧急指针 <code>urgent pointer</code></li><li>选项 <code>tcp options</code></li></ul><h1 id="HTTP的缓存机制"><a href="#HTTP的缓存机制" class="headerlink" title="HTTP的缓存机制"></a>HTTP的缓存机制</h1><p><code>HTTP</code>的缓存主要利用<code>header</code>里的两个字段来控制：</p><ul><li><p><code>Cache-control</code>主要包含以及几个字段：</p><ul><li><code>private</code>：则只有客户端可以缓存</li><li><code>public</code>：客户端和代理服务器都可以缓存</li><li><code>max-age</code>：缓存的过期时间</li><li><code>no-cache</code>：需要使用对比缓存来验证缓存数据</li><li><code>no-store</code>：所有内存都不会进行缓存</li></ul></li><li><p><code>ETag</code>：即用来进行对比缓存，<code>Etag</code>是服务端资源的一个标识码</p><ul><li>当客户端发送第一次请求时服务端会下发当前请求资源的标识码<code>Etag</code>，下次再请求时，客户端则会通过<code>header</code>里的<code>If-None-Match</code>将这个标识码<code>Etag</code>带上，服务端将客户端传来的<code>Etag</code>与最新的资源<code>Etag</code>做对比，如果一样，则表示资源没有更新，返回<code>304</code>。</li></ul></li></ul><p>通过<code>Cache-control</code>和<code>Etag</code>的配合来实现<code>HTTP</code>的缓存机制。</p><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><blockquote><p><code>Cookie</code>就是用来在本地缓存记住一些状态的，一个<code>Cookie</code>一般都包含<code>domain</code>(所属域)、<code>path</code>、<code>Expires</code>(过期时间)等几个属性。服务端可以通过在响应头<code>set-cookies</code>将状态写入客户端的<code>Cookie</code>中。</p></blockquote><h1 id="HTTP-2-0与HTTP-1-x相比有什么优点"><a href="#HTTP-2-0与HTTP-1-x相比有什么优点" class="headerlink" title="HTTP 2.0与HTTP 1.x相比有什么优点"></a>HTTP 2.0与HTTP 1.x相比有什么优点</h1><ul><li><p><strong>二进制格式</strong>：<code>HTTP 1.x</code>是文本协议，而<code>HTTP 2.0</code>是二进制以帧为基本单位，是一个二进制协议，一帧中除了包含数据外同时还包含该帧的标识：<code>Stream Identifier</code>，即标识了该帧属于哪个<code>request</code>，使得网络传输变得十分灵活。</p></li><li><p><strong>多路复用</strong>: 一个很大的改进，原先<code>HTTP 1.x</code>一个连接一个请求的情况有比较大的局限性，也引发了很多问题，如建立多个连接的消耗以及效率问题。</p><ul><li><code>HTTP 1.x</code>为了解决效率问题，可能会尽量多的发起并发的请求去加载资源，然而浏览器对于同一域名下的并发请求有限制，而优化的手段一般是将请求的资源放到不同的域名下来突破这种限制。</li><li>而<code>HTTP 2.0</code>支持的多路复用可以很好的解决这个问题，多个请求共用一个<code>TCP</code>连接，多个请求可以同时在这个<code>TCP</code>连接上并发，一个是解决了建立多个<code>TCP</code>连接的消耗问题，一个也解决了效率的问题。那么是什么原理支撑多个请求可以在一个<code>TCP</code>连接上并发呢？基本原理就是上面的二进制分帧，因为每一帧都有一个身份标识，所以多个请求的不同帧可以并发的无序发送出去，在服务端会根据每一帧的身份标识，将其整理到对应的<code>request</code>中。</li></ul></li><li><p><strong><code>header</code> 头部压缩</strong>：主要是通过压缩<code>header</code>来减少请求的大小，减少流量消耗，提高效率。因为之前存在一个问题是，每次请求都要带上 <code>header</code>，而这个<code>header</code>中的数据通常是一成不变的。 </p></li><li><p>支持服务端推送</p></li></ul><h1 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h1><blockquote><p>流量控制是对一条通信路径上的流量进行控制，就是发送方通过获取接收方的回馈来动态调整发送的速率，来达到控制流量的效果，其目的是保证发送者的发送速度不超过接收者的接收速度。</p></blockquote><h1 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h1><blockquote><p>拥塞控制是对整个通信子网的流量进行控制，属于全局控制。</p></blockquote><ol><li><p>慢开始+拥塞避免</p></li><li><p>快重传+快恢复</p><ul><li><strong>快重传</strong>：重传机制都是等到超时还未收到接收方的回复，才开始进行重传。而快重传的设计思路是：如果发送方收到<code>3</code>个重复的接收方的<code>ACK</code>，就可以判断有报文段丢失，此时就可以立即重传丢失的报文段，而不用等到设置的超时时间到了才开始重传，提高了重传的效率。</li><li><strong>快恢复</strong>：拥塞控制会在网络拥塞时将拥塞窗口降为<code>1</code>，重新慢开始，这样存在的一个问题就是网络无法很快恢复到正常状态。快恢复就是来优化这个问题的，使用快恢复，则出现拥塞时，拥塞窗口只会降低到新的慢开始门阀值（即<code>12</code>），而不会降为<code>1</code>，然后直接开始进入拥塞避免加法增长。</li></ul></li></ol><blockquote><p>原文链接：<a href="https://mp.weixin.qq.com/s/uF3bJrjGbGCAzCuCWk18BA">前后端均适用的网络知识点大全</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式手册</title>
      <link href="/2018/11/13/%E6%8A%80%E6%9C%AF/JavaScript/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%89%8B%E5%86%8C/"/>
      <url>/2018/11/13/%E6%8A%80%E6%9C%AF/JavaScript/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="表达式全集"><a href="#表达式全集" class="headerlink" title="表达式全集"></a>表达式全集</h1><span id="more"></span><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td><code>\</code></td><td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“<code>n</code>”匹配字符“<code>n</code>”。“<code>\n</code>”匹配一个换行符。串行“<code>\\</code>”匹配“<code>\</code>”而“<code>\(</code>”则匹配“<code>(</code>”。</td></tr><tr><td><code>^</code></td><td>匹配输入字符串的开始位置。如果设置了<code>RegExp</code>对象的<code>Multiline</code>属性，<code>^</code>也匹配“<code>\n</code>”或“<code>\r</code>”之后的位置。</td></tr><tr><td><code>$</code></td><td>匹配输入字符串的结束位置。如果设置了<code>RegExp</code>对象的<code>Multiline</code>属性，<code>$</code>也匹配“<code>\n</code>”或“<code>\r</code>”之前的位置。</td></tr><tr><td><code>*</code></td><td>匹配前面的子表达式零次或多次。例如，<code>zo*</code>能匹配“<code>z</code>”以及“<code>zoo</code>”。<code>*</code>等价于<code>&#123;0,&#125;</code>。</td></tr><tr><td><code>+</code></td><td>匹配前面的子表达式一次或多次。例如，“<code>zo+</code>”能匹配“<code>zo</code>”以及“<code>zoo</code>”，但不能匹配“<code>z</code>”。<code>+</code>等价于<code>&#123;1,&#125;</code>。</td></tr><tr><td><code>?</code></td><td>匹配前面的子表达式零次或一次。例如，“<code>do(es)?</code>”可以匹配“<code>does</code>”或“<code>does</code>”中的“<code>do</code>”。<code>?</code>等价于<code>&#123;0,1&#125;</code>。</td></tr><tr><td><code>&#123;n&#125;</code></td><td><code>n</code>是一个非负整数。匹配确定的<code>n</code>次。例如，“<code>o&#123;2&#125;</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但是能匹配“<code>food</code>”中的两个<code>o</code>。</td></tr><tr><td><code>&#123;n,&#125;</code></td><td><code>n</code>是一个非负整数。至少匹配<code>n</code>次。例如，“<code>o&#123;2,&#125;</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但能匹配“<code>foooood</code>”中的所有<code>o</code>。“<code>o&#123;1,&#125;</code>”等价于“<code>o+</code>”。“<code>o&#123;0,&#125;</code>”则等价于“<code>o*</code>”。</td></tr><tr><td><code>&#123;n,m&#125;</code></td><td><code>m</code>和<code>n</code>均为非负整数，其中<code>n&lt;=m</code>。最少匹配<code>n</code>次且最多匹配<code>m</code>次。例如，“<code>o&#123;1,3&#125;</code>”将匹配“<code>fooooood</code>”中的前三个<code>o</code>。“<code>o&#123;0,1&#125;</code>”等价于“<code>o?</code>”。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td><code>?</code></td><td>当该字符紧跟在任何一个其他限制符（<code>*</code>,<code>+</code>,<code>?</code>，<code>&#123;n&#125;</code>，<code>&#123;n,&#125;</code>，<code>&#123;n,m&#125;</code>）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“<code>oooo</code>”，“<code>o+?</code>”将匹配单个“<code>o</code>”，而“<code>o+</code>”将匹配所有“<code>o</code>”。</td></tr><tr><td><code>.</code></td><td>匹配除“<code>\n</code>”之外的任何单个字符。要匹配包括“<code>\n</code>”在内的任何字符，请使用像“<code>(.\n)</code>”的模式。</td></tr><tr><td><code>(pattern)</code></td><td>匹配<code>pattern</code>并获取这一匹配。所获取的匹配可以从产生的<code>Matches</code>集合得到，在<code>VBScript</code>中使用<code>SubMatches</code>集合，在<code>JScript</code>中则使用<code>$0…$9</code>属性。要匹配圆括号字符，请使用“<code>\(</code>”或“<code>&#124;&lt;/code>”。</td></tr><tr><td><code>(?:pattern)</code></td><td>匹配<code>pattern</code>但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“<code>(&#124;)</code>”来组合一个模式的各个部分是很有用。例如“<code>industr(?:y&#124;ies)</code>”就是一个比“<code>industry&#124;industries</code>”更简略的表达式。</td></tr><tr><td><code>(?=pattern)</code></td><td>正向肯定预查，在任何匹配<code>pattern</code>的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“<code>Windows(?=95&#124;98&#124;NT&#124;2000)</code>”能匹配“<code>Windows2000</code>”中的“<code>Windows</code>”，但不能匹配“<code>Windows3.1</code>”中的“<code>Windows</code>”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td><code>(?!pattern)</code></td><td>正向否定预查，在任何不匹配<code>pattern</code>的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“<code>Windows(?!95&#124;98&#124;NT&#124;2000)</code>”能匹配“<code>Windows3.1</code>”中的“<code>Windows</code>”，但不能匹配“<code>Windows2000</code>”中的“<code>Windows</code>”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td><code>(?&lt;=pattern)</code></td><td>反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“<code>(?<=95&#124;98&#124;NT&#124;2000)Windows</code>”能匹配“<code>2000Windows</code>”中的“<code>Windows</code>”，但不能匹配“<code>3.1Windows</code>”中的“<code>Windows</code>”。</td></tr><tr><td><code>(?&lt;!pattern)</code></td><td>反向否定预查，与正向否定预查类拟，只是方向相反。例如“<code>(?<!95&#124;98&#124;NT&#124;2000)Windows</code>”能匹配“<code>3.1Windows</code>”中的“<code>Windows</code>”，但不能匹配“<code>2000Windows</code>”中的“<code>Windows</code>”。</td></tr><tr><td><code>x&#124;y</code></td><td>匹配<code>x</code>或<code>y</code>。例如，“<code>z&#124;food</code>”能匹配“<code>z</code>”或“<code>food</code>”。“<code>(z&#124;f)ood</code>”则匹配“<code>zood</code>”或“<code>food</code>”。</td></tr><tr><td><code>[xyz]</code></td><td>字符集合。匹配所包含的任意一个字符。例如，“<code>[abc]</code>”可以匹配“<code>plain</code>”中的“<code>a</code>”。</td></tr><tr><td><code>[^xyz]</code></td><td>负值字符集合。匹配未包含的任意字符。例如，“<code>[^abc]</code>”可以匹配“<code>plain</code>”中的“<code>p</code>”。</td></tr><tr><td><code>[a-z]</code></td><td>字符范围。匹配指定范围内的任意字符。例如，“<code>[a-z]</code>”可以匹配“<code>a</code>”到“<code>z</code>”范围内的任意小写字母字符。</td></tr><tr><td><code>[^a-z]</code></td><td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，“<code>[^a-z]</code>”可以匹配任何不在“<code>a</code>”到“<code>z</code>”范围内的任意字符。</td></tr><tr><td><code>\b</code></td><td>匹配一个单词边界，也就是指单词和空格间的位置。例如，“<code>er\b</code>”可以匹配“<code>never</code>”中的“<code>er</code>”，但不能匹配“<code>verb</code>”中的“<code>er</code>”。</td></tr><tr><td><code>\B</code></td><td>匹配非单词边界。“<code>er\B</code>”能匹配“<code>verb</code>”中的“<code>er</code>”，但不能匹配“<code>never</code>”中的“<code>er</code>”。</td></tr><tr><td><code>\cx</code></td><td>匹配由<code>x</code>指明的控制字符。例如，<code>\cM</code>匹配一个<code>Control-M</code>或回车符。<code>x</code>的值必须为<code>A-Z</code>或<code>a-z</code>之一。否则，将c视为一个原义的“<code>c</code>”字符。</td></tr><tr><td><code>\d</code></td><td>匹配一个数字字符。等价于<code>[0-9]</code>。</td></tr><tr><td><code>\D</code></td><td>匹配一个非数字字符。等价于<code>[^0-9]</code>。</td></tr><tr><td><code>\f</code></td><td>匹配一个换页符。等价于<code>\x0c</code>和<code>\cL</code>。</td></tr><tr><td><code>\n</code></td><td>匹配一个换行符。等价于<code>\x0a</code>和<code>\cJ</code>。</td></tr><tr><td><code>\r</code></td><td>匹配一个回车符。等价于<code>\x0d</code>和<code>\cM</code>。</td></tr><tr><td><code>\s</code></td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于<code>[\f\n\r\t\v]</code>。</td></tr><tr><td><code>\S</code></td><td>匹配任何非空白字符。等价于<code>[^\f\n\r\t\v]</code>。</td></tr><tr><td><code>\t</code></td><td>匹配一个制表符。等价于<code>\x09</code>和<code>\cI</code>。</td></tr><tr><td><code>\v</code></td><td>匹配一个垂直制表符。等价于<code>\x0b</code>和<code>\cK</code>。</td></tr><tr><td><code>\w</code></td><td>匹配包括下划线的任何单词字符。等价于“<code>[A-Za-z0-9_]</code>”。</td></tr><tr><td><code>\W</code></td><td>匹配任何非单词字符。等价于“<code>[^A-Za-z0-9_]</code>”。</td></tr><tr><td><code>\xn</code></td><td>匹配<code>n</code>，其中<code>n</code>为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“<code>\x41</code>”匹配“<code>A</code>”。“<code>\x041</code>”则等价于“<code>\x04&amp;1</code>”。正则表达式中可以使用<code>ASCII</code>编码。</td></tr><tr><td><code>\num</code></td><td>匹配<code>num</code>，其中<code>num</code>是一个正整数。对所获取的匹配的引用。例如，“<code>(.)\1</code>”匹配两个连续的相同字符。</td></tr><tr><td><code>\n</code></td><td>标识一个八进制转义值或一个向后引用。如果<code>\n</code>之前至少<code>n</code>个获取的子表达式，则<code>n</code>为向后引用。否则，如果<code>n</code>为八进制数字（<code>0-7</code>），则<code>n</code>为一个八进制转义值。</td></tr><tr><td><code>\nm</code></td><td>标识一个八进制转义值或一个向后引用。如果<code>\nm</code>之前至少有<code>nm</code>个获得子表达式，则<code>nm</code>为向后引用。如果<code>\nm</code>之前至少有<code>n</code>个获取，则<code>n</code>为一个后跟文字<code>m</code>的向后引用。如果前面的条件都不满足，若<code>n</code>和<code>m</code>均为八进制数字（<code>0-7</code>），则<code>\nm</code>将匹配八进制转义值<code>nm</code>。</td></tr><tr><td><code>\nml</code></td><td>如果<code>n</code>为八进制数字（<code>0-3</code>），且<code>m</code>和<code>l</code>均为八进制数字（<code>0-7</code>），则匹配八进制转义值<code>nml</code>。</td></tr><tr><td><code>\un</code></td><td>匹配<code>n</code>，其中<code>n</code>是一个用四个十六进制数字表示的<code>Unicode</code>字符。例如，<code>\u00A9</code>匹配版权符号（<code>©</code>）。</td></tr></tbody></table><h1 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h1><table><thead><tr><th>匹配内容</th><th>正则表达式</th></tr></thead><tbody><tr><td>用户名</td><td><code>/^[a-z0-9_-]&#123;3,16&#125;$/</code></td></tr><tr><td>密码</td><td><code>/^[a-z0-9_-]&#123;6,18&#125;$/</code></td></tr><tr><td>十六进制值</td><td><code>/^#?([a-f0-9]&#123;6&#125;&#124;[a-f0-9]&#123;3&#125;)$/</code></td></tr><tr><td>电子邮箱</td><td><code>/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)$/</code><br><code>/^[a-z\d]+(\.[a-z\d]+)*@([\da-z](-[\da-z])?)+(\.&#123;1,2&#125;[a-z]+)+$/</code></td></tr><tr><td>URL</td><td><code>/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)([\/\w \.-]*)*\/?$/</code></td></tr><tr><td>IP 地址</td><td><code>/((2[0-4]\d&#124;25[0-5]&#124;[01]?\d\d?).)&#123;3&#125;(2[0-4]\d&#124;25[0-5]&#124;[01]?\d\d?)/</code><br><code>/^(?:(?:25[0-5]&#124;2[0-4][0-9]&#124;[01]?[0-9][0-9]?).)&#123;3&#125;(?:25[0-5]&#124;2[0-4][0-9]&#124;[01]?[0-9][0-9]?)$/</code></td></tr><tr><td>HTML标签</td><td><code>/^<([a-z]+)([^<]+)<em>(?:>(.</em>)</\1>&#124;\s+/>)$/</code></td></tr><tr><td>删除代码\注释</td><td><code>(?<!\http:&#124;\S)//.*$</code></td></tr><tr><td><code>Unicode</code>编码中的汉字范围</td><td><code>/^[\u2E80-\u9FFF]+$/</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript知多少</title>
      <link href="/2018/11/13/%E6%8A%80%E6%9C%AF/JavaScript/JavaScript%E7%9F%A5%E5%A4%9A%E5%B0%91/"/>
      <url>/2018/11/13/%E6%8A%80%E6%9C%AF/JavaScript/JavaScript%E7%9F%A5%E5%A4%9A%E5%B0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="this与对象原型prototype"><a href="#this与对象原型prototype" class="headerlink" title="this与对象原型prototype"></a>this与对象原型prototype</h1><h1 id="hoisting状态提升"><a href="#hoisting状态提升" class="headerlink" title="hoisting状态提升"></a>hoisting状态提升</h1><p>在程序执行前，编译器先由上到下逐行将代码转为机器可读的命令，然后再执行编译后的指令。</p><blockquote><p>实现一个函数，可以返回输入参数是否为质数？</p></blockquote><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isPrimeNumber</span>(<span class="params">m</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (m &lt;= <span class="number">1</span> || m % <span class="number">1</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &lt; m) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m % n === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            n++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现一个函数，如果传入的参数是字符串，则将该字符串按照字母出现的次数由大到小重新排列并输出；如果传入的参数不是字符串，则将参数输出。</p></blockquote><p><strong>分析：</strong></p><ol><li>首先，使用<code>for</code>循环找出相同的字母，此时需要知道字母出现的次数；</li><li>然后，给它们进行排序<code>sort()</code>，但是<code>sort()</code>是数组方法；</li><li>考虑把字符串先转换为数组，处理完毕之后再转换回字符串；</li><li>使用<code>split()</code>（字符串方法，输出为数组），如果内容为空，则返回的是整个字符串作为数组的第一个元素且数组只包含这一个元素。如果<code>split</code>传入内容为<code>&#39;&#39;</code>，即<code>split(&#39;&#39;)</code>，则字符串里的每个字符分别作为输出数组的元素；</li><li>处理完毕需要再转换为字符串，使用<code>join()</code>（数组方法，输出位字符串），传入内容<code>join(&#39;&#39;)</code>；</li><li>使用正则表达式查找重复字符。</li></ol><blockquote><p><code>classList.toggle(class,true/false)</code></p></blockquote><p class="codepen" data-height="365" data-theme-id="0" data-default-tab="html,result" data-user="whjin" data-slug-hash="MRdePN" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="js-toggleMenu">  <span>See the Pen <a href="https://codepen.io/whjin/pen/MRdePN/">  js-toggleMenu</a> by whjin (<a href="https://codepen.io/whjin">@whjin</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">onmouseover</span>=<span class="string">&quot;over(this)&quot;</span> <span class="attr">onmouseout</span>=<span class="string">&quot;out(this)&quot;</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onmouseover</span>=<span class="string">&quot;over(this)&quot;</span> <span class="attr">onmouseout</span>=<span class="string">&quot;out(this)&quot;</span>&gt;</span>Line<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">over</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  element.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">out</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  element.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="jsonp实现代码"><a href="#jsonp实现代码" class="headerlink" title="jsonp实现代码"></a>jsonp实现代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">JSONP</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">    url,</span></span><br><span class="line"><span class="params">    params,</span></span><br><span class="line"><span class="params">    callbackKey,</span></span><br><span class="line"><span class="params">    callback</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">    <span class="comment">// 在参数里制定callback的名字</span></span><br><span class="line">    params = params || &#123;&#125;</span><br><span class="line">    params[callbackKey] = <span class="string">&#x27;jsonpCallback&#x27;</span></span><br><span class="line">    <span class="comment">// 预留callback</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">jsonpCallback</span> = callback</span><br><span class="line">    <span class="comment">// 拼接参数字符串</span></span><br><span class="line">    <span class="keyword">const</span> paramKeys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(params)</span><br><span class="line">    <span class="keyword">const</span> paramString = paramKeys</span><br><span class="line">        .<span class="title function_">map</span>(<span class="function"><span class="params">key</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span>)</span><br><span class="line">        .<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">    <span class="comment">// 插入DOM元素</span></span><br><span class="line">    <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    script.<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>, <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;paramString&#125;</span>`</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">JSON</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;http://s.weibo.com/ajax/jsonp/suggestion&quot;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&#x27;test&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">callbackKey</span>: <span class="string">&#x27;_cb&#x27;</span>,</span><br><span class="line">    <span class="title function_">callback</span>(<span class="params">result</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="实现防抖函数"><a href="#实现防抖函数" class="headerlink" title="实现防抖函数"></a>实现防抖函数</h1><p>防抖函数原理：在事件被触发<code>n</code>秒后再执行回调，如果在这<code>n</code>秒内又被触发，则重新计时。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 防抖函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">debounce</span> = (<span class="params">fn, delay</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn.<span class="title function_">args</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适用场景：</p><ul><li>按钮提交：防止多次提交按钮，只执行最后提交的一次</li><li>服务端验证：表单验证需要服务端配合，只执行一段连续的输入事件的最后一次，还有搜索联想词的功能类似</li></ul><h1 id="实现节流函数"><a href="#实现节流函数" class="headerlink" title="实现节流函数"></a>实现节流函数</h1><p>节流函数原理：规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 节流函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">throttle</span> = (<span class="params">fn, delay = <span class="number">500</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!flag) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">            flag = <span class="literal">true</span></span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适用场景：</p><ul><li>拖拽：固定时间内只执行一次，防止超高频次触发位置变动</li><li>缩放场景：监控浏览器<code>resize</code></li><li>动画：避免短时间内多次触发动画引起性能问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管中窥Vue</title>
      <link href="/2018/11/13/%E6%8A%80%E6%9C%AF/Vue/%E7%AE%A1%E4%B8%AD%E7%AA%A5Vue/"/>
      <url>/2018/11/13/%E6%8A%80%E6%9C%AF/Vue/%E7%AE%A1%E4%B8%AD%E7%AA%A5Vue/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>Vue</code>和<code>Angular</code>、<code>React.js</code>的相同点和不同点？</p></blockquote><span id="more"></span><p><strong>与<code>React</code>的相同：</strong></p><ul><li>都使用了<code>Virtual DOM</code></li><li>提供了响应式和组件化的视图组件</li><li>将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库。</li></ul><p><strong>与<code>React</code>的区别：</strong></p><ul><li><p>组件的响应式渲染</p><ul><li><code>React</code>的组件的数据状态发生变化时，它会以该组件为根，重新渲染整个组件子树；而<code>Vue</code>不只去渲染需要渲染的组件。</li></ul></li><li><p><code>HTML+CSS</code>的编写</p><ul><li><code>React</code>使用的<code>JSX</code>语法，将<code>HTML</code>、<code>CSS</code>和<code>JS</code>混写；而<code>Vue</code>使用的是<code>templates</code>模板方式，完全融合与经典的<code>Web</code>技术。</li></ul></li></ul><p><strong>与<code>Angular</code>的区别：</strong></p><ul><li>与<code>Angular 1</code>对比，<code>Vue</code>的性能更加优越，<code>Angular</code>性能会随着<code>watcher</code>的增加而变慢，而且<code>Angular</code>中一些<code>watcher</code>会触发另一个更新，使得“脏检查循环”可能会运行多次。</li><li><code>Angular</code>事实上必须用<code>TypeScript</code>来开发，而且<code>Angular</code>对于<code>TS</code>的支持非常全面，而<code>Vue</code>暂时对于<code>TS</code>的支持还在改进阶段。</li><li><code>Vue</code>的体积更小，一个包含了 <code>vuex + vue-router</code> 的 <code>Vue</code> 项目 (<code>30kb gzipped</code>) 相比使用了这些优化的 <code>angular-cli</code> 生成的默认项目尺寸 (<code>~130kb</code>) 还是要小得多。</li></ul><blockquote><p><code>Vue</code>中的<code>MVVM</code>模型？</p></blockquote><ul><li><p><code>Vue</code>是以数据为驱动的，<code>Vue</code>自身将<code>DOM</code>和数据进行绑定，一旦创建绑定，<code>DOM</code>和数据将保持同步，每当数据发生变化，<code>DOM</code>会跟着变化。</p></li><li><p><code>ViewModel</code>是<code>Vue</code>的核心，它是<code>Vue</code>的一个实例。<code>Vue</code>实例是作用在某个<code>HTML</code>元素上的，这个<code>HTML</code>元素可以是<code>body</code>，也可以是某个<code>id</code>所指代的元素。 <code>DOM Listeners</code>和<code>Data Bindings</code>是实现双向绑定的关键。<code>DOM Listeners</code>监听页面所有<code>View</code>层<code>DOM</code>元素的变化，当<code>View</code>发生变化，<code>Model</code>层的数据随之变化；<code>Data Bindings</code>监听<code>Model</code>层的数据，当数据发生变化，<code>View</code>层的<code>DOM</code>元素随之变化。</p></li></ul><blockquote><p><code>v-if</code>和<code>v-show</code>指令有什么区别？</p></blockquote><ul><li><code>v-show</code>对应的值无论是<code>true</code>还是<code>false</code>，对应<code>Html</code>元素都会存在于浏览器的文档中；而<code>v-if</code>如果是<code>false</code>的话，直接不在文档中了。</li></ul><blockquote><p>如何阻止<code>Vue</code>中的绑定事件不发生冒泡？</p></blockquote><ul><li>可以使用“事件修饰符”来处理事件冒泡，如：<code>v-on:click.stop</code>阻止事件冒泡或<code>v-on:submit.prevent</code>阻止默认事件。</li></ul><blockquote><p>父、子组件间是如何通信的？</p></blockquote><ul><li>在<code>Vue</code>中，每个组件实例的作用域是孤立的。这也意味着不能（也不应该）在子组件的模板内直接应用父组件的数据。父组件通过<code>Props</code>向子组件传递数据，而子组件通过<code>Events</code>向父组件传递数据。</li></ul><blockquote><p>非父子层级的组件如何实现通信？</p></blockquote><ul><li>简单的应用场景下，可以使用一个空的<code>Vue</code>实例作为中央事件总线。</li><li>在复杂的情况下，可以考虑使用<code>Vue</code>官方提供的状态管理模式——<code>Vuex</code>来进行管理。</li></ul><blockquote><p>什么是动态组件？它的作用是什么？</p></blockquote><ul><li>通过使用保留的 <code>&lt;component&gt;</code> 元素，动态地绑定到它的 <code>is</code> 特性，我们让多个组件可以使用同一个挂载点，并可以动态地切换。</li><li>除此之外，<code>Vue</code>还提供了<code>keep-alve</code>指令。<code>keep-alive</code>指令允许把切换出去的组件保留在内存中，并保留它的状态或避免重新渲染。</li></ul><blockquote><p>为什么组件中的<code>data</code>属性的值必须是一个函数？</p></blockquote><ul><li>因为在一个组件被多次引用的情况下，如果<code>data</code>的值是一个<code>Object</code>的话，那么由于<code>Object</code>是一个引用类型，所以即使是该组件被多次引用，而其实操作的是同一个对象，最终导致了引用该组件的所有位置都同步的显示了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组大概知多少</title>
      <link href="/2018/11/13/%E6%8A%80%E6%9C%AF/JavaScript/%E6%95%B0%E7%BB%84%E5%A4%A7%E6%A6%82%E7%9F%A5%E5%A4%9A%E5%B0%91/"/>
      <url>/2018/11/13/%E6%8A%80%E6%9C%AF/JavaScript/%E6%95%B0%E7%BB%84%E5%A4%A7%E6%A6%82%E7%9F%A5%E5%A4%9A%E5%B0%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>判断一个变量是否为数组？</p></blockquote><span id="more"></span><p><strong>可靠地检测数组方法</strong></p><p>1.利用<code>Object</code>的<code>toString</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(list);<span class="comment">//[object Array]</span></span><br></pre></td></tr></table></figure><p>2.利用<code>ES5</code>的<code>Array.isArray()</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>(list);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><blockquote><p>数组的原生方法有哪些？</p></blockquote><p><strong>会改变自身的方法：</strong></p><ul><li><code>copyWithin</code>、<code>fill</code>、<code>pop</code>、<code>push</code>、<code>reverse</code>、<code>shift</code>、<code>sort</code>、<code>splice</code>、<code>unshift</code></li></ul><p><strong>不会改变自身的方法：</strong></p><ul><li><code>concat</code>、<code>includes</code>、<code>join</code>、<code>slice</code>、<code>toSource</code>、<code>toString</code>、<code>indexOf</code>、<code>lastIndexOf</code></li></ul><p><strong>遍历方法：</strong></p><ul><li><code>forEach</code>、<code>entries</code>、<code>every</code>、<code>some</code>、<code>filter</code>、<code>find</code>、<code>findIndex</code></li><li><code>keys</code>、<code>map</code>、<code>reduce</code>、<code>reduceRight</code>、<code>values</code></li></ul><p><strong>如何将类数组的变量转化为数组？</strong></p><ul><li>如果是<code>ES6</code>，可以用<code>Array.from()</code>方法。</li><li>通常用<code>Array.prototype.slice.call()</code>的方法，将类似数组转换为数组。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Node.js的实时聊天室</title>
      <link href="/2018/10/02/%E6%8A%80%E6%9C%AF/Node/%E5%9F%BA%E4%BA%8ENode%E7%9A%84%E5%AE%9E%E6%97%B6%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
      <url>/2018/10/02/%E6%8A%80%E6%9C%AF/Node/%E5%9F%BA%E4%BA%8ENode%E7%9A%84%E5%AE%9E%E6%97%B6%E8%81%8A%E5%A4%A9%E5%AE%A4/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>项目需求：</strong><br>1、用<code>nodejs</code>的<code>socket.io</code>写了一个简易版的聊天室（<strong>实时推送技术，无刷新实现信息实时更新，应用于在线聊天室、在线客服系统、评论系统和WebIM等</strong>）      </p><p>2、根据<code>socket.io</code>库给出的<code>api</code>以及《<code>nodejs</code>实战》给出的<code>demo</code>实现了, 也只是很基础的, 但放到服务器上后会有网络延迟, 顺序不正确等问题    </p><p>3、看过网上的资料, 没看到有解释很全或者投入生产环境的代码, 都是一些<code>demo</code></p><p><strong>想请教前辈, 对于一个业务开发中常用的聊天室模块:</strong></p><p>1、应该如何去思考呢?<br>2、整个过程会涉及到哪些知识点?<br>3、会有哪些难点呢?(比如支持高并发啥的)<br>4、应该注意什么呢?(比如如何测试或者啥的?)</p></blockquote><span id="more"></span><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="需求分析："><a href="#需求分析：" class="headerlink" title="需求分析："></a>需求分析：</h2><ol><li>实现在线聊天室的基本功能，包括显示在线用户的个人信息</li><li>用户进行实时聊天，信息推送实时更新</li><li>其他可扩展功能</li></ol><p><img src="https://i.imgur.com/6eGgAmr.png"></p><h2 id="技术栈分析"><a href="#技术栈分析" class="headerlink" title="技术栈分析"></a>技术栈分析</h2><p><code>socket.io</code>是一个开源<code>WebSocket</code>库，它通过<code>Node.js</code>实现<code>WebSocket</code>服务端，同时提供客户端<code>JS</code>库。<code>socket.io</code>支持以事件为基础的实时双向通讯，可以工作在任何平台、浏览器或移动设备。</p><ol><li><p><code>Node.js+Express/koa/egg</code>环境搭建</p></li><li><p><code>socket.io</code></p></li><li><p>聊天基础版（壳模型）</p></li><li><p>模板引擎（<code>jade/pug</code>）</p></li><li><p>聊天界面</p></li><li><p>系统消息</p></li><li><p>用户上下线</p></li><li><p>单聊和群聊</p></li><li><p>图片发送</p></li><li><p>功能完善</p></li><li><p>项目总结</p></li><li><p>首先需要先从一个产品的角度进行考虑：</p><ol><li>设计草图，画出聊天室的大致样子，各个组件的位置，标注功能；</li><li>对每个组件进行分析，确认需要使用的技术；</li><li>再次确认细节，进行切图工作，如果不具备这项能力可以自己动手画图；</li></ol></li><li><p>搭建开发环境：</p><ol><li>技术栈<code>Node.js+socket.io+Express/koa+Mongodb</code>；</li><li>安装<code>Node.js</code>并配置相关依赖，Express有自己的生成器</li><li>搭建壳模型，也就是最简易的聊天室</li><li>开发平台推荐使用Linux或者使用Mac</li></ol></li><li><p>功能介绍：</p><ol><li>用户列表<ol><li>用户登录</li><li>在线用户列表</li></ol></li><li>文本消息传输<ol><li>用户（谁发的消息）</li><li>时间（什么时候发的）</li><li>内容（发的什么内容）</li></ol></li><li>图片传输</li><li>上下线通知</li></ol></li><li><p>技术点：</p><ol><li><code>Node.js</code></li><li><code>Express</code></li><li><code>socket.io</code>（包括客户端和服务器端代码，这个直接看官网的文档）<ol><li><code>server</code></li><li><code>client</code></li></ol></li><li><code>html/css</code></li><li><code>sco.js、messenger.js</code></li><li><strong>模板引擎（<code>jade/pug</code>）是非常重要的一个工具，配合<code>Node.js</code>可以帮助你完成一些复杂的任务，需要重点掌握</strong></li><li>聊天界面设计：<ol><li>用户列表（用户上线添加&#x2F;下线移除，用户每次的变更都进行整体更新，不做单独的移除。如果需要进行单独移除，可通过用户下线时的指定对象来移除特定用户）</li><li>聊天窗口<ol><li>内容展示区（当前用户消息展示&#x2F;对方用户消息展示）</li><li>消息发送区（图片传输功能键&#x2F;消息输入区&#x2F;消息发送功能键）</li><li>用户上下线通知</li><li>键盘事件</li></ol></li></ol></li><li>系统消息<ol><li>界面提醒（上&#x2F;下线提醒）</li><li><code>sco.js/message.js</code></li></ol></li><li>用户上下线<br><img src="https://i.imgur.com/EfROll6.png"></li></ol></li><li><p>具体实例可参考网上的资料：</p><ol><li><a href="http://blog.fens.me/nodejs-socketio-chat/">Socket.io在线聊天室</a></li><li><a href="https://github.com/bsspirit/chat-websocket">bsspirit&#x2F;chat-websocket</a></li><li><a href="https://github.com/yinxin630/fiora">yinxin630&#x2F;fiora</a></li><li><a href="https://github.com/lufeng501/nchat">lufeng501&#x2F;nchat</a></li><li><a href="https://github.com/maochunguang/free_chat">maochunguang&#x2F;free_chat</a></li><li><a href="http://www.52im.net/thread-516-1-1.html">一个WebSocket实时聊天室Demo：基于node.js+socket.io</a></li><li><a href="https://blog.csdn.net/haodawang/article/details/56011749">Node.js websocket 使用 socket.io库实现实时聊天室</a></li><li><a href="https://zhuanlan.zhihu.com/p/36602333">Node.js + Web Socket 打造即时聊天程序</a></li><li><a href="http://www.rxshc.com/164.html">实战WebSocket聊天室：从开发到部署上线</a></li></ol></li></ol><h2 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h2><ol><li>聊天室分为客户端和服务端，完整的应用其实就是把这两个模块连接起来实现数据通信，然后在分别对两个模块进行细分；</li><li>根据细节的结果确定其中涉及的技术问题，逐一进行解决，类似于搭积木游戏；</li><li>比如客户端模块需要<code>html/css/js</code>、模板引擎；服务器模块需要<code>Node.js/Express/Koa</code>、<code>sco.js/message.js</code>、数据库技术等；</li><li><code>Node.js</code>很适合应用在高并发的场景中，高并发的场景可以使用Nginx来做负载均衡，会有哪些难点需要在实际项目中才会知道，大概是在读写数据和数据传输方面会有一些需要重点解决的问题；</li><li>在<code>Node.js</code>中写测试，包括了测试框架、测试异步函数、私有方法、模拟测试环境、依赖<code>HTTP</code>协议的<code>web</code>应用，需要了解<code>TDD</code>和<code>BDD</code>，还有需要提供测试的覆盖率</li></ol><h3 id="Node-js单元测试工具"><a href="#Node-js单元测试工具" class="headerlink" title="Node.js单元测试工具"></a>Node.js单元测试工具</h3><ol><li>测试框架：<code>mocha</code></li><li>断言库：<code>should.js</code>、<code>expect.js</code>、<code>chai</code></li><li>覆盖率：<code>istanbul</code>、<code>jscover</code>、<code>blanket</code></li><li>Mock库：<code>muk</code></li><li>测试私有方法：<code>rewire</code></li><li>Web测试：<code>supertest</code></li><li>持续集成：<code>Travis-cli</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>空山鸟语</title>
      <link href="/2018/05/24/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E7%A9%BA%E5%B1%B1%E9%B8%9F%E8%AF%AD/"/>
      <url>/2018/05/24/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E7%A9%BA%E5%B1%B1%E9%B8%9F%E8%AF%AD/</url>
      
        <content type="html"><![CDATA[<p>空山鸟语<br>作者：吴华锦<br>空山鸟语可言欢，静水不流鱼跃潭。<br>欧生垂钓噤声久，松果决意起波澜。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>樊城多锦绣</title>
      <link href="/2018/05/24/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E6%A8%8A%E5%9F%8E%E5%A4%9A%E9%94%A6%E7%BB%A3/"/>
      <url>/2018/05/24/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E6%A8%8A%E5%9F%8E%E5%A4%9A%E9%94%A6%E7%BB%A3/</url>
      
        <content type="html"><![CDATA[<p>樊城多锦绣<br>作者：吴华锦<br>樊城多锦绣，赋诗饮清醇。<br>水跳鱼飞跃，影动雁相从。<br>庙高承先意，尊古是为风。<br>林喧读书朗，鸟噪采桑忙。<br>儿童游戏闹，家老满弓张。<br>朝夕霓裳曲，四时舞清商。<br>霁月流纨素，彩云飘星汉。<br>月望风势起，摇情江树满。<br>凭却思乡意，微著小阑干。<br>军所辎粮重，府衙课税除。<br>折柳相送别，揽辔频驻步。<br>兵阵势成虎，呼声如雷鼓。<br>冷风侵衣甲，盈汗结冰霜。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>晓风轻</title>
      <link href="/2018/05/24/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E6%99%93%E9%A3%8E%E8%BD%BB/"/>
      <url>/2018/05/24/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E6%99%93%E9%A3%8E%E8%BD%BB/</url>
      
        <content type="html"><![CDATA[<p>晓风轻<br>作者：吴华锦<br>学斋翻旧本，庭落扑流萤。<br>虫鸣生困意，鸟叫催天明。<br>清风不绝耳，流水遇知音。<br>傲游天地外，山海若微尘。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>孟夏</title>
      <link href="/2018/05/24/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E5%AD%9F%E5%A4%8F/"/>
      <url>/2018/05/24/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E5%AD%9F%E5%A4%8F/</url>
      
        <content type="html"><![CDATA[<p>孟夏<br>作者：吴华锦<br>秋歌夏曲夜无眠，中庭月照金凤仙。<br>青鸟殷勤传信物，隽秀文章诚如面。<br>竹揽清风常自在，松怀幽光独去闲。<br>兰蕙无心芳香溢，君子有德不须言。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如梦令</title>
      <link href="/2018/04/17/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E5%A6%82%E6%A2%A6%E4%BB%A4/"/>
      <url>/2018/04/17/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E5%A6%82%E6%A2%A6%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>如梦令<br>作者：吴华锦<br>风高雨冷花鲜艳，灯暖帘深梦香甜。<br>识得君卿呼唤名，那般相思如亲见。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>岁月神偷</title>
      <link href="/2018/03/23/%E6%96%87%E5%AD%A6/%E5%AE%83%E5%B1%B1%E4%B9%8B%E7%9F%B3/%E5%B2%81%E6%9C%88%E7%A5%9E%E5%81%B7/"/>
      <url>/2018/03/23/%E6%96%87%E5%AD%A6/%E5%AE%83%E5%B1%B1%E4%B9%8B%E7%9F%B3/%E5%B2%81%E6%9C%88%E7%A5%9E%E5%81%B7/</url>
      
        <content type="html"><![CDATA[<p>岁月神偷<br>作者：无名氏<br>镜中花叶水中楼，雪上眉须心上秋。<br>如也空空年少梦，人间岁月是神偷。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春分</title>
      <link href="/2018/03/21/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E6%98%A5%E5%88%86/"/>
      <url>/2018/03/21/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E6%98%A5%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>春分<br>作者：吴华锦<br>昨夜雨瀑帘，醒来水滴叶。<br>翠引欢喜鸟，趣谈不言歇。<br>镜装春芳浓，池饮百花鲜。<br>君心诚如玉，殷勤待我接。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从军行</title>
      <link href="/2018/03/11/%E6%96%87%E5%AD%A6/%E6%9D%82%E6%96%87/%E4%BB%8E%E5%86%9B%E8%A1%8C/"/>
      <url>/2018/03/11/%E6%96%87%E5%AD%A6/%E6%9D%82%E6%96%87/%E4%BB%8E%E5%86%9B%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>从军行<br>作者：吴华锦<br>胡子不刮，年纪一把。<br>胡子一刮，俊俏潇洒。<br>老夫聊发，少年张狂。<br>山重水深，旌旗飞扬。<br>登高一吼，啸声回环。<br>灞桥作别，折柳相送。<br>烽火戎机，律之所从。<br>御风飞驰，月影无踪。<br>樊河有意，静水无声。<br>黑夜如昼，火光盈城。<br>岑楼封锁，呼马临门。<br>长空乍裂，欢声雷鼓。<br>中帐策对，朱雀玄武。<br>宝剑试锋，青龙白虎。<br>帐饮美酒，战事已休。<br>闻笛起舞，思归正愁。<br>从戎廿九，中军良谋。<br>小儿祝词，樊城黄口。<br>乡音绕梁，家老安否。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春芳</title>
      <link href="/2018/01/31/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E6%98%A5%E8%8A%B3/"/>
      <url>/2018/01/31/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E6%98%A5%E8%8A%B3/</url>
      
        <content type="html"><![CDATA[<p>春芳<br>作者：吴华锦<br>云阁甚飘渺，乘山登雾丛。<br>烟起游仙蔽，雨打孤老蓬。<br>枯泉出新酒，残叶饮浆琼。<br>顽石开几朵，款赠春芳浓。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>万籁如息</title>
      <link href="/2018/01/31/%E6%96%87%E5%AD%A6/%E6%9D%82%E6%96%87/%E4%B8%87%E7%B1%81%E5%A6%82%E6%81%AF/"/>
      <url>/2018/01/31/%E6%96%87%E5%AD%A6/%E6%9D%82%E6%96%87/%E4%B8%87%E7%B1%81%E5%A6%82%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>万籁如息<br>作者：吴华锦<br>狂风大作，暴雨滂沱<br>窗敲纱磨，蜷缩侧卧<br>遍寻姬旦，乌蒙霍霍<br>万籁如息，一梦南柯</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打油诗</title>
      <link href="/2018/01/15/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E6%89%93%E6%B2%B9%E8%AF%97/"/>
      <url>/2018/01/15/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E6%89%93%E6%B2%B9%E8%AF%97/</url>
      
        <content type="html"><![CDATA[<p>天凉好个秋<br>作者：吴华锦<br>天凉好个秋，天冷好个冬。<br>周末勤劳动，加班到晚钟。<br>熄灯夜如漆，急驶马如龙。<br>久冻被生冰，掀帘怕窗风。<br>泡脚舒筋络，盘腿血脉通。<br>仰卧思绪满，侧躺难入梦。<br>频催安枕席，偶遇老仙翁。<br>借问何所往，不知何所踪。<br>我笑人太痴，君心多情浓。<br>大雪覆高台，霜压梅子重。<br>闲云洗清月，雁荡绕山空。<br>神游天地外，落笔小诗丛。<br>愿寄书生意，萍水一相逢。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>辞岁</title>
      <link href="/2017/12/31/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E8%BE%9E%E5%B2%81/"/>
      <url>/2017/12/31/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E8%BE%9E%E5%B2%81/</url>
      
        <content type="html"><![CDATA[<p>辞岁<br>作者：吴华锦<br>雀引高吭呼朋伴，欢喜踏枝跃天蓝。<br>北国噤声直为冷，岭南浓趣不说寒。<br>百花争艳夺人目，乘月无声仰头看。<br>江树摇情几时归？待得来年春意满。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>层林尽染</title>
      <link href="/2017/12/19/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E5%B1%82%E6%9E%97%E5%B0%BD%E6%9F%93/"/>
      <url>/2017/12/19/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E5%B1%82%E6%9E%97%E5%B0%BD%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<p>层林尽染<br>作者：吴华锦<br>楼外层林染，屋墙起秋霜。<br>鲜果珍珠落，残叶裹红装。<br>渐午风落寞，晚冬歌悠扬。<br>临阶倏驻步，青鸟直云上。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>临窗幕</title>
      <link href="/2017/11/16/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E4%B8%B4%E7%AA%97%E5%B9%95/"/>
      <url>/2017/11/16/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E4%B8%B4%E7%AA%97%E5%B9%95/</url>
      
        <content type="html"><![CDATA[<p>临窗幕<br>作者：吴华锦<br>月沉星落竹影移，归鸟衔泥檐上栖。<br>穿廊停看梅花雪，梨园犹唱湘妃忆。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双十一作</title>
      <link href="/2017/11/12/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E5%8F%8C%E5%8D%81%E4%B8%80%E4%BD%9C/"/>
      <url>/2017/11/12/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E5%8F%8C%E5%8D%81%E4%B8%80%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>双十一作<br>作者：吴华锦<br>山城凝云影重重，阁台望远听晚风。<br>自怪岭南不见雪，初遇琼芳趣意浓。<br>小炉跳火温绿酒，多少言谈杯盏中。<br>别过经年几忘却，犹记嫣然频入梦。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>少年锦时</title>
      <link href="/2017/10/02/%E6%96%87%E5%AD%A6/%E5%8F%AF%E4%BB%A5%E6%94%BB%E7%8E%89/%E5%B0%91%E5%B9%B4%E9%94%A6%E6%97%B6/"/>
      <url>/2017/10/02/%E6%96%87%E5%AD%A6/%E5%8F%AF%E4%BB%A5%E6%94%BB%E7%8E%89/%E5%B0%91%E5%B9%B4%E9%94%A6%E6%97%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>年介廿六，生于北江之畔，山峦秀丽，川流清冽，风物俱美，人杰地灵。自09年以降，求学于深圳大学，专攻于电子信息技术。性情随和，乐于助人；喜文艺，好旅行摄影。下笔千言，不知所云，但洒潘江，各倾陆海。</p></blockquote><blockquote><p>好读书，不求甚解，文艺气息浓重，庄子、木心、陈寅恪、蒋勋、王小波，诗词歌赋，古今中外皆有涉猎。爱好足球，但极少踢球，远足爬山，观览风景，适闲心性，趣意盎然。对美有极致追求，简洁明快，自然而生。不喜喧闹，不近人群，享受孤独。爱独游，亦喜呼朋引伴，多为风物美食倾倒，尤爱周庄水韵，阿尔卑斯山麓的清流，美哉，快哉。</p></blockquote><blockquote><p>一箪食一瓢饮，甚是辛酸。从来不着文笔墨，到头尽是虚妄，叹叹叹。看那庄周梦蝶，锦瑟年华，乐得一世逍遥，好不自在。鲲鹏展翅九万里，志在南海，极目千里，壮阔无边。也道是“一蓑烟雨任平生”，人生如梦，一樽还酹江月。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 散文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七月作别</title>
      <link href="/2017/09/03/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E4%B8%83%E6%9C%88%E4%BD%9C%E5%88%AB/"/>
      <url>/2017/09/03/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E4%B8%83%E6%9C%88%E4%BD%9C%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>七月作别<br>作者：吴华锦<br>半响消磨晨与昏，物事流转是更非。<br>花烛明灭寒山径，月上层楼满清辉。<br>疏懒无聊棋子落，竹影飘摇两重门。<br>借问明朝归何处，一望关山一路尘。  </p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>粤北明珠·英德</title>
      <link href="/2017/09/03/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E7%B2%A4%E5%8C%97%E6%98%8E%E7%8F%A0%C2%B7%E8%8B%B1%E5%BE%B7/"/>
      <url>/2017/09/03/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E7%B2%A4%E5%8C%97%E6%98%8E%E7%8F%A0%C2%B7%E8%8B%B1%E5%BE%B7/</url>
      
        <content type="html"><![CDATA[<p>粤北明珠<br>作者：吴华锦<br>若说岭南多奇峻，明珠一点在英城。<br>贯开津渡迎宾客，诗里桃源常问寻。<br>学社承古风气朗，遍游江湖有神韵。<br>楼屋起灯辞旧岁，静夜围圆说丰年。 </p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水脉洗春芳</title>
      <link href="/2017/09/03/%E6%96%87%E5%AD%A6/%E5%8F%AF%E4%BB%A5%E6%94%BB%E7%8E%89/%E6%B0%B4%E8%84%89%E6%B4%97%E6%98%A5%E8%8A%B3/"/>
      <url>/2017/09/03/%E6%96%87%E5%AD%A6/%E5%8F%AF%E4%BB%A5%E6%94%BB%E7%8E%89/%E6%B0%B4%E8%84%89%E6%B4%97%E6%98%A5%E8%8A%B3/</url>
      
        <content type="html"><![CDATA[<p>水脉洗春芳<br>作者：吴华锦</p><blockquote><p>水脉洗春芳，草已盛，花也繁，池鱼逐波浪，燕鹊筑新房。佳节临近，暖阳正待，登高望远，无限风光。林深悠远，曲径通幽，清泉滑过青苔，涧户寂静无人。鸡唱晓，鸟欢腾，露水拔力着根迹，松果无端作别离。山竹高挺，春笋贯列，穿林汲水浇园圃，平地圈栏养鸡鹅，三两处浣衣闲谈话家常。晨炊起，花娇树茂，风和日丽，旨趣不言深，收拾心情，迎佳节。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>月影横斜水清浅</title>
      <link href="/2017/09/03/%E6%96%87%E5%AD%A6/%E5%8F%AF%E4%BB%A5%E6%94%BB%E7%8E%89/%E6%9C%88%E5%BD%B1%E6%A8%AA%E6%96%9C%E6%B0%B4%E6%B8%85%E6%B5%85/"/>
      <url>/2017/09/03/%E6%96%87%E5%AD%A6/%E5%8F%AF%E4%BB%A5%E6%94%BB%E7%8E%89/%E6%9C%88%E5%BD%B1%E6%A8%AA%E6%96%9C%E6%B0%B4%E6%B8%85%E6%B5%85/</url>
      
        <content type="html"><![CDATA[<p>月咏<br>作者：吴华锦<br>月是仙娥居桂宫，<br>月是离人相守望，<br>月是渔火照江津，<br>月是锦书凭雁传，<br>月是雪肌洁如玉，<br>月是明眸清似水，<br>月是冰蕊飘香径，<br>月是繁星相依伴，<br>月是繁花同绮丽，<br>月是琴瑟长和鸣，<br>月是如镜水盈盈，<br>月是如影舞频频，<br>月是如梦总关情，<br>（一见如故，一念如慕，最是倾心），<br>月是皎皎白海棠，<br>月是姝姝金芙蓉，<br>月是桃园起芬芳，<br>月是兰圃露华浓，<br>月是锦书何所寄，<br>月是锦瑟何所惜，<br>月是锦心长相忆，<br>月是夭桃施粉黛，<br>月是河洛意徘徊，<br>月是伊人直可待，<br>月是晴光满心怀，<br>月是庭兰香馥郁，<br>月是窗竹满清音。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仲夏</title>
      <link href="/2017/09/03/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E4%BB%B2%E5%A4%8F/"/>
      <url>/2017/09/03/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E4%BB%B2%E5%A4%8F/</url>
      
        <content type="html"><![CDATA[<p>仲夏<br>作者：吴华锦</p><blockquote><p>心无涯，何处露芳华？独去乐，满江雨落滴洒。苦行舟，形容消瘦。</p></blockquote><p>平生热望皆飘散，转眼迷踪不可知。<br>烈烈晴日炙心肺，冷冷阴雨灼口舌。<br>他年若是人间好，一曲愁肠一首诗。<br>今夜夜凉秋月半，恨得离别意迟迟。  </p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>月落风荷咏</title>
      <link href="/2017/09/03/%E6%96%87%E5%AD%A6/%E5%8F%AF%E4%BB%A5%E6%94%BB%E7%8E%89/%E6%9C%88%E8%90%BD%E9%A3%8E%E8%8D%B7%E5%92%8F/"/>
      <url>/2017/09/03/%E6%96%87%E5%AD%A6/%E5%8F%AF%E4%BB%A5%E6%94%BB%E7%8E%89/%E6%9C%88%E8%90%BD%E9%A3%8E%E8%8D%B7%E5%92%8F/</url>
      
        <content type="html"><![CDATA[<p>月落风荷咏<br>作者：吴华锦</p><blockquote><p>临近七夕，佳节将至，暑气未消，蝉鸣鸟噪，人来人往，不亦乐乎。天高地阔，水天一色，阴云密布，狂风大作，大雨滂沱，一时熙熙攘攘，一时寂寞萧索。雨落如注，雨帘如瀑，雨滴如珠，叶之纷飞如舞，花之零落成泥。暮色染窗镜，华灯起氤氲，雨势渐停，饥声频频，大快朵颐。正是饭余闲散有意趣，赏心乐事游园时。旧景如昨，华庭错落，清丽和风送，娇柔花香来，残叶覆夏草，颓垣现秋苔，紫荆相暌违，红樱遍地栽。新月长空净，芙蓉荷塘清，莲人玉立三生世，粉颊如雪质如冰，相见多莞尔，返照笑可盈。流波声寂寂，岸柳影重重，浮光映月露华浓。蟾宫桂树生繁茂，古来骚客几多情？人面桃花都不见，今年却与去年同，无端情绪相依偎，好景如常，人生似梦，月落风荷咏。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>荔园晚风</title>
      <link href="/2017/09/03/%E6%96%87%E5%AD%A6/%E6%95%A3%E6%96%87/%E8%8D%94%E5%9B%AD%E6%99%9A%E9%A3%8E/"/>
      <url>/2017/09/03/%E6%96%87%E5%AD%A6/%E6%95%A3%E6%96%87/%E8%8D%94%E5%9B%AD%E6%99%9A%E9%A3%8E/</url>
      
        <content type="html"><![CDATA[<p>荔园晚风<br>作者：吴华锦</p><blockquote><p>九月晚凉，秋风吹落枝丫上憔悴的木槿花，用力狠狠地抓住地面，嗒的一声散在跟前。那可怜模样勾得人不自主弯腰捡拾，寻得一处青葱繁叶，掸掉瓣上沾染的泥尘，仔细安放。慢慢走远，回头探看，有一种别致的温柔。行人熙攘，点步独行，看着新月初升，秋日黄昏，湖畔处三三两两坐着一对又一对，各式逗趣言谈、打情骂俏，穿花渡柳，凌波一送荡起轻舟，成了我笔下的一句又一句。</p></blockquote><blockquote><p>晚照斜落岸边小亭，些许人群趁着光景好好欣赏柳叶翻飞，湖面波皱的安宁。回廊小道簇拥着拍照的少年、青年以及老年，顺着我的这个方向，成了一处风景。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 散文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>又见新春</title>
      <link href="/2017/09/03/%E6%96%87%E5%AD%A6/%E5%8F%AF%E4%BB%A5%E6%94%BB%E7%8E%89/%E5%8F%88%E8%A7%81%E6%96%B0%E6%98%A5/"/>
      <url>/2017/09/03/%E6%96%87%E5%AD%A6/%E5%8F%AF%E4%BB%A5%E6%94%BB%E7%8E%89/%E5%8F%88%E8%A7%81%E6%96%B0%E6%98%A5/</url>
      
        <content type="html"><![CDATA[<p>又见新春<br>作者：吴华锦</p><blockquote><p>是春有新月，满庭芳，窗下盆兰，平时随洒一瓢饮，护得幽兰次第开，一度风烈凛凛，一度雨肥漫漫，今年似旧年，石阶曲径行人往，荷莲残叶换新装，藕香熬煮，勾起邻人味痴，品尝。乡野有春意，处处笑开颜，志在家老欢欣，黄鹂啭啼引朋伴，围园逐草风露餐，彩扇扑扑，水暖花鲜，山桃一夜开遍，殷红更胜粉颊，飞燕自娇羞，缱绻枝头理容妆，池鱼游弋，鸳鸟戏水，一树正挂心愿，神思早已飞驰。朗月如玉，纤云如锦绣，描得一片竹影横斜水清浅，风摇酒香迷醉，最是一时良辰，楼檐灯起，这般院落，静如传声密语，是春新月，又见满庭芳。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝色盛夏</title>
      <link href="/2017/09/03/%E6%96%87%E5%AD%A6/%E5%8F%AF%E4%BB%A5%E6%94%BB%E7%8E%89/%E8%93%9D%E8%89%B2%E7%9B%9B%E5%A4%8F/"/>
      <url>/2017/09/03/%E6%96%87%E5%AD%A6/%E5%8F%AF%E4%BB%A5%E6%94%BB%E7%8E%89/%E8%93%9D%E8%89%B2%E7%9B%9B%E5%A4%8F/</url>
      
        <content type="html"><![CDATA[<p>蓝色盛夏<br>作者：吴华锦</p><blockquote><p>蓝色盛夏，热浪裹青帐，山昏影更长。泉水倚清涧，兰舟穿塘莲，绿荷如擎盖，芙蓉比高洁，好风有劲意，欺云赶雨不停息，吹皱一池淡墨，流远一行柔波，拂起千叶霓裳甚风情。石阶轻弹珍珠落，回廊闻香挂雨帘，三三两两，闲叙一二，不止良辰好景，更有赏心乐事。山色空蒙笼烟纱，泼染水洗如画。云销雨霁，明月均分千家院，一种情思谁家窗，点滴在心间，最是酣梦能消除，无念且无主。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>念</title>
      <link href="/2017/09/03/%E6%96%87%E5%AD%A6/%E6%95%A3%E6%96%87/%E5%BF%B5/"/>
      <url>/2017/09/03/%E6%96%87%E5%AD%A6/%E6%95%A3%E6%96%87/%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p>一念<br>作者：吴华锦 </p><blockquote><p>首先，生日快乐，永远年轻美丽！</p></blockquote><blockquote><p>然后，到了想写点东西的时候，越是想要尽情挥洒，越是无从落笔，或者是文章本天成，妙手偶得之。</p></blockquote><blockquote><p>月影而姗，花开正好，仲夏已近秋时，槐桂更是飘香。门庭夜色寂寂，窗天沉沉如漆，刚好有个安静的环境，可以想啊想，想想生日怎么过才有趣，能够感动，能够欣喜，能够祈愿，能够祝福，这么有意义的日子，应该可以一起度过，平静而温馨的时光最是让人深深记忆，记忆，回忆着。时间很匆匆，匆匆地走着，南方树叶总是绿的，花不怎么凋零，荷塘的月色那么迷人，相拥的恋人情意绵绵。一切都这么静静地流淌着，许多有趣故事姗姗来迟，就这么一直写啊画啊，仿佛没有尽头。好时光要好好保存着，比如酿酒，越陈越香。好心情常在啊，莫辜负了美景良辰，有这般赏心乐事，当为卿君饮一杯。锦字   </p></blockquote><blockquote><p>六月既末，时岁流转，清河常在，绿水长流，顿感光阴飞驰，物事皆为可叹。许久未有畅谈之旨趣，为念竟是无端而止，甚为茫然，不知所措。平日俗务繁杂，日作不息，夜寝难安，须得寻一究竟。然，世事终有其起源发至，吾必不能得尝所愿，随心所向，不如求取于心，拭去尘埃，弃之不顾，得些许豁然开朗，清明世界。然，终归心有郁结，存着疑问，自取苦恼，难以释怀，如若得一二明确言语，定能云散烟消，自在悠然。</p></blockquote><blockquote><p>吾感佩于磊磊落落，直言不讳，何须闪烁言语，隐藏形迹，倒是声扬形张，心意恳切，以求恭听。窃以为，事皆有其缘起，亦有其缘灭，诚如四时之春发、夏盛、秋衰、冬灭，然春发之时何其生趣，冬灭更有其旨趣。人之所为缘字牵绊，终归心意相通，诚意相待，无时无刻感到如是般可贵、可珍，绝不为物事流转、年月更替而有所改变。</p></blockquote><blockquote><p>人或有志之所向，神之所往，一人向前，一人跟随。然，多半是陌路，平静相遇，或擦肩而逝，或结伴同行，众生芸芸，谁当如此？莫不为一人前行，一人追随，一人等待，一人奔跑，此为追寻之路也。诚然，我为追随，汝当前行，一路奔跑，从不停歇。敢问光阴可知吾之所向往如何炽烈，又如何与他人说，虽心之所念拳拳，竟默然无声，只为但求努力，前程已趋，所谓前程，是为汝尔。</p></blockquote><blockquote><p>仲夏宁静如斯，行人往来匆匆，神思翻飞，但寻归途，以得方向。念逝去时光太多，这般手足无措，唯恐空虚了这一生美好时光。嘤嘤其鸣，以求友声，当日不惜，如蒙不弃，愿发吾声，以求回响。吾向不喜喧闹，只得独自回家，平静生活。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 散文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>醉是流年</title>
      <link href="/2017/09/03/%E6%96%87%E5%AD%A6/%E5%8F%AF%E4%BB%A5%E6%94%BB%E7%8E%89/%E9%86%89%E6%98%AF%E6%B5%81%E5%B9%B4/"/>
      <url>/2017/09/03/%E6%96%87%E5%AD%A6/%E5%8F%AF%E4%BB%A5%E6%94%BB%E7%8E%89/%E9%86%89%E6%98%AF%E6%B5%81%E5%B9%B4/</url>
      
        <content type="html"><![CDATA[<p>醉是流年<br>作者：吴华锦</p><p>烛光曳曳竹影移，庭前寒露满纱窗。<br>冷月沁出珍珠泪，银桂飘得十里香。</p><p>灿若星辰美若仙，凌波飞渡有河洛。<br>长发飘然惊鱼貌，粉颊带雪玲珑心。</p><p>江南烟雨春，湘西山色好。<br>临风但曰雅，新亭铺盏茶。<br>儿童游戏闹，浣洗言谈欢。<br>渐午炊烟起，回家吃饭去。 </p><p>月洒金辉镶碧树，花落银盘挂玉帘。  </p><p>山花已盛开，好景时光裁。<br>暖阳须明日，君卿直可待。 </p><blockquote><p>看他悠然自得，胸中自有丘壑，世事纷然无涯，不如归家喝茶。天也晴，水也清，风光正好，可惜，行人太匆匆，为哪般？纵使急速有千里，穿林起风声，不敌年华易老，人面婆娑，不如举起一杯清浅，相邀歌。</p></blockquote><blockquote><p>小城故事多，夕阳剪影，华灯初上，夜色宁静。好山好水好风景，燕雀穿空有余音，晚风轻拍美人镜，皱起鳞光催夜频。</p></blockquote><blockquote><p>日长夜短不足眠，窄巷深深，行人急促，摩肩接踵。欢庆后，百无聊赖，观星摘月，追踪往年。正是，良辰好景莫辜负，赏心乐事各家院，天地辽阔，不似，处处高楼遮望眼。恰逢佳节好心闲，山水同源，花开自在，艳羡路人。称病几分重，游丝不肯离，静心且静气，常翻几页书。读完我也不知道看了什么，只是看书这件事本身就很有意思。爱惜身体，早睡，早不早起看毅力，晚安。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初冬闲情</title>
      <link href="/2016/12/03/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E5%88%9D%E5%86%AC%E9%97%B2%E6%83%85/"/>
      <url>/2016/12/03/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E5%88%9D%E5%86%AC%E9%97%B2%E6%83%85/</url>
      
        <content type="html"><![CDATA[<p>初冬闲情<br>作者：吴华锦<br>一雾一飞花，一树一天涯。<br>层台生斑驳，亭阁落窗纱。<br>昨日人为患，今朝鸟啄食。<br>寒塘春意早，暖炉有清茶。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今又重阳，岁岁重阳</title>
      <link href="/2016/11/04/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E4%BB%8A%E5%8F%88%E9%87%8D%E9%98%B3%EF%BC%8C%E5%B2%81%E5%B2%81%E9%87%8D%E9%98%B3/"/>
      <url>/2016/11/04/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E4%BB%8A%E5%8F%88%E9%87%8D%E9%98%B3%EF%BC%8C%E5%B2%81%E5%B2%81%E9%87%8D%E9%98%B3/</url>
      
        <content type="html"><![CDATA[<p>今又重阳，岁岁重阳<br>作者：吴华锦<br>来日又方长，今朝何须忙。<br>疏朗伸坚壁，惺忪看新阳。<br>屋下葡萄园，青藤着瓦墙。<br>红果挂角楼，绿籽晒圃场。<br>父曰餐飨后，沁酒回炉香。<br>文武风势起，蒸雾甚悠扬。<br>舂米研细粒，水软浸膏粱。<br>翁叟端醇碧，家老满弓张。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仲秋记事</title>
      <link href="/2016/10/21/%E6%96%87%E5%AD%A6/%E5%8F%AF%E4%BB%A5%E6%94%BB%E7%8E%89/%E4%BB%B2%E7%A7%8B%E8%AE%B0%E4%BA%8B/"/>
      <url>/2016/10/21/%E6%96%87%E5%AD%A6/%E5%8F%AF%E4%BB%A5%E6%94%BB%E7%8E%89/%E4%BB%B2%E7%A7%8B%E8%AE%B0%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<p>仲秋记事<br>作者：吴华锦</p><blockquote><p>台风天，闲来无事，胡乱写一首，一次写落，不再修改。另记中岛美雪歌曲听遍，算作一桩美绩，算去往来时光，犹是志得意满少年郎。那年秋季，隔窗相望大地风雷雨，想今日，归家啖茶闲谈有风趣。可谓是，景随心动，意随心转，偷闲写诗弹词笑声满天际。</p></blockquote><p>狂风起，转陀螺，水跳滴秋禾。<br>金黄满地滚波浪，油绿流水漫花床。<br>灯飘摇，点明灭，窗镜洗风荷。<br>闲里鸣歌声细细，好景入梦，一望山川正好。<br>佳期远近，念得白头如新，倾盖如故。<br>不识人间多自在，惯看山花山木秋风起。<br>一时光彩潇洒夺人目，却是流长细水总犹记。<br>回首，再回首，静里青毡安枕熟睡有心意。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登高楼，怀家老</title>
      <link href="/2016/10/17/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E7%99%BB%E9%AB%98%E6%A5%BC%EF%BC%8C%E6%80%80%E5%AE%B6%E8%80%81/"/>
      <url>/2016/10/17/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E7%99%BB%E9%AB%98%E6%A5%BC%EF%BC%8C%E6%80%80%E5%AE%B6%E8%80%81/</url>
      
        <content type="html"><![CDATA[<p>登高楼，怀家老<br>作者：吴华锦<br>眼里黄昏多耀目，足登西楼望故乡。<br>处处凭栏处处杯，停杯惆怅满秋霜。<br>小儿不识独去乐，搔挠怯怯舞而歌。<br>落日黄花有时尽，捡拾光阴莫心伤。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秋思</title>
      <link href="/2016/10/11/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E7%A7%8B%E6%80%9D/"/>
      <url>/2016/10/11/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E7%A7%8B%E6%80%9D/</url>
      
        <content type="html"><![CDATA[<p>秋思<br>作者：吴华锦<br>烛光曳曳竹影移，庭前寒露起秋霜。<br>冷月沁出珍珠泪，银桂飘得十里香。<br>池上归鸟是一对，檐下促织总成双。<br>遥想去年欢宴后，夜半相思满绣床。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怀秋瑾</title>
      <link href="/2016/10/11/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E6%80%80%E7%A7%8B%E7%91%BE/"/>
      <url>/2016/10/11/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E6%80%80%E7%A7%8B%E7%91%BE/</url>
      
        <content type="html"><![CDATA[<p>怀秋瑾<br>作者：吴华锦<br>龙泉昨夜已秋鸣，雁门关外度悲声。<br>风滚黄沙狂飞舞，云卷嚣土压边城。<br>号角重重马嘶嘶，将军一战百身死。<br>巾帼意气正飞扬，疆场宝剑初试锋。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雨后说秋</title>
      <link href="/2016/10/01/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E9%9B%A8%E5%90%8E%E8%AF%B4%E7%A7%8B/"/>
      <url>/2016/10/01/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E9%9B%A8%E5%90%8E%E8%AF%B4%E7%A7%8B/</url>
      
        <content type="html"><![CDATA[<p>雨后说秋<br>作者：吴华锦<br>雨后天欲静，明光去万里。<br>花繁争悦目，林喧引动听。<br>柳儿水底翠，莲子腹中密。<br>凭栏相看望，青山一如洗。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>醉相逢</title>
      <link href="/2016/09/02/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E9%86%89%E7%9B%B8%E9%80%A2/"/>
      <url>/2016/09/02/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E9%86%89%E7%9B%B8%E9%80%A2/</url>
      
        <content type="html"><![CDATA[<p>醉相逢<br>作者：吴华锦<br>花尘零落飞鸟尽，隔岸东篱有青烟。<br>衰草隐没池边路，乱枝斜挂屋上檐。<br>邈邈蟾宫生寂寞，皎皎华庭共欢宴。<br>独酌停杯相邀酒，临风狂歌五柳前。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>苏杭行记</title>
      <link href="/2016/08/28/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E8%8B%8F%E6%9D%AD%E8%A1%8C%E8%AE%B0/"/>
      <url>/2016/08/28/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E8%8B%8F%E6%9D%AD%E8%A1%8C%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>苏杭行记<br>作者：吴华锦<br>昨夜怀歌向杯盏，冷月幽光总伤情。<br>低眉浅唱相执手，平生知己何处寻。<br>节气清明风落寞，堤岸烟柳影婆娑。<br>去年今朝春色好，鳞光滟滟荡清波。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>少年行</title>
      <link href="/2016/08/12/%E6%96%87%E5%AD%A6/%E6%95%A3%E6%96%87/%E5%B0%91%E5%B9%B4%E8%A1%8C/"/>
      <url>/2016/08/12/%E6%96%87%E5%AD%A6/%E6%95%A3%E6%96%87/%E5%B0%91%E5%B9%B4%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>少年行<br>作者：吴华锦<br>春天到了，和风日丽，鸟叫欢喜。<br>吃过早饭，浇了花，商量着准备。<br>明日启程的行装。<br>窗外草已盛，花正香，欲把晴光漫洒，入心房。<br>纸上写了千万言，心中藏着一首歌。<br>充分发出光和热，产生一种温暖。<br>开怀大笑的时候，收获一种感动。<br>时光流转，花月摇摆，星辰灿烂。<br>这里的风很凉，呼吸欢畅。<br>披上那件缀着七彩流苏的外套。<br>回忆起节日里玫瑰的浓香。<br>还有那花竹灯笼美丽的笑容。<br>院落里也种着花草，以及各色植物。<br>像在家里一样，熟悉又安心。<br>远处未融化的雪山，笼着雾霭，一片洁白。<br>山麓错落的房子，围坐着一群欢乐孩子。<br>熟稔地把食物一块一块递到嘴边。<br>慢慢地嚼，慢慢地咽，慢慢地喝下一口水。<br>来时准备了当地的调子，随意地哼着。<br>跟人打着招呼，像极了吴侬软语话家常。<br>在别致的清流里，浮光绚烂出彩，安静出常。<br>没有晓风残月和长亭归舟，有执手相看。<br>千种风情，献与这般好景良辰，一声声。<br>莫在风尘里荡漾，也不要孤芳自赏。<br>把你晶莹剔透的心，留下一部分。<br>安放在这，瑞士小镇，阿尔卑斯山麓。<br>一起度过的美好时光。<br>在绿草如茵的午后，牵着手。<br>穿过潺潺溪流，茂盛松林，欢乐人群。<br>以及阵阵悠扬的歌声。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 现代诗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随想记</title>
      <link href="/2016/07/31/%E6%96%87%E5%AD%A6/%E6%9D%82%E6%96%87/%E9%9A%8F%E6%83%B3%E8%AE%B0/"/>
      <url>/2016/07/31/%E6%96%87%E5%AD%A6/%E6%9D%82%E6%96%87/%E9%9A%8F%E6%83%B3%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h1><blockquote><p>生活太匆匆，从指间划过，抓不住，徒兴叹。有时片刻产生的感觉、想法、思绪，当时很清晰，以为过后还能记得，这样的自信也就把一些美好的、感动的、深情的内容丢失。此篇作为可长久记叙的文本，让流年有它的足迹。</p></blockquote><h1 id="我的美学"><a href="#我的美学" class="headerlink" title="我的美学"></a>我的美学</h1><p>作者：吴华锦</p><p>生命中有两大自在追求，一则自然，二则快乐。“自然”可分为内心的自然和外物的自然。内心的自然即坦然无碍，畅然无阻。而外物的自然即对事物的感受。我把“自然”列入美学的范畴，同时也是美学的内涵。美学的内涵非常丰富，最高的境界是“庄周梦蝶，物我两忘”。当然，我个人觉得这种境界很难达到。所以，我更倾向于谈论简单的、与生俱来的美学。</p><p>先从自己的感受出发，多半都是习得的。古希腊的哲学讲的“认识你自己”，透露了一个见解，这是至关重要的。认识都是通过学习得来的，但又是与生俱来的。我并不愿意讨论太高深的哲学问题，唯一要说明的就是美学就是来自内心的感动与深情。</p><p>“一花一世界，一树一菩提”，每个人心中都有自己的一个世界和一方菩提。因看到而深受感动，因听见而深受感动，因倾诉而深受感动，因闻到而深受感动，因触摸而深受感动，因赠与而深受感动，因接纳而深受感动，因分享而深受感动。如果我们把世界分为八方，时时刻刻传递着奥秘，都因一刹那而感动至深。往下我要讲述最重要的深情，也是我最为关切的话题。</p><p>时至今日，在读书层面，“庄子”、“诗经”、“柳如是”、“红楼梦”、“陈寅恪”、“木心”以及“外国闲记文学”对我有很大影响。</p><ul><li><p>“庄子”包含达观向上、超然物外的境界，这是一种乐天的性格，充分展现在苏东坡身上。</p></li><li><p>除去政治因素，“诗经”是一部非常好的恋爱圣经，往后千年生发了许多典故。大学期间也喜欢读这部书，主要是忙于恋爱，算作增益一些见解。</p></li><li><p>“我见青山多妩媚，料青山见我应如是”。首先，“柳如是”这个名字本身就很漂亮，加之高绝的才情，独立的精神，不屈不挠的气魄，也是见之敬仰，思之渴慕。</p></li><li><p>陈寅恪，最后一个史学大家，赞叹于他深厚的古文功底，流畅的语句，精致的用词，活泼的逗趣，自我的闲适。活在自己的精神世界里，满心欢喜，怡然自得。读过几个大部头，虽然难点在于繁体字，但原味更足。也尝试读过钱钟书的“管锥篇”，真正的大部头，略显零落。相比散文的幽默很盛，善用艰深，也非我所爱。</p></li><li><p>把“红楼梦”与“木心”放到一起讲，也颇有深意。一首“从前慢——一生只够爱一个人”，我把“从前”划到“红楼梦”，把“慢”划到“深情”。情至深为真，上溯至诗经即为“寤寐求之，辗转反侧”，有趣味的是王安丰妇“我不卿卿，谁当卿卿”。最强最烈，最精最细也就是“红楼梦”，大学读过很多张恨水的小说，多少了解民国时的境况，但也能算作消遣，倒是后来“金粉世家”、“红粉世家”、“啼笑因缘” 以及“香粉传奇”更引人入胜。其中最喜“红粉世家”的剧本。美学这块讲得最好的应该是蒋勋，我虽则写了一些感想，总觉不能深切全面。</p></li></ul><h1 id="又见七夕"><a href="#又见七夕" class="headerlink" title="又见七夕"></a>又见七夕</h1><blockquote><p>七夕，重逢佳节，秦观又出来活动了。但说一个巧字，心灵手巧，更是蕙质兰心。对起来，上元佳节，又是辛弃疾的句子。我看是葡萄秋千架，银河笼轻纱。江南屋子，搭个凉棚散暑，已经是两个月之前的日子。<br>良辰好景莫虚度，过了七夕，又到了执笔填词上高楼，吹风喝酒，低吟浅唱的时候。金瓯满斟，月上柳梢头，人约黄昏后，嗖嗖，不是天凉好个秋，却是猫儿，落入桂花丛中，一盏明眸。</p></blockquote><p>在网上看到的段子，只是没有图片，不然会很有趣。“一个无悲无喜的眼神，一脸无冬无夏的深沉。一缕无色无味的清风，一具无牵无挂的灵魂。”</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 散文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计十载有所感</title>
      <link href="/2016/07/31/%E6%96%87%E5%AD%A6/%E5%AE%83%E5%B1%B1%E4%B9%8B%E7%9F%B3/%E7%BB%9F%E8%AE%A1%E5%8D%81%E8%BD%BD%E6%9C%89%E6%89%80%E6%84%9F/"/>
      <url>/2016/07/31/%E6%96%87%E5%AD%A6/%E5%AE%83%E5%B1%B1%E4%B9%8B%E7%9F%B3/%E7%BB%9F%E8%AE%A1%E5%8D%81%E8%BD%BD%E6%9C%89%E6%89%80%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<p>统计十载有所感<br>作者：谢益辉<br>十载去，一剑初试锋。筚路蓝缕计相统，诗酒年华意自承。夜雨任几更？<br>三代起，九会再迎朋。梅花南山月忆影，白鸟秋水虫鸣灯。惊雷却无声。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百字令·投袁大琴南</title>
      <link href="/2016/07/31/%E6%96%87%E5%AD%A6/%E5%AE%83%E5%B1%B1%E4%B9%8B%E7%9F%B3/%E7%99%BE%E5%AD%97%E4%BB%A4%C2%B7%E6%8A%95%E8%A2%81%E5%A4%A7%E7%90%B4%E5%8D%97/"/>
      <url>/2016/07/31/%E6%96%87%E5%AD%A6/%E5%AE%83%E5%B1%B1%E4%B9%8B%E7%9F%B3/%E7%99%BE%E5%AD%97%E4%BB%A4%C2%B7%E6%8A%95%E8%A2%81%E5%A4%A7%E7%90%B4%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>百字令·投袁大琴南<br>作者：龚自珍<br>深情似海，问相逢初度，是何年纪？<br>依约而今还记取，不是前生夙世。<br>放学花前，题诗石上，春水园亭里。<br>逢君一笑，人间无此欢喜。<br>无奈苍狗看云，红羊数劫，惘惘休提起。<br>客气渐多真气少，汩没心灵何已。<br>千古声名，百年担负，事事违初意。<br>心头阁住，儿时那种情味。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正月记事</title>
      <link href="/2016/07/29/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E6%AD%A3%E6%9C%88%E8%AE%B0%E4%BA%8B/"/>
      <url>/2016/07/29/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E6%AD%A3%E6%9C%88%E8%AE%B0%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<p>正月记事<br>作者：吴华锦<br>沉睡不知醒，喧声入梦来。<br>春草池边生，桑麻遍地栽。<br>晴空无一物，鸣禽两徘徊。<br>晨炊涤杯盏，幽兰次第开。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>锦字华年</title>
      <link href="/2016/07/27/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E9%94%A6%E5%AD%97%E5%8D%8E%E5%B9%B4/"/>
      <url>/2016/07/27/%E6%96%87%E5%AD%A6/%E4%B8%83%E8%A8%80/%E9%94%A6%E5%AD%97%E5%8D%8E%E5%B9%B4/</url>
      
        <content type="html"><![CDATA[<p>锦字华年<br>作者：吴华锦<br>诗里起韵再作诗，词中定调又填词。<br>流年似水落花红，绿杨烟柳笑春风。<br>行匆匆，听晚钟，相去三千里，思绪更朦胧。<br>白露沾衣吹酒醒，冷月孤星分外明。<br>华衣锦绣轻盈步，转眼迷踪无处寻。<br>四顾茫茫不可得，便向闾里问佳人。<br>佳人欢笑真容貌，恰似月仙落凡尘。<br>水底横波山色好，一片青帆载我行。<br>滟滟湖光点苍翠，的的斜阳入桃林。<br>花絮飘飞惹人醉，满地缤纷可堪怜。<br>东晋渔人桃源路，犹有迷津无人渡。<br>别样人生二十年，自在看花云雾里。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归根</title>
      <link href="/2016/07/24/%E6%96%87%E5%AD%A6/%E5%AE%83%E5%B1%B1%E4%B9%8B%E7%9F%B3/%E5%BD%92%E6%A0%B9/"/>
      <url>/2016/07/24/%E6%96%87%E5%AD%A6/%E5%AE%83%E5%B1%B1%E4%B9%8B%E7%9F%B3/%E5%BD%92%E6%A0%B9/</url>
      
        <content type="html"><![CDATA[<p>归根<br>作者：杨振宁<br>昔负千寻质，高临九仞峰。<br>深究对称意，胆识云霄冲。<br>神州新天换，故园使命重。<br>学子凌云志，我当指路松。<br>千古三旋律，循循谈笑中。<br>耄耋新事业，东篱归根翁。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>吴山晚登临</title>
      <link href="/2016/07/19/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E5%90%B4%E5%B1%B1%E6%99%9A%E7%99%BB%E4%B8%B4/"/>
      <url>/2016/07/19/%E6%96%87%E5%AD%A6/%E4%BA%94%E8%A8%80/%E5%90%B4%E5%B1%B1%E6%99%9A%E7%99%BB%E4%B8%B4/</url>
      
        <content type="html"><![CDATA[<p>吴山晚登临<br>作者：吴华锦<br>好文齐共赏，星月两迟迟。<br>坐看荧光暖，行觉夜风寒。<br>夭桃春暮近，纷然沾衣湿。<br>闲情无有寄，雁落满山枝。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鹧鸪天</title>
      <link href="/2016/06/18/%E6%96%87%E5%AD%A6/%E5%AE%83%E5%B1%B1%E4%B9%8B%E7%9F%B3/%E9%B9%A7%E9%B8%AA%E5%A4%A9/"/>
      <url>/2016/06/18/%E6%96%87%E5%AD%A6/%E5%AE%83%E5%B1%B1%E4%B9%8B%E7%9F%B3/%E9%B9%A7%E9%B8%AA%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p>鹧鸪天<br>作者：秋瑾<br>祖国沉沦感不禁，闲来海外觅知音。<br>金瓯已缺总须补，为国牺牲敢惜身？<br>嗟险阻，叹飘零。关山万里作雄行。<br>休言女子非英物，夜夜龙泉壁上鸣。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逍遥游</title>
      <link href="/2016/02/26/%E6%96%87%E5%AD%A6/%E5%AE%83%E5%B1%B1%E4%B9%8B%E7%9F%B3/%E9%80%8D%E9%81%A5%E6%B8%B8/"/>
      <url>/2016/02/26/%E6%96%87%E5%AD%A6/%E5%AE%83%E5%B1%B1%E4%B9%8B%E7%9F%B3/%E9%80%8D%E9%81%A5%E6%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="逍遥游"><a href="#逍遥游" class="headerlink" title="逍遥游"></a>逍遥游</h1><p>作者：庄子</p><blockquote><p>北冥有鱼，其名为鲲。鲲之大，不知其几千里也；化而为鸟，其名为鹏。鹏之背，不知其几千里也；怒而飞，其翼若垂天之云。是鸟也，海运则将徙于南冥。南冥者，天池也。齐谐者，志怪者也。谐之言曰：“鹏之徙于南冥也，水击三千里，抟扶摇而上者九万里，去以六月息者也。”野马也，尘埃也，生物之以息相吹也。天之苍苍，其正色邪？其远而无所至极邪？其视下也，亦若是则已矣。且夫水之积也不厚，则其负大舟也无力。覆杯水于坳堂之上，则芥为之舟；置杯焉则胶，水浅则舟大也。风之积也不厚，则其负大翼也无力，故九万里则风斯在下矣。而后乃今培风，背负青天而莫之夭阏者，而后乃今将图南。蜩与学鸠笑之曰：“我决起而飞，抢榆枋，时则不至，而控于地而已矣；奚以之九万里而南为？”适莽苍者，三餐而返，腹犹果然；适百里者，宿舂粮；适千里者，三月聚粮。之二虫又何知。小知不及大知，小年不及大年。奚以知其然也？朝菌不知晦朔，蟪蛄不知春秋，此小年也。楚之南有冥灵者，以五百岁为春，五百岁为秋；上古有大椿者，以八千岁为春，八千岁为秋。而彭祖乃今以久特闻，众人匹之，不亦悲乎？</p></blockquote><blockquote><p>汤之问棘也是已：“穷发之北有冥海者，天池也。有鱼焉，其广数千里，未有知其修者，其名曰鲲。有鸟焉，其名为鹏，背若太山，翼若垂天之云；抟扶摇、羊角而上者九万里，绝云气，负青天，然后图南，且适南冥也。斥鴳笑之曰：‘彼且奚适也？我腾跃而上，不过数仞而下，翱翔蓬蒿之间，此亦飞之至也。而彼且奚适也？’”此大小之辩也。</p></blockquote><blockquote><p>故夫知效一官、行比一乡、德合一君、而征一国者，其自视也亦若此也。而宋荣子犹然笑之。且举世而誉之而不加劝，举世而非之而不加沮，定乎内外之分，辩乎荣辱之境，斯已矣。彼其于世，未数数然也。虽然，犹有未树也。夫列子御风而行，泠然善也，旬有五日而后反。彼于致福者，未数数然也。此虽免乎行，犹有所待者也。若夫乘天地之正，而御六气之辩，以游无穷者，彼且恶乎待哉。故曰：至人无己，神人无功，圣人无名。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 古文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周庄水韵</title>
      <link href="/2016/02/26/%E6%96%87%E5%AD%A6/%E5%AE%83%E5%B1%B1%E4%B9%8B%E7%9F%B3/%E5%91%A8%E5%BA%84%E6%B0%B4%E9%9F%B5/"/>
      <url>/2016/02/26/%E6%96%87%E5%AD%A6/%E5%AE%83%E5%B1%B1%E4%B9%8B%E7%9F%B3/%E5%91%A8%E5%BA%84%E6%B0%B4%E9%9F%B5/</url>
      
        <content type="html"><![CDATA[<p>一支弯曲的木橹，在水面上一来一回悠然搅动，倒映在水中的石桥、楼屋、树影，还有天上的云彩和飞鸟，都被这不慌不忙的木橹搅碎，碎成斑斓的光点，迷离闪烁，犹如在风中漾动的一匹长长的彩绸，没有人能描绘它朦胧炫目的花纹······</p><p>有什么事情比在周庄的小河里泛舟更富有诗意呢？小小的木船，在窄窄的河道中缓缓滑行，拱形的桥孔一个接一个从头顶掠过。贞丰桥，富安桥，双桥······古老的石桥，一座有一座的形状，一座有一座的风格，过一座桥，便换了一道风景。站在桥上的行人低头看河里的船，坐在船上的乘客抬头看桥上的人，相看两不厌，双方的眼帘中都是动人的景象。</p><p>周庄的河道呈“井”字形，街道和楼宅被河分隔，然而河上有桥，石桥巧妙地将古镇连缀为一体。据说，当年的大户人家，能将船划进家门，大宅后院，还有泊船的池塘。这样的景象，大概只有在威尼斯才能见到。一个外乡人，来到周庄，印象最深的莫过于这里的水，以及一切和水连在一起的景物。</p><p>我曾经三次到周庄，都是在春天，每一次都坐船游镇，然而每一次留下的印象都不一样。第一次到周庄，正是仲春，那一天下着小雨，古镇被飘动的雨雾笼罩着，石桥和屋脊都隐约出没在飘忽的雨雾中，那天打着伞坐船游览，看到的是一幅画在宣纸上的水墨画。第二次到周庄是初春，刚刚下过一夜小雪，积雪还没有来得及将古镇覆盖，阳光已经穿破云层抚摸大地。在耀眼的阳光下，古镇上到处可以看到斑斑积雪，在路边，在屋脊，在树梢，在河边的石阶上，一滩滩积雪反射着阳光，一片晶莹斑斓，令人目眩。古老的砖石和清新的白雪参差交织，黑白分明，像是一幅色彩对比强烈的版画。在阳光下，积雪正在融化，到处可以听到滴水和流水的声音，小街的屋檐下在滴水，石拱桥的栏杆和桥洞在淌水，小河的石河沿上，往下流淌的雪水仿佛正从石缝中渗出来。细细谛听，水声重重叠叠，如诉如泣，仿佛神秘悠远的江南丝竹，裹着万般柔情，从地下袅袅回旋上升。</p><p>最近一次去周庄也是春天，然而是在晚上。那是一个温暖的春夜，周庄正举办旅游节，古镇把这天当成一个盛大节日。古老的楼房和曲折的小街缀满了闪烁的彩灯，灯光倒映在河中，使小河变成一条色彩斑斓的光带。坐船夜游，感觉是进入梦境。船娘是一位三十岁的农妇，以娴熟的动作，轻松地摇着撸，小船在平静的河面慢慢滑行，我们的身后，船的轨迹和橹的划痕留在水面上，变成一片漾动的光斑，水中倒影变得模糊朦胧，难以捉摸。小船经过一座拱桥时，前方传来一阵音乐，水面也突然变得晶莹剔透，仿佛是有晃荡的荧光从水下射出。船摇过桥洞，才发现从旁边交叉的水道中划过来一条张灯结彩的船，船舱里，有几个当地农民在摆弄丝弦。</p><p>还没有等我来得及细看，那船已经转了个弯，消失在后面的桥洞里，只留下丝竹管弦声，在被木船搅得起伏不平的河面上飘绕不绝······我们的小船划到了古镇的尽头，灯光暗淡了，小河也恢复了它本来的面目，平静的水面上闪烁着点点星光。从河里抬头看，只见屋脊参差，深蓝色的天幕上勾勒出它们曲折多变的黑色剪影。突然，一串串晶莹的光点从黑黝黝的屋脊上飞起来，像一群冲天而起的萤火虫，在黑暗中划出一道道暗红的光线。随着一声声清脆的爆炸声，小小的光点变成满天盛开的缤纷礼花，天空和大地都被这满天焰火照得一片通明。已经隐匿在夜色中的古镇，在七彩的焰火照耀下面目一新，瞬息万变，原本墨一般漆黑的屋脊，此时如同被彩霞拂照的群山，凝重的墨线变成了活泼流动的彩光。最奇妙的，当然是我身畔的河水，天上的辉煌和璀璨，全都落到了水里，平静幽深的河水，顿时变成了一条摇曳生辉、七彩斑斓的光带，随焰火忽明忽暗的河畔楼屋倒映在水里，像从河底泛起的一张张仰望天空的脸，我来不及看清楚他们的表情，他们便在水中消失。当新的一轮焰火在空中盛开时，他们又从遥远的水下泛起，只是又换了另一种表情。这时，从古镇的四面八方传来惊喜的欢呼，天上的美景稍纵即逝，地上的惊喜却在蔓延······</p><p>我很难忘记这个奇妙的夜晚，这是一个梦幻一般的夜晚，周庄在宁静的夜色中变得像神奇的童话，古镇幽远的历史和缤纷的现实，都荡漾在被竹篙和木橹搅动的水波之中。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 散文 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
